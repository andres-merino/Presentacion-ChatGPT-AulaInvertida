%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: blancoECFM.pdf
%%Creator: Adobe Acrobat 23.8.0
%%For: AEMERINOT
%%CreationDate: 22/02/2024, 15:50:14
%%BoundingBox: 0 0 792 446
%%HiResBoundingBox: 0 0 792 445.5586
%%CropBox: 0 0 792 445.5586
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 582 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 9.1-c001 79.675d0f7, 2023/06/11-19:21:16        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2023-09-26T15:44:47+05:00"
   xmp:CreatorTool="Inkscape 1.1.2 (https://inkscape.org)"
   pdf:Producer="cairo 1.17.4 (https://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -445.559 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 445.559 li
792 445.559 li
792 0 li
cp
clp
0 0 mo
791.973 0 li
791.973 445.559 li
0 445.559 li
0 0 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
571.859 35.805 mo
571.859 35.711 571.797 35.664 571.703 35.664 cv
567.328 35.664 li
567.234 35.664 567.188 35.711 567.188 35.805 cv
567.188 42.852 li
567.188 42.961 567.234 43.008 567.328 43.008 cv
568.281 43.008 li
568.375 43.008 568.422 42.961 568.422 42.852 cv
568.422 40.07 li
571.266 40.07 li
571.359 40.07 571.406 40.023 571.406 39.914 cv
571.406 39.086 li
571.406 38.992 571.359 38.93 571.266 38.93 cv
568.422 38.93 li
568.422 36.805 li
571.703 36.805 li
571.797 36.805 571.859 36.742 571.859 36.648 cv
cp
.703273 .603784 .602686 .492103 cmyk
f
572.457 38.102 mo
572.457 38.273 li
572.863 38.898 li
572.91 38.992 573.004 38.992 573.066 38.945 cv
573.395 38.758 573.879 38.617 574.395 38.617 cv
575.145 38.617 575.41 38.93 575.41 39.648 cv
575.41 39.852 li
575.113 39.805 574.723 39.773 574.395 39.773 cv
573.066 39.773 572.129 40.289 572.129 41.414 cv
572.129 42.695 573.238 43.133 574.426 43.133 cv
575.191 43.133 575.957 42.992 576.488 42.82 cv
576.613 42.648 li
576.613 39.648 li
576.613 38.195 575.738 37.555 574.473 37.555 cv
573.629 37.555 572.941 37.758 572.457 38.102 cv
cp
573.332 41.398 mo
573.332 40.977 573.645 40.727 574.426 40.727 cv
574.738 40.727 575.145 40.773 575.41 40.805 cv
575.41 41.977 li
575.16 42.023 574.77 42.086 574.426 42.086 cv
573.801 42.086 573.332 41.883 573.332 41.398 cv
cp
f
581.789 42.555 mo
581.82 42.352 li
581.383 41.727 li
581.336 41.633 581.273 41.633 581.18 41.695 cv
580.789 41.945 580.367 42.055 579.977 42.055 cv
579.273 42.055 578.867 41.695 578.867 41.07 cv
578.867 39.633 li
578.867 38.992 579.258 38.633 579.992 38.633 cv
580.367 38.633 580.758 38.742 581.07 38.93 cv
581.164 38.977 581.242 38.961 581.289 38.883 cv
581.695 38.273 li
581.742 38.18 581.727 38.102 581.648 38.055 cv
581.117 37.727 580.555 37.555 579.961 37.555 cv
578.539 37.555 577.664 38.367 577.664 39.633 cv
577.664 41.055 li
577.664 42.305 578.539 43.133 579.977 43.133 cv
580.695 43.133 581.273 42.93 581.789 42.555 cv
cp
f
586.082 37.68 mo
585.988 37.68 585.941 37.727 585.941 37.82 cv
585.941 41.945 li
585.707 42.023 585.348 42.055 585.004 42.055 cv
584.27 42.055 583.832 41.758 583.832 40.805 cv
583.832 37.82 li
583.832 37.727 583.785 37.68 583.691 37.68 cv
582.801 37.68 li
582.691 37.68 582.645 37.727 582.645 37.82 cv
582.645 40.82 li
582.645 42.461 583.598 43.133 585.004 43.133 cv
585.723 43.133 586.426 42.977 587.02 42.727 cv
587.082 42.695 587.129 42.633 587.129 42.539 cv
587.129 37.82 li
587.129 37.727 587.066 37.68 586.973 37.68 cv
cp
f
590.691 43.102 mo
590.77 43.086 590.801 43.023 590.801 42.93 cv
590.801 42.18 li
590.801 42.07 590.754 42.023 590.645 42.023 cv
590.52 42.023 590.379 42.039 590.254 42.039 cv
589.801 42.039 589.582 41.773 589.582 41.102 cv
589.582 35.805 li
589.582 35.711 589.535 35.664 589.426 35.664 cv
588.535 35.664 li
588.441 35.664 588.379 35.711 588.379 35.805 cv
588.379 41.133 li
588.379 42.398 588.988 43.133 590.098 43.133 cv
590.316 43.133 590.52 43.117 590.691 43.102 cv
cp
f
592.699 41.148 mo
592.699 38.789 li
593.793 38.789 li
593.871 38.789 593.934 38.742 593.934 38.648 cv
593.934 37.898 li
593.934 37.805 593.871 37.758 593.793 37.758 cv
592.684 37.758 li
592.59 36.523 li
592.59 36.445 592.527 36.383 592.434 36.383 cv
591.652 36.383 li
591.559 36.383 591.496 36.445 591.496 36.523 cv
591.496 41.227 li
591.496 42.586 592.34 43.133 593.402 43.133 cv
593.559 43.133 593.777 43.117 593.949 43.117 cv
594.059 43.102 594.09 43.023 594.09 42.945 cv
594.09 42.164 li
594.09 42.07 594.027 42.023 593.934 42.023 cv
593.762 42.023 593.605 42.039 593.512 42.039 cv
592.98 42.039 592.699 41.711 592.699 41.148 cv
cp
f
594.922 38.102 mo
594.922 38.273 li
595.328 38.898 li
595.375 38.992 595.469 38.992 595.531 38.945 cv
595.859 38.758 596.344 38.617 596.859 38.617 cv
597.609 38.617 597.875 38.93 597.875 39.648 cv
597.875 39.852 li
597.578 39.805 597.188 39.773 596.859 39.773 cv
595.531 39.773 594.594 40.289 594.594 41.414 cv
594.594 42.695 595.703 43.133 596.891 43.133 cv
597.656 43.133 598.422 42.992 598.953 42.82 cv
599.078 42.648 li
599.078 39.648 li
599.078 38.195 598.203 37.555 596.938 37.555 cv
596.094 37.555 595.406 37.758 594.922 38.102 cv
cp
595.797 41.398 mo
595.797 40.977 596.109 40.727 596.891 40.727 cv
597.203 40.727 597.609 40.773 597.875 40.805 cv
597.875 41.977 li
597.625 42.023 597.234 42.086 596.891 42.086 cv
596.266 42.086 595.797 41.883 595.797 41.398 cv
cp
f
603.473 37.789 mo
603.16 37.648 602.77 37.555 602.363 37.555 cv
601.066 37.555 600.129 38.398 600.129 39.742 cv
600.129 40.867 li
600.129 42.43 601.113 43.133 602.473 43.133 cv
603.145 43.133 603.941 42.992 604.551 42.758 cv
604.629 42.727 604.66 42.68 604.66 42.586 cv
604.66 35.805 li
604.66 35.711 604.613 35.664 604.52 35.664 cv
603.629 35.664 li
603.52 35.664 603.473 35.711 603.473 35.805 cv
cp
601.332 40.883 mo
601.332 39.742 li
601.332 38.961 601.754 38.617 602.488 38.617 cv
602.895 38.617 603.223 38.727 603.473 38.883 cv
603.473 41.945 li
603.223 42.023 602.863 42.086 602.504 42.086 cv
601.77 42.086 601.332 41.758 601.332 40.883 cv
cp
f
611.34 37.789 mo
611.027 37.648 610.637 37.555 610.23 37.555 cv
608.934 37.555 607.996 38.398 607.996 39.742 cv
607.996 40.867 li
607.996 42.43 608.98 43.133 610.34 43.133 cv
611.012 43.133 611.809 42.992 612.418 42.758 cv
612.496 42.727 612.527 42.68 612.527 42.586 cv
612.527 35.805 li
612.527 35.711 612.48 35.664 612.387 35.664 cv
611.496 35.664 li
611.387 35.664 611.34 35.711 611.34 35.805 cv
cp
609.199 40.883 mo
609.199 39.742 li
609.199 38.961 609.621 38.617 610.355 38.617 cv
610.762 38.617 611.09 38.727 611.34 38.883 cv
611.34 41.945 li
611.09 42.023 610.73 42.086 610.371 42.086 cv
609.637 42.086 609.199 41.758 609.199 40.883 cv
cp
f
618.145 39.664 mo
618.145 38.148 617.035 37.555 615.926 37.555 cv
614.785 37.555 613.66 38.148 613.66 39.664 cv
613.66 41.133 li
613.66 42.492 614.754 43.133 615.91 43.133 cv
616.785 43.133 617.457 42.852 618.004 42.414 cv
618.035 42.211 li
617.613 41.633 li
617.395 41.617 li
617.02 41.867 616.582 42.086 615.957 42.086 cv
615.301 42.086 614.863 41.758 614.863 41.133 cv
614.863 40.852 li
617.988 40.852 li
618.098 40.852 618.145 40.805 618.145 40.711 cv
cp
616.973 39.648 mo
616.973 39.93 li
614.863 39.93 li
614.863 39.648 li
614.863 38.898 615.316 38.602 615.926 38.602 cv
616.504 38.602 616.973 38.898 616.973 39.648 cv
cp
f
626.598 42.383 mo
626.629 42.164 li
626.145 41.461 li
626.098 41.367 626.02 41.367 625.941 41.43 cv
625.457 41.773 624.816 41.961 624.223 41.961 cv
623.238 41.961 622.645 41.414 622.645 40.477 cv
622.645 38.18 li
622.645 37.258 623.223 36.711 624.223 36.711 cv
624.738 36.711 625.285 36.852 625.754 37.164 cv
625.848 37.227 625.91 37.227 625.973 37.133 cv
626.457 36.43 li
626.426 36.227 li
625.801 35.789 625.004 35.539 624.223 35.539 cv
622.723 35.539 621.395 36.352 621.395 38.164 cv
621.395 40.508 li
621.395 42.32 622.707 43.133 624.238 43.133 cv
625.098 43.133 625.957 42.883 626.598 42.383 cv
cp
f
628.59 43.008 mo
628.668 43.008 628.73 42.961 628.73 42.852 cv
628.73 37.82 li
628.73 37.727 628.668 37.68 628.59 37.68 cv
627.684 37.68 li
627.59 37.68 627.527 37.727 627.527 37.82 cv
627.527 42.852 li
627.527 42.961 627.59 43.008 627.684 43.008 cv
cp
628.809 36.289 mo
628.809 35.898 628.527 35.617 628.137 35.617 cv
627.762 35.617 627.465 35.898 627.465 36.289 cv
627.465 36.664 627.762 36.961 628.137 36.961 cv
628.527 36.961 628.809 36.664 628.809 36.289 cv
cp
f
634.344 39.664 mo
634.344 38.148 633.234 37.555 632.125 37.555 cv
630.984 37.555 629.859 38.148 629.859 39.664 cv
629.859 41.133 li
629.859 42.492 630.953 43.133 632.109 43.133 cv
632.984 43.133 633.656 42.852 634.203 42.414 cv
634.234 42.211 li
633.812 41.633 li
633.594 41.617 li
633.219 41.867 632.781 42.086 632.156 42.086 cv
631.5 42.086 631.062 41.758 631.062 41.133 cv
631.062 40.852 li
634.188 40.852 li
634.297 40.852 634.344 40.805 634.344 40.711 cv
cp
633.172 39.648 mo
633.172 39.93 li
631.062 39.93 li
631.062 39.648 li
631.062 38.898 631.516 38.602 632.125 38.602 cv
632.703 38.602 633.172 38.898 633.172 39.648 cv
cp
f
636.438 43.008 mo
636.547 43.008 636.594 42.961 636.594 42.852 cv
636.594 38.742 li
636.828 38.68 637.219 38.633 637.562 38.633 cv
638.312 38.633 638.75 38.914 638.75 39.883 cv
638.75 42.852 li
638.75 42.961 638.812 43.008 638.906 43.008 cv
639.797 43.008 li
639.891 43.008 639.953 42.961 639.953 42.852 cv
639.953 39.867 li
639.953 38.211 638.984 37.555 637.562 37.555 cv
636.828 37.555 636.109 37.695 635.516 37.961 cv
635.438 38.008 635.406 38.055 635.406 38.148 cv
635.406 42.852 li
635.406 42.961 635.453 43.008 635.562 43.008 cv
cp
f
645.141 42.555 mo
645.172 42.352 li
644.734 41.727 li
644.688 41.633 644.625 41.633 644.531 41.695 cv
644.141 41.945 643.719 42.055 643.328 42.055 cv
642.625 42.055 642.219 41.695 642.219 41.07 cv
642.219 39.633 li
642.219 38.992 642.609 38.633 643.344 38.633 cv
643.719 38.633 644.109 38.742 644.422 38.93 cv
644.516 38.977 644.594 38.961 644.641 38.883 cv
645.047 38.273 li
645.094 38.18 645.078 38.102 645 38.055 cv
644.469 37.727 643.906 37.555 643.312 37.555 cv
641.891 37.555 641.016 38.367 641.016 39.633 cv
641.016 41.055 li
641.016 42.305 641.891 43.133 643.328 43.133 cv
644.047 43.133 644.625 42.93 645.141 42.555 cv
cp
f
647.105 43.008 mo
647.184 43.008 647.246 42.961 647.246 42.852 cv
647.246 37.82 li
647.246 37.727 647.184 37.68 647.105 37.68 cv
646.199 37.68 li
646.105 37.68 646.043 37.727 646.043 37.82 cv
646.043 42.852 li
646.043 42.961 646.105 43.008 646.199 43.008 cv
cp
647.324 36.289 mo
647.324 35.898 647.043 35.617 646.652 35.617 cv
646.277 35.617 645.98 35.898 645.98 36.289 cv
645.98 36.664 646.277 36.961 646.652 36.961 cv
647.043 36.961 647.324 36.664 647.324 36.289 cv
cp
f
648.5 38.102 mo
648.5 38.273 li
648.906 38.898 li
648.953 38.992 649.047 38.992 649.109 38.945 cv
649.438 38.758 649.922 38.617 650.438 38.617 cv
651.188 38.617 651.453 38.93 651.453 39.648 cv
651.453 39.852 li
651.156 39.805 650.766 39.773 650.438 39.773 cv
649.109 39.773 648.172 40.289 648.172 41.414 cv
648.172 42.695 649.281 43.133 650.469 43.133 cv
651.234 43.133 652 42.992 652.531 42.82 cv
652.656 42.648 li
652.656 39.648 li
652.656 38.195 651.781 37.555 650.516 37.555 cv
649.672 37.555 648.984 37.758 648.5 38.102 cv
cp
649.375 41.398 mo
649.375 40.977 649.688 40.727 650.469 40.727 cv
650.781 40.727 651.188 40.773 651.453 40.805 cv
651.453 41.977 li
651.203 42.023 650.812 42.086 650.469 42.086 cv
649.844 42.086 649.375 41.883 649.375 41.398 cv
cp
f
657.895 41.43 mo
657.895 40.242 656.832 39.977 655.988 39.82 cv
655.301 39.68 654.848 39.586 654.848 39.164 cv
654.848 38.82 655.176 38.602 655.785 38.602 cv
656.238 38.602 656.707 38.727 657.082 38.93 cv
657.285 38.883 li
657.676 38.227 li
657.629 38.023 li
657.02 37.695 656.426 37.555 655.832 37.555 cv
654.738 37.555 653.66 38.023 653.66 39.164 cv
653.66 40.414 654.973 40.727 655.738 40.867 cv
656.207 40.945 656.691 41.07 656.691 41.477 cv
656.691 41.867 656.27 42.07 655.738 42.07 cv
655.207 42.07 654.645 41.883 654.191 41.555 cv
654.098 41.492 654.035 41.492 653.973 41.586 cv
653.582 42.258 li
653.535 42.336 653.535 42.414 653.629 42.461 cv
654.27 42.93 655.02 43.133 655.723 43.133 cv
656.957 43.133 657.895 42.57 657.895 41.43 cv
cp
f
662.531 39.836 mo
665.406 39.836 li
665.516 39.836 665.562 39.789 665.562 39.68 cv
665.562 38.867 li
665.562 38.758 665.516 38.711 665.406 38.711 cv
662.531 38.711 li
662.531 36.789 li
665.688 36.789 li
665.781 36.789 665.828 36.742 665.828 36.648 cv
665.828 35.805 li
665.828 35.711 665.781 35.664 665.688 35.664 cv
661.422 35.664 li
661.328 35.664 661.281 35.711 661.281 35.805 cv
661.281 42.852 li
661.281 42.961 661.328 43.008 661.422 43.008 cv
665.828 43.008 li
665.922 43.008 665.984 42.961 665.984 42.852 cv
665.984 42.023 li
665.984 41.93 665.922 41.883 665.828 41.883 cv
662.531 41.883 li
cp
f
669.793 40.336 mo
671.355 37.852 li
671.418 37.758 671.355 37.68 671.246 37.68 cv
670.215 37.68 li
670.121 37.68 670.059 37.727 670.027 37.789 cv
669.043 39.508 li
668.074 37.789 li
667.887 37.68 li
666.84 37.68 li
666.73 37.68 666.684 37.758 666.746 37.852 cv
668.309 40.336 li
666.652 42.82 li
666.59 42.93 666.637 43.008 666.746 43.008 cv
667.84 43.008 li
668.012 42.898 li
669.043 41.164 li
670.074 42.898 li
670.262 43.008 li
671.355 43.008 li
671.465 43.008 671.496 42.93 671.434 42.82 cv
cp
f
672.105 38.102 mo
672.105 38.273 li
672.512 38.898 li
672.559 38.992 672.652 38.992 672.715 38.945 cv
673.043 38.758 673.527 38.617 674.043 38.617 cv
674.793 38.617 675.059 38.93 675.059 39.648 cv
675.059 39.852 li
674.762 39.805 674.371 39.773 674.043 39.773 cv
672.715 39.773 671.777 40.289 671.777 41.414 cv
671.777 42.695 672.887 43.133 674.074 43.133 cv
674.84 43.133 675.605 42.992 676.137 42.82 cv
676.262 42.648 li
676.262 39.648 li
676.262 38.195 675.387 37.555 674.121 37.555 cv
673.277 37.555 672.59 37.758 672.105 38.102 cv
cp
672.98 41.398 mo
672.98 40.977 673.293 40.727 674.074 40.727 cv
674.387 40.727 674.793 40.773 675.059 40.805 cv
675.059 41.977 li
674.809 42.023 674.418 42.086 674.074 42.086 cv
673.449 42.086 672.98 41.883 672.98 41.398 cv
cp
f
681.438 42.555 mo
681.469 42.352 li
681.031 41.727 li
680.984 41.633 680.922 41.633 680.828 41.695 cv
680.438 41.945 680.016 42.055 679.625 42.055 cv
678.922 42.055 678.516 41.695 678.516 41.07 cv
678.516 39.633 li
678.516 38.992 678.906 38.633 679.641 38.633 cv
680.016 38.633 680.406 38.742 680.719 38.93 cv
680.812 38.977 680.891 38.961 680.938 38.883 cv
681.344 38.273 li
681.391 38.18 681.375 38.102 681.297 38.055 cv
680.766 37.727 680.203 37.555 679.609 37.555 cv
678.188 37.555 677.312 38.367 677.312 39.633 cv
677.312 41.055 li
677.312 42.305 678.188 43.133 679.625 43.133 cv
680.344 43.133 680.922 42.93 681.438 42.555 cv
cp
f
683.512 41.148 mo
683.512 38.789 li
684.605 38.789 li
684.684 38.789 684.746 38.742 684.746 38.648 cv
684.746 37.898 li
684.746 37.805 684.684 37.758 684.605 37.758 cv
683.496 37.758 li
683.402 36.523 li
683.402 36.445 683.34 36.383 683.246 36.383 cv
682.465 36.383 li
682.371 36.383 682.309 36.445 682.309 36.523 cv
682.309 41.227 li
682.309 42.586 683.152 43.133 684.215 43.133 cv
684.371 43.133 684.59 43.117 684.762 43.117 cv
684.871 43.102 684.902 43.023 684.902 42.945 cv
684.902 42.164 li
684.902 42.07 684.84 42.023 684.746 42.023 cv
684.574 42.023 684.418 42.039 684.324 42.039 cv
683.793 42.039 683.512 41.711 683.512 41.148 cv
cp
f
685.734 38.102 mo
685.734 38.273 li
686.141 38.898 li
686.188 38.992 686.281 38.992 686.344 38.945 cv
686.672 38.758 687.156 38.617 687.672 38.617 cv
688.422 38.617 688.688 38.93 688.688 39.648 cv
688.688 39.852 li
688.391 39.805 688 39.773 687.672 39.773 cv
686.344 39.773 685.406 40.289 685.406 41.414 cv
685.406 42.695 686.516 43.133 687.703 43.133 cv
688.469 43.133 689.234 42.992 689.766 42.82 cv
689.891 42.648 li
689.891 39.648 li
689.891 38.195 689.016 37.555 687.75 37.555 cv
686.906 37.555 686.219 37.758 685.734 38.102 cv
cp
686.609 41.398 mo
686.609 40.977 686.922 40.727 687.703 40.727 cv
688.016 40.727 688.422 40.773 688.688 40.805 cv
688.688 41.977 li
688.438 42.023 688.047 42.086 687.703 42.086 cv
687.078 42.086 686.609 41.883 686.609 41.398 cv
cp
f
695.129 41.43 mo
695.129 40.242 694.066 39.977 693.223 39.82 cv
692.535 39.68 692.082 39.586 692.082 39.164 cv
692.082 38.82 692.41 38.602 693.02 38.602 cv
693.473 38.602 693.941 38.727 694.316 38.93 cv
694.52 38.883 li
694.91 38.227 li
694.863 38.023 li
694.254 37.695 693.66 37.555 693.066 37.555 cv
691.973 37.555 690.895 38.023 690.895 39.164 cv
690.895 40.414 692.207 40.727 692.973 40.867 cv
693.441 40.945 693.926 41.07 693.926 41.477 cv
693.926 41.867 693.504 42.07 692.973 42.07 cv
692.441 42.07 691.879 41.883 691.426 41.555 cv
691.332 41.492 691.27 41.492 691.207 41.586 cv
690.816 42.258 li
690.77 42.336 690.77 42.414 690.863 42.461 cv
691.504 42.93 692.254 43.133 692.957 43.133 cv
694.191 43.133 695.129 42.57 695.129 41.43 cv
cp
f
701.566 41.57 mo
701.332 41.695 700.988 41.789 700.645 41.773 cv
700.02 41.773 699.457 41.492 699.457 40.711 cv
699.457 37.82 li
699.457 37.727 699.41 37.68 699.316 37.68 cv
698.426 37.68 li
698.332 37.68 698.27 37.727 698.27 37.82 cv
698.27 40.758 li
698.27 42.18 699.41 42.852 700.473 42.852 cv
700.848 42.852 701.238 42.773 701.566 42.664 cv
701.613 43.695 701.16 44.008 700.457 44.008 cv
699.895 44.008 699.441 43.805 699.051 43.539 cv
698.863 43.586 li
698.41 44.211 li
698.441 44.414 li
698.988 44.852 699.582 45.07 700.457 45.07 cv
702.035 45.07 702.754 44.258 702.754 42.664 cv
702.754 37.82 li
702.754 37.727 702.707 37.68 702.598 37.68 cv
701.723 37.68 li
701.613 37.68 701.566 37.727 701.566 37.82 cv
cp
f
707.559 43.008 mo
707.652 43.008 707.699 42.961 707.699 42.852 cv
707.699 40.492 li
707.699 39.633 707.668 38.555 707.605 37.664 cv
707.637 37.664 li
707.934 38.273 708.355 39.07 708.746 39.68 cv
710.684 42.898 li
710.855 43.008 li
711.902 43.008 li
711.996 43.008 712.059 42.961 712.059 42.852 cv
712.059 35.805 li
712.059 35.711 711.996 35.664 711.902 35.664 cv
710.98 35.664 li
710.871 35.664 710.824 35.711 710.824 35.805 cv
710.824 38.32 li
710.824 39.18 710.855 40.227 710.918 41.102 cv
710.887 41.117 li
710.59 40.555 710.199 39.867 709.855 39.258 cv
707.84 35.758 li
707.668 35.664 li
706.621 35.664 li
706.527 35.664 706.48 35.711 706.48 35.805 cv
706.48 42.852 li
706.48 42.961 706.527 43.008 706.621 43.008 cv
cp
f
713.508 38.102 mo
713.508 38.273 li
713.914 38.898 li
713.961 38.992 714.055 38.992 714.117 38.945 cv
714.445 38.758 714.93 38.617 715.445 38.617 cv
716.195 38.617 716.461 38.93 716.461 39.648 cv
716.461 39.852 li
716.164 39.805 715.773 39.773 715.445 39.773 cv
714.117 39.773 713.18 40.289 713.18 41.414 cv
713.18 42.695 714.289 43.133 715.477 43.133 cv
716.242 43.133 717.008 42.992 717.539 42.82 cv
717.664 42.648 li
717.664 39.648 li
717.664 38.195 716.789 37.555 715.523 37.555 cv
714.68 37.555 713.992 37.758 713.508 38.102 cv
cp
714.383 41.398 mo
714.383 40.977 714.695 40.727 715.477 40.727 cv
715.789 40.727 716.195 40.773 716.461 40.805 cv
716.461 41.977 li
716.211 42.023 715.82 42.086 715.477 42.086 cv
714.852 42.086 714.383 41.883 714.383 41.398 cv
cp
f
720.059 41.148 mo
720.059 38.789 li
721.152 38.789 li
721.23 38.789 721.293 38.742 721.293 38.648 cv
721.293 37.898 li
721.293 37.805 721.23 37.758 721.152 37.758 cv
720.043 37.758 li
719.949 36.523 li
719.949 36.445 719.887 36.383 719.793 36.383 cv
719.012 36.383 li
718.918 36.383 718.855 36.445 718.855 36.523 cv
718.855 41.227 li
718.855 42.586 719.699 43.133 720.762 43.133 cv
720.918 43.133 721.137 43.117 721.309 43.117 cv
721.418 43.102 721.449 43.023 721.449 42.945 cv
721.449 42.164 li
721.449 42.07 721.387 42.023 721.293 42.023 cv
721.121 42.023 720.965 42.039 720.871 42.039 cv
720.34 42.039 720.059 41.711 720.059 41.148 cv
cp
f
725.703 37.68 mo
725.609 37.68 725.562 37.727 725.562 37.82 cv
725.562 41.945 li
725.328 42.023 724.969 42.055 724.625 42.055 cv
723.891 42.055 723.453 41.758 723.453 40.805 cv
723.453 37.82 li
723.453 37.727 723.406 37.68 723.312 37.68 cv
722.422 37.68 li
722.312 37.68 722.266 37.727 722.266 37.82 cv
722.266 40.82 li
722.266 42.461 723.219 43.133 724.625 43.133 cv
725.344 43.133 726.047 42.977 726.641 42.727 cv
726.703 42.695 726.75 42.633 726.75 42.539 cv
726.75 37.82 li
726.75 37.727 726.688 37.68 726.594 37.68 cv
cp
f
729.062 43.008 mo
729.172 43.008 729.219 42.961 729.219 42.852 cv
729.219 38.758 li
729.422 38.68 729.75 38.617 730.125 38.617 cv
730.406 38.617 730.703 38.617 730.953 38.664 cv
731.062 38.68 731.125 38.633 731.125 38.539 cv
731.125 37.789 li
731.125 37.711 731.078 37.648 730.984 37.648 cv
730.594 37.586 730.266 37.555 729.938 37.555 cv
729.312 37.555 728.672 37.695 728.141 37.945 cv
728.031 38.117 li
728.031 42.852 li
728.031 42.961 728.078 43.008 728.188 43.008 cv
cp
f
731.773 38.102 mo
731.773 38.273 li
732.18 38.898 li
732.227 38.992 732.32 38.992 732.383 38.945 cv
732.711 38.758 733.195 38.617 733.711 38.617 cv
734.461 38.617 734.727 38.93 734.727 39.648 cv
734.727 39.852 li
734.43 39.805 734.039 39.773 733.711 39.773 cv
732.383 39.773 731.445 40.289 731.445 41.414 cv
731.445 42.695 732.555 43.133 733.742 43.133 cv
734.508 43.133 735.273 42.992 735.805 42.82 cv
735.93 42.648 li
735.93 39.648 li
735.93 38.195 735.055 37.555 733.789 37.555 cv
732.945 37.555 732.258 37.758 731.773 38.102 cv
cp
732.648 41.398 mo
732.648 40.977 732.961 40.727 733.742 40.727 cv
734.055 40.727 734.461 40.773 734.727 40.805 cv
734.727 41.977 li
734.477 42.023 734.086 42.086 733.742 42.086 cv
733.117 42.086 732.648 41.883 732.648 41.398 cv
cp
f
739.438 43.102 mo
739.516 43.086 739.547 43.023 739.547 42.93 cv
739.547 42.18 li
739.547 42.07 739.5 42.023 739.391 42.023 cv
739.266 42.023 739.125 42.039 739 42.039 cv
738.547 42.039 738.328 41.773 738.328 41.102 cv
738.328 35.805 li
738.328 35.711 738.281 35.664 738.172 35.664 cv
737.281 35.664 li
737.188 35.664 737.125 35.711 737.125 35.805 cv
737.125 41.133 li
737.125 42.398 737.734 43.133 738.844 43.133 cv
739.062 43.133 739.266 43.117 739.438 43.102 cv
cp
f
744.598 39.664 mo
744.598 38.148 743.488 37.555 742.379 37.555 cv
741.238 37.555 740.113 38.148 740.113 39.664 cv
740.113 41.133 li
740.113 42.492 741.207 43.133 742.363 43.133 cv
743.238 43.133 743.91 42.852 744.457 42.414 cv
744.488 42.211 li
744.066 41.633 li
743.848 41.617 li
743.473 41.867 743.035 42.086 742.41 42.086 cv
741.754 42.086 741.316 41.758 741.316 41.133 cv
741.316 40.852 li
744.441 40.852 li
744.551 40.852 744.598 40.805 744.598 40.711 cv
cp
743.426 39.648 mo
743.426 39.93 li
741.316 39.93 li
741.316 39.648 li
741.316 38.898 741.77 38.602 742.379 38.602 cv
742.957 38.602 743.426 38.898 743.426 39.648 cv
cp
f
749.676 41.43 mo
749.676 40.242 748.613 39.977 747.77 39.82 cv
747.082 39.68 746.629 39.586 746.629 39.164 cv
746.629 38.82 746.957 38.602 747.566 38.602 cv
748.02 38.602 748.488 38.727 748.863 38.93 cv
749.066 38.883 li
749.457 38.227 li
749.41 38.023 li
748.801 37.695 748.207 37.555 747.613 37.555 cv
746.52 37.555 745.441 38.023 745.441 39.164 cv
745.441 40.414 746.754 40.727 747.52 40.867 cv
747.988 40.945 748.473 41.07 748.473 41.477 cv
748.473 41.867 748.051 42.07 747.52 42.07 cv
746.988 42.07 746.426 41.883 745.973 41.555 cv
745.879 41.492 745.816 41.492 745.754 41.586 cv
745.363 42.258 li
745.316 42.336 745.316 42.414 745.41 42.461 cv
746.051 42.93 746.801 43.133 747.504 43.133 cv
748.738 43.133 749.676 42.57 749.676 41.43 cv
cp
f
567.48 53.078 mo
570.355 53.078 li
570.465 53.078 570.512 53.031 570.512 52.922 cv
570.512 52.109 li
570.512 52 570.465 51.953 570.355 51.953 cv
567.48 51.953 li
567.48 50.031 li
570.637 50.031 li
570.73 50.031 570.777 49.984 570.777 49.891 cv
570.777 49.047 li
570.777 48.953 570.73 48.906 570.637 48.906 cv
566.371 48.906 li
566.277 48.906 566.23 48.953 566.23 49.047 cv
566.23 56.094 li
566.23 56.203 566.277 56.25 566.371 56.25 cv
570.777 56.25 li
570.871 56.25 570.934 56.203 570.934 56.094 cv
570.934 55.266 li
570.934 55.172 570.871 55.125 570.777 55.125 cv
567.48 55.125 li
cp
f
576.07 54.672 mo
576.07 53.484 575.008 53.219 574.164 53.062 cv
573.477 52.922 573.023 52.828 573.023 52.406 cv
573.023 52.062 573.352 51.844 573.961 51.844 cv
574.414 51.844 574.883 51.969 575.258 52.172 cv
575.461 52.125 li
575.852 51.469 li
575.805 51.266 li
575.195 50.938 574.602 50.797 574.008 50.797 cv
572.914 50.797 571.836 51.266 571.836 52.406 cv
571.836 53.656 573.148 53.969 573.914 54.109 cv
574.383 54.188 574.867 54.312 574.867 54.719 cv
574.867 55.109 574.445 55.312 573.914 55.312 cv
573.383 55.312 572.82 55.125 572.367 54.797 cv
572.273 54.734 572.211 54.734 572.148 54.828 cv
571.758 55.5 li
571.711 55.578 571.711 55.656 571.805 55.703 cv
572.445 56.172 573.195 56.375 573.898 56.375 cv
575.133 56.375 576.07 55.812 576.07 54.672 cv
cp
f
580.984 55.797 mo
581.016 55.594 li
580.578 54.969 li
580.531 54.875 580.469 54.875 580.375 54.938 cv
579.984 55.188 579.562 55.297 579.172 55.297 cv
578.469 55.297 578.062 54.938 578.062 54.312 cv
578.062 52.875 li
578.062 52.234 578.453 51.875 579.188 51.875 cv
579.562 51.875 579.953 51.984 580.266 52.172 cv
580.359 52.219 580.438 52.203 580.484 52.125 cv
580.891 51.516 li
580.938 51.422 580.922 51.344 580.844 51.297 cv
580.312 50.969 579.75 50.797 579.156 50.797 cv
577.734 50.797 576.859 51.609 576.859 52.875 cv
576.859 54.297 li
576.859 55.547 577.734 56.375 579.172 56.375 cv
579.891 56.375 580.469 56.172 580.984 55.797 cv
cp
f
585.277 50.922 mo
585.184 50.922 585.137 50.969 585.137 51.062 cv
585.137 55.188 li
584.902 55.266 584.543 55.297 584.199 55.297 cv
583.465 55.297 583.027 55 583.027 54.047 cv
583.027 51.062 li
583.027 50.969 582.98 50.922 582.887 50.922 cv
581.996 50.922 li
581.887 50.922 581.84 50.969 581.84 51.062 cv
581.84 54.062 li
581.84 55.703 582.793 56.375 584.199 56.375 cv
584.918 56.375 585.621 56.219 586.215 55.969 cv
586.277 55.938 586.324 55.875 586.324 55.781 cv
586.324 51.062 li
586.324 50.969 586.262 50.922 586.168 50.922 cv
cp
f
591.934 52.906 mo
591.934 51.391 590.824 50.797 589.715 50.797 cv
588.574 50.797 587.449 51.391 587.449 52.906 cv
587.449 54.375 li
587.449 55.734 588.543 56.375 589.699 56.375 cv
590.574 56.375 591.246 56.094 591.793 55.656 cv
591.824 55.453 li
591.402 54.875 li
591.184 54.859 li
590.809 55.109 590.371 55.328 589.746 55.328 cv
589.09 55.328 588.652 55 588.652 54.375 cv
588.652 54.094 li
591.777 54.094 li
591.887 54.094 591.934 54.047 591.934 53.953 cv
cp
590.762 52.891 mo
590.762 53.172 li
588.652 53.172 li
588.652 52.891 li
588.652 52.141 589.105 51.844 589.715 51.844 cv
590.293 51.844 590.762 52.141 590.762 52.891 cv
cp
f
595.277 56.344 mo
595.355 56.328 595.387 56.266 595.387 56.172 cv
595.387 55.422 li
595.387 55.312 595.34 55.266 595.23 55.266 cv
595.105 55.266 594.965 55.281 594.84 55.281 cv
594.387 55.281 594.168 55.016 594.168 54.344 cv
594.168 49.047 li
594.168 48.953 594.121 48.906 594.012 48.906 cv
593.121 48.906 li
593.027 48.906 592.965 48.953 592.965 49.047 cv
592.965 54.375 li
592.965 55.641 593.574 56.375 594.684 56.375 cv
594.902 56.375 595.105 56.359 595.277 56.344 cv
cp
f
596.082 51.344 mo
596.082 51.516 li
596.488 52.141 li
596.535 52.234 596.629 52.234 596.691 52.188 cv
597.02 52 597.504 51.859 598.02 51.859 cv
598.77 51.859 599.035 52.172 599.035 52.891 cv
599.035 53.094 li
598.738 53.047 598.348 53.016 598.02 53.016 cv
596.691 53.016 595.754 53.531 595.754 54.656 cv
595.754 55.938 596.863 56.375 598.051 56.375 cv
598.816 56.375 599.582 56.234 600.113 56.062 cv
600.238 55.891 li
600.238 52.891 li
600.238 51.438 599.363 50.797 598.098 50.797 cv
597.254 50.797 596.566 51 596.082 51.344 cv
cp
596.957 54.641 mo
596.957 54.219 597.27 53.969 598.051 53.969 cv
598.363 53.969 598.77 54.016 599.035 54.047 cv
599.035 55.219 li
598.785 55.266 598.395 55.328 598.051 55.328 cv
597.426 55.328 596.957 55.125 596.957 54.641 cv
cp
f
606.855 51.031 mo
606.543 50.891 606.152 50.797 605.746 50.797 cv
604.449 50.797 603.512 51.641 603.512 52.984 cv
603.512 54.109 li
603.512 55.672 604.496 56.375 605.855 56.375 cv
606.527 56.375 607.324 56.234 607.934 56 cv
608.012 55.969 608.043 55.922 608.043 55.828 cv
608.043 49.047 li
608.043 48.953 607.996 48.906 607.902 48.906 cv
607.012 48.906 li
606.902 48.906 606.855 48.953 606.855 49.047 cv
cp
604.715 54.125 mo
604.715 52.984 li
604.715 52.203 605.137 51.859 605.871 51.859 cv
606.277 51.859 606.605 51.969 606.855 52.125 cv
606.855 55.188 li
606.605 55.266 606.246 55.328 605.887 55.328 cv
605.152 55.328 604.715 55 604.715 54.125 cv
cp
f
613.66 52.906 mo
613.66 51.391 612.551 50.797 611.441 50.797 cv
610.301 50.797 609.176 51.391 609.176 52.906 cv
609.176 54.375 li
609.176 55.734 610.27 56.375 611.426 56.375 cv
612.301 56.375 612.973 56.094 613.52 55.656 cv
613.551 55.453 li
613.129 54.875 li
612.91 54.859 li
612.535 55.109 612.098 55.328 611.473 55.328 cv
610.816 55.328 610.379 55 610.379 54.375 cv
610.379 54.094 li
613.504 54.094 li
613.613 54.094 613.66 54.047 613.66 53.953 cv
cp
612.488 52.891 mo
612.488 53.172 li
610.379 53.172 li
610.379 52.891 li
610.379 52.141 610.832 51.844 611.441 51.844 cv
612.02 51.844 612.488 52.141 612.488 52.891 cv
cp
f
622.113 55.625 mo
622.145 55.406 li
621.66 54.703 li
621.613 54.609 621.535 54.609 621.457 54.672 cv
620.973 55.016 620.332 55.203 619.738 55.203 cv
618.754 55.203 618.16 54.656 618.16 53.719 cv
618.16 51.422 li
618.16 50.5 618.738 49.953 619.738 49.953 cv
620.254 49.953 620.801 50.094 621.27 50.406 cv
621.363 50.469 621.426 50.469 621.488 50.375 cv
621.973 49.672 li
621.941 49.469 li
621.316 49.031 620.52 48.781 619.738 48.781 cv
618.238 48.781 616.91 49.594 616.91 51.406 cv
616.91 53.75 li
616.91 55.562 618.223 56.375 619.754 56.375 cv
620.613 56.375 621.473 56.125 622.113 55.625 cv
cp
f
624.105 56.25 mo
624.184 56.25 624.246 56.203 624.246 56.094 cv
624.246 51.062 li
624.246 50.969 624.184 50.922 624.105 50.922 cv
623.199 50.922 li
623.105 50.922 623.043 50.969 623.043 51.062 cv
623.043 56.094 li
623.043 56.203 623.105 56.25 623.199 56.25 cv
cp
624.324 49.531 mo
624.324 49.141 624.043 48.859 623.652 48.859 cv
623.277 48.859 622.98 49.141 622.98 49.531 cv
622.98 49.906 623.277 50.203 623.652 50.203 cv
624.043 50.203 624.324 49.906 624.324 49.531 cv
cp
f
629.859 52.906 mo
629.859 51.391 628.75 50.797 627.641 50.797 cv
626.5 50.797 625.375 51.391 625.375 52.906 cv
625.375 54.375 li
625.375 55.734 626.469 56.375 627.625 56.375 cv
628.5 56.375 629.172 56.094 629.719 55.656 cv
629.75 55.453 li
629.328 54.875 li
629.109 54.859 li
628.734 55.109 628.297 55.328 627.672 55.328 cv
627.016 55.328 626.578 55 626.578 54.375 cv
626.578 54.094 li
629.703 54.094 li
629.812 54.094 629.859 54.047 629.859 53.953 cv
cp
628.688 52.891 mo
628.688 53.172 li
626.578 53.172 li
626.578 52.891 li
626.578 52.141 627.031 51.844 627.641 51.844 cv
628.219 51.844 628.688 52.141 628.688 52.891 cv
cp
f
631.953 56.25 mo
632.062 56.25 632.109 56.203 632.109 56.094 cv
632.109 51.984 li
632.344 51.922 632.734 51.875 633.078 51.875 cv
633.828 51.875 634.266 52.156 634.266 53.125 cv
634.266 56.094 li
634.266 56.203 634.328 56.25 634.422 56.25 cv
635.312 56.25 li
635.406 56.25 635.469 56.203 635.469 56.094 cv
635.469 53.109 li
635.469 51.453 634.5 50.797 633.078 50.797 cv
632.344 50.797 631.625 50.938 631.031 51.203 cv
630.953 51.25 630.922 51.297 630.922 51.391 cv
630.922 56.094 li
630.922 56.203 630.969 56.25 631.078 56.25 cv
cp
f
640.656 55.797 mo
640.688 55.594 li
640.25 54.969 li
640.203 54.875 640.141 54.875 640.047 54.938 cv
639.656 55.188 639.234 55.297 638.844 55.297 cv
638.141 55.297 637.734 54.938 637.734 54.312 cv
637.734 52.875 li
637.734 52.234 638.125 51.875 638.859 51.875 cv
639.234 51.875 639.625 51.984 639.938 52.172 cv
640.031 52.219 640.109 52.203 640.156 52.125 cv
640.562 51.516 li
640.609 51.422 640.594 51.344 640.516 51.297 cv
639.984 50.969 639.422 50.797 638.828 50.797 cv
637.406 50.797 636.531 51.609 636.531 52.875 cv
636.531 54.297 li
636.531 55.547 637.406 56.375 638.844 56.375 cv
639.562 56.375 640.141 56.172 640.656 55.797 cv
cp
f
642.621 56.25 mo
642.699 56.25 642.762 56.203 642.762 56.094 cv
642.762 51.062 li
642.762 50.969 642.699 50.922 642.621 50.922 cv
641.715 50.922 li
641.621 50.922 641.559 50.969 641.559 51.062 cv
641.559 56.094 li
641.559 56.203 641.621 56.25 641.715 56.25 cv
cp
642.84 49.531 mo
642.84 49.141 642.559 48.859 642.168 48.859 cv
641.793 48.859 641.496 49.141 641.496 49.531 cv
641.496 49.906 641.793 50.203 642.168 50.203 cv
642.559 50.203 642.84 49.906 642.84 49.531 cv
cp
f
644.016 51.344 mo
644.016 51.516 li
644.422 52.141 li
644.469 52.234 644.562 52.234 644.625 52.188 cv
644.953 52 645.438 51.859 645.953 51.859 cv
646.703 51.859 646.969 52.172 646.969 52.891 cv
646.969 53.094 li
646.672 53.047 646.281 53.016 645.953 53.016 cv
644.625 53.016 643.688 53.531 643.688 54.656 cv
643.688 55.938 644.797 56.375 645.984 56.375 cv
646.75 56.375 647.516 56.234 648.047 56.062 cv
648.172 55.891 li
648.172 52.891 li
648.172 51.438 647.297 50.797 646.031 50.797 cv
645.188 50.797 644.5 51 644.016 51.344 cv
cp
644.891 54.641 mo
644.891 54.219 645.203 53.969 645.984 53.969 cv
646.297 53.969 646.703 54.016 646.969 54.047 cv
646.969 55.219 li
646.719 55.266 646.328 55.328 645.984 55.328 cv
645.359 55.328 644.891 55.125 644.891 54.641 cv
cp
f
653.41 54.672 mo
653.41 53.484 652.348 53.219 651.504 53.062 cv
650.816 52.922 650.363 52.828 650.363 52.406 cv
650.363 52.062 650.691 51.844 651.301 51.844 cv
651.754 51.844 652.223 51.969 652.598 52.172 cv
652.801 52.125 li
653.191 51.469 li
653.145 51.266 li
652.535 50.938 651.941 50.797 651.348 50.797 cv
650.254 50.797 649.176 51.266 649.176 52.406 cv
649.176 53.656 650.488 53.969 651.254 54.109 cv
651.723 54.188 652.207 54.312 652.207 54.719 cv
652.207 55.109 651.785 55.312 651.254 55.312 cv
650.723 55.312 650.16 55.125 649.707 54.797 cv
649.613 54.734 649.551 54.734 649.488 54.828 cv
649.098 55.5 li
649.051 55.578 649.051 55.656 649.145 55.703 cv
649.785 56.172 650.535 56.375 651.238 56.375 cv
652.473 56.375 653.41 55.812 653.41 54.672 cv
cp
f
661.469 49.047 mo
661.469 48.953 661.406 48.906 661.312 48.906 cv
656.938 48.906 li
656.844 48.906 656.797 48.953 656.797 49.047 cv
656.797 56.094 li
656.797 56.203 656.844 56.25 656.938 56.25 cv
657.891 56.25 li
657.984 56.25 658.031 56.203 658.031 56.094 cv
658.031 53.312 li
660.875 53.312 li
660.969 53.312 661.016 53.266 661.016 53.156 cv
661.016 52.328 li
661.016 52.234 660.969 52.172 660.875 52.172 cv
658.031 52.172 li
658.031 50.047 li
661.312 50.047 li
661.406 50.047 661.469 49.984 661.469 49.891 cv
cp
f
663.453 56.25 mo
663.547 56.25 663.609 56.203 663.609 56.094 cv
663.609 51.062 li
663.609 50.969 663.547 50.922 663.453 50.922 cv
662.562 50.922 li
662.469 50.922 662.406 50.969 662.406 51.062 cv
662.406 56.094 li
662.406 56.203 662.469 56.25 662.562 56.25 cv
cp
663.078 50.172 mo
663.266 50.078 li
664.297 48.719 li
664.375 48.625 664.344 48.531 664.219 48.531 cv
663.312 48.531 li
663.125 48.641 li
662.297 49.984 li
662.234 50.094 662.281 50.172 662.406 50.172 cv
cp
f
668.91 54.672 mo
668.91 53.484 667.848 53.219 667.004 53.062 cv
666.316 52.922 665.863 52.828 665.863 52.406 cv
665.863 52.062 666.191 51.844 666.801 51.844 cv
667.254 51.844 667.723 51.969 668.098 52.172 cv
668.301 52.125 li
668.691 51.469 li
668.645 51.266 li
668.035 50.938 667.441 50.797 666.848 50.797 cv
665.754 50.797 664.676 51.266 664.676 52.406 cv
664.676 53.656 665.988 53.969 666.754 54.109 cv
667.223 54.188 667.707 54.312 667.707 54.719 cv
667.707 55.109 667.285 55.312 666.754 55.312 cv
666.223 55.312 665.66 55.125 665.207 54.797 cv
665.113 54.734 665.051 54.734 664.988 54.828 cv
664.598 55.5 li
664.551 55.578 664.551 55.656 664.645 55.703 cv
665.285 56.172 666.035 56.375 666.738 56.375 cv
667.973 56.375 668.91 55.812 668.91 54.672 cv
cp
f
670.938 56.25 mo
671.016 56.25 671.078 56.203 671.078 56.094 cv
671.078 51.062 li
671.078 50.969 671.016 50.922 670.938 50.922 cv
670.031 50.922 li
669.938 50.922 669.875 50.969 669.875 51.062 cv
669.875 56.094 li
669.875 56.203 669.938 56.25 670.031 56.25 cv
cp
671.156 49.531 mo
671.156 49.141 670.875 48.859 670.484 48.859 cv
670.109 48.859 669.812 49.141 669.812 49.531 cv
669.812 49.906 670.109 50.203 670.484 50.203 cv
670.875 50.203 671.156 49.906 671.156 49.531 cv
cp
f
676.316 55.797 mo
676.348 55.594 li
675.91 54.969 li
675.863 54.875 675.801 54.875 675.707 54.938 cv
675.316 55.188 674.895 55.297 674.504 55.297 cv
673.801 55.297 673.395 54.938 673.395 54.312 cv
673.395 52.875 li
673.395 52.234 673.785 51.875 674.52 51.875 cv
674.895 51.875 675.285 51.984 675.598 52.172 cv
675.691 52.219 675.77 52.203 675.816 52.125 cv
676.223 51.516 li
676.27 51.422 676.254 51.344 676.176 51.297 cv
675.645 50.969 675.082 50.797 674.488 50.797 cv
673.066 50.797 672.191 51.609 672.191 52.875 cv
672.191 54.297 li
672.191 55.547 673.066 56.375 674.504 56.375 cv
675.223 56.375 675.801 56.172 676.316 55.797 cv
cp
f
677.188 51.344 mo
677.188 51.516 li
677.594 52.141 li
677.641 52.234 677.734 52.234 677.797 52.188 cv
678.125 52 678.609 51.859 679.125 51.859 cv
679.875 51.859 680.141 52.172 680.141 52.891 cv
680.141 53.094 li
679.844 53.047 679.453 53.016 679.125 53.016 cv
677.797 53.016 676.859 53.531 676.859 54.656 cv
676.859 55.938 677.969 56.375 679.156 56.375 cv
679.922 56.375 680.688 56.234 681.219 56.062 cv
681.344 55.891 li
681.344 52.891 li
681.344 51.438 680.469 50.797 679.203 50.797 cv
678.359 50.797 677.672 51 677.188 51.344 cv
cp
678.062 54.641 mo
678.062 54.219 678.375 53.969 679.156 53.969 cv
679.469 53.969 679.875 54.016 680.141 54.047 cv
680.141 55.219 li
679.891 55.266 679.5 55.328 679.156 55.328 cv
678.531 55.328 678.062 55.125 678.062 54.641 cv
cp
f
686.582 54.672 mo
686.582 53.484 685.52 53.219 684.676 53.062 cv
683.988 52.922 683.535 52.828 683.535 52.406 cv
683.535 52.062 683.863 51.844 684.473 51.844 cv
684.926 51.844 685.395 51.969 685.77 52.172 cv
685.973 52.125 li
686.363 51.469 li
686.316 51.266 li
685.707 50.938 685.113 50.797 684.52 50.797 cv
683.426 50.797 682.348 51.266 682.348 52.406 cv
682.348 53.656 683.66 53.969 684.426 54.109 cv
684.895 54.188 685.379 54.312 685.379 54.719 cv
685.379 55.109 684.957 55.312 684.426 55.312 cv
683.895 55.312 683.332 55.125 682.879 54.797 cv
682.785 54.734 682.723 54.734 682.66 54.828 cv
682.27 55.5 li
682.223 55.578 682.223 55.656 682.316 55.703 cv
682.957 56.172 683.707 56.375 684.41 56.375 cv
685.645 56.375 686.582 55.812 686.582 54.672 cv
cp
f
693.016 54.812 mo
692.781 54.938 692.438 55.031 692.094 55.016 cv
691.469 55.016 690.906 54.734 690.906 53.953 cv
690.906 51.062 li
690.906 50.969 690.859 50.922 690.766 50.922 cv
689.875 50.922 li
689.781 50.922 689.719 50.969 689.719 51.062 cv
689.719 54 li
689.719 55.422 690.859 56.094 691.922 56.094 cv
692.297 56.094 692.688 56.016 693.016 55.906 cv
693.062 56.938 692.609 57.25 691.906 57.25 cv
691.344 57.25 690.891 57.047 690.5 56.781 cv
690.312 56.828 li
689.859 57.453 li
689.891 57.656 li
690.438 58.094 691.031 58.312 691.906 58.312 cv
693.484 58.312 694.203 57.5 694.203 55.906 cv
694.203 51.062 li
694.203 50.969 694.156 50.922 694.047 50.922 cv
693.172 50.922 li
693.062 50.922 693.016 50.969 693.016 51.062 cv
cp
f
699.012 56.25 mo
699.121 56.25 699.168 56.203 699.168 56.094 cv
699.168 54.031 li
699.168 53.062 699.121 51.812 699.09 50.797 cv
699.121 50.797 li
699.355 51.328 699.699 52.016 700.043 52.688 cv
700.949 54.453 li
701.121 54.562 li
701.902 54.562 li
702.074 54.453 li
702.98 52.688 li
703.324 52.016 703.652 51.328 703.902 50.797 cv
703.934 50.797 li
703.902 51.812 703.855 53.062 703.855 54.031 cv
703.855 56.094 li
703.855 56.203 703.902 56.25 703.996 56.25 cv
704.934 56.25 li
705.043 56.25 705.09 56.203 705.09 56.094 cv
705.09 49.047 li
705.09 48.953 705.043 48.906 704.934 48.906 cv
703.824 48.906 li
703.652 49.016 li
702.402 51.344 li
702.121 51.859 701.699 52.781 701.527 53.156 cv
701.496 53.156 li
701.324 52.781 700.887 51.859 700.621 51.344 cv
699.355 49.016 li
699.199 48.906 li
698.074 48.906 li
697.98 48.906 697.934 48.953 697.934 49.047 cv
697.934 56.094 li
697.934 56.203 697.98 56.25 698.074 56.25 cv
cp
f
706.543 51.344 mo
706.543 51.516 li
706.949 52.141 li
706.996 52.234 707.09 52.234 707.152 52.188 cv
707.48 52 707.965 51.859 708.48 51.859 cv
709.23 51.859 709.496 52.172 709.496 52.891 cv
709.496 53.094 li
709.199 53.047 708.809 53.016 708.48 53.016 cv
707.152 53.016 706.215 53.531 706.215 54.656 cv
706.215 55.938 707.324 56.375 708.512 56.375 cv
709.277 56.375 710.043 56.234 710.574 56.062 cv
710.699 55.891 li
710.699 52.891 li
710.699 51.438 709.824 50.797 708.559 50.797 cv
707.715 50.797 707.027 51 706.543 51.344 cv
cp
707.418 54.641 mo
707.418 54.219 707.73 53.969 708.512 53.969 cv
708.824 53.969 709.23 54.016 709.496 54.047 cv
709.496 55.219 li
709.246 55.266 708.855 55.328 708.512 55.328 cv
707.887 55.328 707.418 55.125 707.418 54.641 cv
cp
f
713.094 54.391 mo
713.094 52.031 li
714.188 52.031 li
714.266 52.031 714.328 51.984 714.328 51.891 cv
714.328 51.141 li
714.328 51.047 714.266 51 714.188 51 cv
713.078 51 li
712.984 49.766 li
712.984 49.688 712.922 49.625 712.828 49.625 cv
712.047 49.625 li
711.953 49.625 711.891 49.688 711.891 49.766 cv
711.891 54.469 li
711.891 55.828 712.734 56.375 713.797 56.375 cv
713.953 56.375 714.172 56.359 714.344 56.359 cv
714.453 56.344 714.484 56.266 714.484 56.188 cv
714.484 55.406 li
714.484 55.312 714.422 55.266 714.328 55.266 cv
714.156 55.266 714 55.281 713.906 55.281 cv
713.375 55.281 713.094 54.953 713.094 54.391 cv
cp
f
719.637 52.906 mo
719.637 51.391 718.527 50.797 717.418 50.797 cv
716.277 50.797 715.152 51.391 715.152 52.906 cv
715.152 54.375 li
715.152 55.734 716.246 56.375 717.402 56.375 cv
718.277 56.375 718.949 56.094 719.496 55.656 cv
719.527 55.453 li
719.105 54.875 li
718.887 54.859 li
718.512 55.109 718.074 55.328 717.449 55.328 cv
716.793 55.328 716.355 55 716.355 54.375 cv
716.355 54.094 li
719.48 54.094 li
719.59 54.094 719.637 54.047 719.637 53.953 cv
cp
718.465 52.891 mo
718.465 53.172 li
716.355 53.172 li
716.355 52.891 li
716.355 52.141 716.809 51.844 717.418 51.844 cv
717.996 51.844 718.465 52.141 718.465 52.891 cv
cp
f
724.164 51.281 mo
723.789 50.969 723.289 50.797 722.68 50.797 cv
722.023 50.797 721.383 50.953 720.82 51.203 cv
720.727 51.25 720.695 51.297 720.695 51.391 cv
720.695 56.094 li
720.695 56.203 720.742 56.25 720.852 56.25 cv
721.727 56.25 li
721.836 56.25 721.883 56.203 721.883 56.094 cv
721.883 51.984 li
722.086 51.922 722.352 51.875 722.711 51.875 cv
723.383 51.875 723.727 52.203 723.727 52.953 cv
723.727 56.094 li
723.727 56.203 723.789 56.25 723.883 56.25 cv
724.758 56.25 li
724.867 56.25 724.914 56.203 724.914 56.094 cv
724.914 52.969 li
724.914 52.656 724.867 52.391 724.789 52.141 cv
725.055 51.969 725.352 51.875 725.695 51.875 cv
726.43 51.875 726.742 52.281 726.742 52.953 cv
726.742 56.094 li
726.742 56.203 726.805 56.25 726.898 56.25 cv
727.789 56.25 li
727.883 56.25 727.93 56.203 727.93 56.094 cv
727.93 52.984 li
727.93 51.547 727.008 50.797 725.727 50.797 cv
725.117 50.797 724.68 50.953 724.164 51.281 cv
cp
f
729.141 51.344 mo
729.141 51.516 li
729.547 52.141 li
729.594 52.234 729.688 52.234 729.75 52.188 cv
730.078 52 730.562 51.859 731.078 51.859 cv
731.828 51.859 732.094 52.172 732.094 52.891 cv
732.094 53.094 li
731.797 53.047 731.406 53.016 731.078 53.016 cv
729.75 53.016 728.812 53.531 728.812 54.656 cv
728.812 55.938 729.922 56.375 731.109 56.375 cv
731.875 56.375 732.641 56.234 733.172 56.062 cv
733.297 55.891 li
733.297 52.891 li
733.297 51.438 732.422 50.797 731.156 50.797 cv
730.312 50.797 729.625 51 729.141 51.344 cv
cp
730.016 54.641 mo
730.016 54.219 730.328 53.969 731.109 53.969 cv
731.422 53.969 731.828 54.016 732.094 54.047 cv
732.094 55.219 li
731.844 55.266 731.453 55.328 731.109 55.328 cv
730.484 55.328 730.016 55.125 730.016 54.641 cv
cp
731.188 50.172 mo
731.375 50.078 li
732.406 48.719 li
732.484 48.625 732.453 48.531 732.328 48.531 cv
731.422 48.531 li
731.234 48.641 li
730.406 49.984 li
730.344 50.094 730.391 50.172 730.516 50.172 cv
cp
f
735.695 54.391 mo
735.695 52.031 li
736.789 52.031 li
736.867 52.031 736.93 51.984 736.93 51.891 cv
736.93 51.141 li
736.93 51.047 736.867 51 736.789 51 cv
735.68 51 li
735.586 49.766 li
735.586 49.688 735.523 49.625 735.43 49.625 cv
734.648 49.625 li
734.555 49.625 734.492 49.688 734.492 49.766 cv
734.492 54.469 li
734.492 55.828 735.336 56.375 736.398 56.375 cv
736.555 56.375 736.773 56.359 736.945 56.359 cv
737.055 56.344 737.086 56.266 737.086 56.188 cv
737.086 55.406 li
737.086 55.312 737.023 55.266 736.93 55.266 cv
736.758 55.266 736.602 55.281 736.508 55.281 cv
735.977 55.281 735.695 54.953 735.695 54.391 cv
cp
f
739.008 56.25 mo
739.086 56.25 739.148 56.203 739.148 56.094 cv
739.148 51.062 li
739.148 50.969 739.086 50.922 739.008 50.922 cv
738.102 50.922 li
738.008 50.922 737.945 50.969 737.945 51.062 cv
737.945 56.094 li
737.945 56.203 738.008 56.25 738.102 56.25 cv
cp
739.227 49.531 mo
739.227 49.141 738.945 48.859 738.555 48.859 cv
738.18 48.859 737.883 49.141 737.883 49.531 cv
737.883 49.906 738.18 50.203 738.555 50.203 cv
738.945 50.203 739.227 49.906 739.227 49.531 cv
cp
f
744.391 55.797 mo
744.422 55.594 li
743.984 54.969 li
743.938 54.875 743.875 54.875 743.781 54.938 cv
743.391 55.188 742.969 55.297 742.578 55.297 cv
741.875 55.297 741.469 54.938 741.469 54.312 cv
741.469 52.875 li
741.469 52.234 741.859 51.875 742.594 51.875 cv
742.969 51.875 743.359 51.984 743.672 52.172 cv
743.766 52.219 743.844 52.203 743.891 52.125 cv
744.297 51.516 li
744.344 51.422 744.328 51.344 744.25 51.297 cv
743.719 50.969 743.156 50.797 742.562 50.797 cv
741.141 50.797 740.266 51.609 740.266 52.875 cv
740.266 54.297 li
740.266 55.547 741.141 56.375 742.578 56.375 cv
743.297 56.375 743.875 56.172 744.391 55.797 cv
cp
f
745.258 51.344 mo
745.258 51.516 li
745.664 52.141 li
745.711 52.234 745.805 52.234 745.867 52.188 cv
746.195 52 746.68 51.859 747.195 51.859 cv
747.945 51.859 748.211 52.172 748.211 52.891 cv
748.211 53.094 li
747.914 53.047 747.523 53.016 747.195 53.016 cv
745.867 53.016 744.93 53.531 744.93 54.656 cv
744.93 55.938 746.039 56.375 747.227 56.375 cv
747.992 56.375 748.758 56.234 749.289 56.062 cv
749.414 55.891 li
749.414 52.891 li
749.414 51.438 748.539 50.797 747.273 50.797 cv
746.43 50.797 745.742 51 745.258 51.344 cv
cp
746.133 54.641 mo
746.133 54.219 746.445 53.969 747.227 53.969 cv
747.539 53.969 747.945 54.016 748.211 54.047 cv
748.211 55.219 li
747.961 55.266 747.57 55.328 747.227 55.328 cv
746.602 55.328 746.133 55.125 746.133 54.641 cv
cp
f
78.801 65.855 mo
78.047 65.855 77.496 65.617 76.898 65.129 cv
76.883 65.008 li
77.141 64.652 li
77.254 64.629 li
77.781 65.023 78.25 65.23 78.824 65.238 cv
79.516 65.238 80.141 64.945 80.141 64.309 cv
80.141 63.676 79.582 63.48 78.715 63.289 cv
77.793 63.086 76.898 62.695 76.898 61.684 cv
76.898 60.68 77.793 60.242 78.836 60.242 cv
79.516 60.242 80.031 60.434 80.613 60.852 cv
80.633 60.969 li
80.383 61.324 li
80.258 61.34 li
79.797 61.023 79.309 60.863 78.785 60.848 cv
78.062 60.848 77.551 61.145 77.551 61.699 cv
77.551 62.277 78.086 62.48 78.883 62.664 cv
79.895 62.895 80.793 63.215 80.793 64.293 cv
80.793 65.383 79.875 65.855 78.801 65.855 cv
.674769 .629328 .581018 .472938 cmyk
f
84.066 62.316 mo
83.492 62.316 83.082 62.613 83.082 63.266 cv
83.082 63.586 li
85.047 63.586 li
85.047 63.266 li
85.047 62.621 84.621 62.316 84.066 62.316 cv
85.656 64.012 mo
85.574 64.105 li
83.082 64.105 li
83.082 64.422 li
83.082 64.996 83.512 65.301 84.074 65.301 cv
84.598 65.301 84.957 65.094 85.238 64.871 cv
85.359 64.895 li
85.578 65.184 li
85.562 65.305 li
85.184 65.625 84.699 65.855 84.059 65.855 cv
83.238 65.855 82.449 65.383 82.449 64.422 cv
82.449 63.266 li
82.449 62.223 83.23 61.75 84.066 61.75 cv
84.895 61.75 85.656 62.223 85.656 63.266 cv
cp
f
87.559 65.77 mo
87.477 65.688 li
87.477 62.133 li
87.535 62.035 li
87.918 61.852 88.387 61.75 88.836 61.75 cv
89.09 61.75 89.348 61.773 89.621 61.812 cv
89.699 61.91 li
89.699 62.285 li
89.605 62.359 li
89.395 62.328 89.148 62.309 88.922 62.309 cv
88.609 62.309 88.305 62.375 88.098 62.461 cv
88.098 65.688 li
88.008 65.77 li
cp
f
92.27 61.227 mo
92.199 61.121 li
92.816 60.109 li
92.926 60.055 li
93.402 60.055 li
93.449 60.16 li
92.719 61.172 li
92.613 61.227 li
cp
92.68 62.316 mo
92.109 62.316 91.699 62.613 91.699 63.266 cv
91.699 63.586 li
93.664 63.586 li
93.664 63.266 li
93.664 62.621 93.238 62.316 92.68 62.316 cv
94.27 64.012 mo
94.188 64.105 li
91.699 64.105 li
91.699 64.422 li
91.699 64.996 92.125 65.301 92.688 65.301 cv
93.215 65.301 93.57 65.094 93.852 64.871 cv
93.977 64.895 li
94.195 65.184 li
94.18 65.305 li
93.801 65.625 93.312 65.855 92.672 65.855 cv
91.852 65.855 91.066 65.383 91.066 64.422 cv
91.066 63.266 li
91.066 62.223 91.844 61.75 92.68 61.75 cv
93.512 61.75 94.27 62.223 94.27 63.266 cv
cp
f
96.191 65.77 mo
96.098 65.688 li
96.098 61.926 li
96.191 61.836 li
96.637 61.836 li
96.723 61.926 li
96.723 65.688 li
96.637 65.77 li
cp
96.418 61.105 mo
96.203 61.105 96.039 60.945 96.039 60.73 cv
96.039 60.512 96.203 60.359 96.418 60.359 cv
96.629 60.359 96.789 60.512 96.789 60.73 cv
96.789 60.945 96.629 61.105 96.418 61.105 cv
f
100.012 65.855 mo
99.484 65.855 98.961 65.703 98.504 65.367 cv
98.48 65.246 li
98.688 64.895 li
98.809 64.871 li
99.172 65.148 99.59 65.297 100.023 65.297 cv
100.535 65.297 100.922 65.086 100.922 64.691 cv
100.922 64.262 100.449 64.164 100.023 64.082 cv
99.477 63.965 98.539 63.754 98.539 62.871 cv
98.539 62.094 99.277 61.75 100.039 61.75 cv
100.52 61.75 100.945 61.871 101.363 62.109 cv
101.395 62.223 li
101.188 62.566 li
101.074 62.598 li
100.762 62.43 100.391 62.316 100.012 62.316 cv
99.477 62.316 99.156 62.527 99.156 62.871 cv
99.156 63.289 99.605 63.402 100.148 63.512 cv
100.754 63.633 101.555 63.805 101.555 64.66 cv
101.555 65.434 100.902 65.855 100.012 65.855 cv
f
109.582 61.75 mo
110.512 61.75 111.16 62.293 111.16 63.305 cv
111.16 65.688 li
111.074 65.77 li
110.625 65.77 li
110.535 65.688 li
110.535 63.289 li
110.535 62.68 110.223 62.316 109.566 62.316 cv
109.25 62.316 108.961 62.414 108.73 62.574 cv
108.82 62.773 108.875 63.023 108.875 63.297 cv
108.875 65.688 li
108.793 65.77 li
108.336 65.77 li
108.254 65.688 li
108.254 63.289 li
108.254 62.641 107.953 62.316 107.34 62.316 cv
107.027 62.316 106.781 62.375 106.57 62.449 cv
106.57 65.688 li
106.477 65.77 li
106.027 65.77 li
105.945 65.688 li
105.945 62.156 li
106.016 62.047 li
106.418 61.863 106.859 61.75 107.324 61.75 cv
107.789 61.75 108.145 61.891 108.41 62.125 cv
108.777 61.883 109.125 61.75 109.582 61.75 cv
f
113.215 65.77 mo
113.121 65.688 li
113.121 61.926 li
113.215 61.836 li
113.664 61.836 li
113.746 61.926 li
113.746 65.688 li
113.664 65.77 li
cp
113.441 61.105 mo
113.227 61.105 113.062 60.945 113.062 60.73 cv
113.062 60.512 113.227 60.359 113.441 60.359 cv
113.656 60.359 113.812 60.512 113.812 60.73 cv
113.812 60.945 113.656 61.105 113.441 61.105 cv
f
117.035 65.855 mo
116.508 65.855 115.984 65.703 115.527 65.367 cv
115.504 65.246 li
115.711 64.895 li
115.832 64.871 li
116.195 65.148 116.613 65.297 117.051 65.297 cv
117.559 65.297 117.949 65.086 117.949 64.691 cv
117.949 64.262 117.477 64.164 117.051 64.082 cv
116.5 63.965 115.562 63.754 115.562 62.871 cv
115.562 62.094 116.301 61.75 117.066 61.75 cv
117.543 61.75 117.969 61.871 118.391 62.109 cv
118.418 62.223 li
118.215 62.566 li
118.102 62.598 li
117.785 62.43 117.414 62.316 117.035 62.316 cv
116.5 62.316 116.18 62.527 116.18 62.871 cv
116.18 63.289 116.633 63.402 117.172 63.512 cv
117.777 63.633 118.578 63.805 118.578 64.66 cv
118.578 65.434 117.926 65.855 117.035 65.855 cv
f
124.309 65.273 mo
124.395 65.273 124.539 65.27 124.676 65.258 cv
124.766 65.344 li
124.766 65.746 li
124.691 65.836 li
124.551 65.848 124.379 65.855 124.277 65.855 cv
123.52 65.855 122.953 65.441 122.953 64.508 cv
122.953 60.961 li
123.047 60.871 li
123.441 60.871 li
123.527 60.953 li
123.578 61.871 li
124.57 61.871 li
124.652 61.957 li
124.652 62.336 li
124.57 62.43 li
123.578 62.43 li
123.578 64.477 li
123.578 64.977 123.836 65.277 124.309 65.277 cv
f
127.809 62.316 mo
127.238 62.316 126.828 62.613 126.828 63.266 cv
126.828 63.586 li
128.793 63.586 li
128.793 63.266 li
128.793 62.621 128.367 62.316 127.809 62.316 cv
129.402 64.012 mo
129.316 64.105 li
126.828 64.105 li
126.828 64.422 li
126.828 64.996 127.254 65.301 127.816 65.301 cv
128.344 65.301 128.699 65.094 128.98 64.871 cv
129.105 64.895 li
129.324 65.184 li
129.309 65.305 li
128.93 65.625 128.441 65.855 127.805 65.855 cv
126.98 65.855 126.195 65.383 126.195 64.422 cv
126.195 63.266 li
126.195 62.223 126.973 61.75 127.809 61.75 cv
128.641 61.75 129.402 62.223 129.402 63.266 cv
cp
f
132.516 65.855 mo
131.988 65.855 131.465 65.703 131.008 65.367 cv
130.984 65.246 li
131.191 64.895 li
131.312 64.871 li
131.676 65.148 132.094 65.297 132.527 65.297 cv
133.039 65.297 133.426 65.086 133.426 64.691 cv
133.426 64.262 132.953 64.164 132.527 64.082 cv
131.98 63.965 131.043 63.754 131.043 62.871 cv
131.043 62.094 131.781 61.75 132.543 61.75 cv
133.023 61.75 133.449 61.871 133.867 62.109 cv
133.898 62.223 li
133.691 62.566 li
133.578 62.598 li
133.266 62.43 132.895 62.316 132.516 62.316 cv
131.98 62.316 131.66 62.527 131.66 62.871 cv
131.66 63.289 132.109 63.402 132.652 63.512 cv
133.258 63.633 134.059 63.805 134.059 64.66 cv
134.059 65.434 133.406 65.855 132.516 65.855 cv
f
137.125 65.273 mo
137.207 65.273 137.352 65.27 137.488 65.258 cv
137.582 65.344 li
137.582 65.746 li
137.504 65.836 li
137.367 65.848 137.195 65.855 137.094 65.855 cv
136.336 65.855 135.77 65.441 135.77 64.508 cv
135.77 60.961 li
135.863 60.871 li
136.258 60.871 li
136.34 60.953 li
136.395 61.871 li
137.383 61.871 li
137.469 61.957 li
137.469 62.336 li
137.383 62.43 li
136.395 62.43 li
136.395 64.477 li
136.395 64.977 136.652 65.277 137.125 65.277 cv
f
139.277 65.77 mo
139.188 65.688 li
139.188 61.926 li
139.277 61.836 li
139.727 61.836 li
139.812 61.926 li
139.812 65.688 li
139.727 65.77 li
cp
139.508 61.105 mo
139.293 61.105 139.129 60.945 139.129 60.73 cv
139.129 60.512 139.293 60.359 139.508 60.359 cv
139.719 60.359 139.879 60.512 139.879 60.73 cv
139.879 60.945 139.719 61.105 139.508 61.105 cv
f
143.352 65.086 mo
143.691 65.086 144.066 65 144.277 64.855 cv
144.277 62.445 li
144.059 62.367 143.664 62.316 143.383 62.316 cv
142.727 62.316 142.301 62.582 142.301 63.336 cv
142.301 64.098 li
142.301 64.828 142.75 65.086 143.352 65.086 cv
143.297 67.293 mo
142.688 67.293 142.23 67.102 141.828 66.766 cv
141.82 66.645 li
142.039 66.32 li
142.164 66.305 li
142.477 66.555 142.84 66.727 143.297 66.727 cv
143.98 66.727 144.301 66.387 144.277 65.609 cv
144.277 65.43 li
143.996 65.562 143.625 65.648 143.305 65.648 cv
142.391 65.648 141.668 65.152 141.668 64.098 cv
141.668 63.336 li
141.668 62.188 142.422 61.75 143.375 61.75 cv
143.906 61.75 144.438 61.875 144.836 62.047 cv
144.902 62.148 li
144.902 65.664 li
144.902 66.66 144.43 67.293 143.297 67.293 cv
f
148.426 65.301 mo
149.113 65.301 149.477 64.934 149.477 64.359 cv
149.477 63.266 li
149.477 62.688 149.113 62.316 148.426 62.316 cv
147.75 62.316 147.383 62.688 147.383 63.266 cv
147.383 64.359 li
147.383 64.934 147.75 65.301 148.426 65.301 cv
148.426 65.855 mo
147.398 65.855 146.75 65.25 146.75 64.359 cv
146.75 63.266 li
146.75 62.375 147.398 61.75 148.426 61.75 cv
149.461 61.75 150.102 62.375 150.102 63.266 cv
150.102 64.359 li
150.102 65.25 149.461 65.855 148.426 65.855 cv
f
153.242 65.855 mo
152.719 65.855 152.191 65.703 151.734 65.367 cv
151.715 65.246 li
151.918 64.895 li
152.039 64.871 li
152.406 65.148 152.828 65.297 153.262 65.297 cv
153.77 65.297 154.156 65.086 154.156 64.691 cv
154.156 64.262 153.688 64.164 153.262 64.082 cv
152.711 63.965 151.773 63.754 151.773 62.871 cv
151.773 62.094 152.512 61.75 153.273 61.75 cv
153.754 61.75 154.18 61.871 154.598 62.109 cv
154.629 62.223 li
154.426 62.566 li
154.309 62.598 li
153.996 62.43 153.625 62.316 153.242 62.316 cv
152.711 62.316 152.391 62.527 152.391 62.871 cv
152.391 63.289 152.84 63.402 153.383 63.512 cv
153.992 63.633 154.789 63.805 154.789 64.66 cv
154.789 65.434 154.133 65.855 153.242 65.855 cv
f
79.824 39.305 mo
80.754 39.305 81.207 38.887 81.207 38.02 cv
81.207 37.16 80.754 36.734 79.824 36.734 cv
78.598 36.734 li
78.598 39.305 li
cp
80.094 34.922 mo
82.016 34.922 83.227 36.121 83.227 38.02 cv
83.227 39.93 82.016 41.125 80.094 41.125 cv
78.598 41.125 li
78.598 43.453 li
78.598 43.598 78.527 43.672 78.391 43.672 cv
76.848 43.672 li
76.715 43.672 76.641 43.598 76.641 43.453 cv
76.641 35.145 li
76.641 34.996 76.715 34.922 76.848 34.922 cv
cp
1 .894224 .089662 .0632334 cmyk
f
86.863 42.18 mo
87.512 42.18 87.867 41.848 87.867 41.238 cv
87.867 39.77 li
87.867 39.156 87.512 38.801 86.863 38.801 cv
86.215 38.801 85.859 39.156 85.859 39.77 cv
85.859 41.238 li
85.859 41.848 86.215 42.18 86.863 42.18 cv
86.863 43.832 mo
85.062 43.832 83.949 42.852 83.949 41.238 cv
83.949 39.77 li
83.949 38.129 85.062 37.137 86.863 37.137 cv
88.648 37.137 89.762 38.129 89.762 39.77 cv
89.762 41.238 li
89.762 42.852 88.648 43.832 86.863 43.832 cv
f
91.133 43.684 mo
90.988 43.684 90.914 43.598 90.914 43.465 cv
90.914 37.895 li
90.914 37.773 90.965 37.688 91.074 37.641 cv
91.82 37.332 92.777 37.137 93.645 37.137 cv
95.504 37.137 96.555 38.141 96.555 39.977 cv
96.555 43.465 li
96.555 43.598 96.484 43.684 96.336 43.684 cv
94.895 43.684 li
94.746 43.684 94.672 43.598 94.672 43.465 cv
94.672 39.977 li
94.672 39.086 94.293 38.805 93.645 38.805 cv
93.301 38.805 92.984 38.852 92.785 38.91 cv
92.785 43.465 li
92.785 43.598 92.715 43.684 92.578 43.684 cv
cp
f
100.496 42.156 mo
100.609 42.156 100.754 42.141 100.891 42.129 cv
101.051 42.105 101.121 42.168 101.121 42.316 cv
101.121 43.516 li
101.121 43.637 101.074 43.734 100.953 43.758 cv
100.742 43.797 100.473 43.82 100.18 43.82 cv
98.762 43.82 97.805 43.051 97.805 41.48 cv
97.805 35.988 li
97.805 35.855 97.879 35.781 98.027 35.781 cv
99.297 35.781 li
99.434 35.781 99.508 35.84 99.52 35.977 cv
99.668 37.445 li
100.77 37.445 li
100.902 37.445 100.988 37.516 100.988 37.652 cv
100.988 38.828 li
100.988 38.961 100.902 39.035 100.77 39.035 cv
99.68 39.035 li
99.68 41.25 li
99.68 41.852 99.961 42.156 100.496 42.156 cv
f
102.309 43.672 mo
102.176 43.672 102.09 43.598 102.09 43.453 cv
102.09 37.516 li
102.09 37.383 102.176 37.309 102.309 37.309 cv
103.754 37.309 li
103.891 37.309 103.961 37.383 103.961 37.516 cv
103.961 43.453 li
103.961 43.598 103.891 43.672 103.754 43.672 cv
cp
103.031 36.426 mo
102.434 36.426 101.992 35.977 101.992 35.398 cv
101.992 34.801 102.434 34.371 103.031 34.371 cv
103.645 34.371 104.059 34.801 104.059 35.398 cv
104.059 35.977 103.645 36.426 103.031 36.426 cv
f
108.016 36.379 mo
107.477 36.379 107.207 36.684 107.207 37.258 cv
107.207 37.469 li
108.359 37.469 li
108.492 37.469 108.562 37.543 108.562 37.676 cv
108.562 38.852 li
108.562 38.988 108.492 39.059 108.359 39.059 cv
107.207 39.059 li
107.207 43.453 li
107.207 43.598 107.133 43.672 107 43.672 cv
105.555 43.672 li
105.406 43.672 105.332 43.598 105.332 43.453 cv
105.332 37.188 li
105.332 35.598 106.289 34.762 107.695 34.762 cv
108.016 34.762 108.285 34.777 108.504 34.812 cv
108.625 34.836 108.688 34.922 108.688 35.059 cv
108.688 36.195 li
108.688 36.328 108.625 36.418 108.527 36.402 cv
108.383 36.391 108.199 36.379 108.016 36.379 cv
f
109.691 43.672 mo
109.555 43.672 109.473 43.598 109.473 43.453 cv
109.473 37.516 li
109.473 37.383 109.555 37.309 109.691 37.309 cv
111.137 37.309 li
111.27 37.309 111.344 37.383 111.344 37.516 cv
111.344 43.453 li
111.344 43.598 111.27 43.672 111.137 43.672 cv
cp
110.414 36.426 mo
109.812 36.426 109.375 35.977 109.375 35.398 cv
109.375 34.801 109.812 34.371 110.414 34.371 cv
111.027 34.371 111.441 34.801 111.441 35.398 cv
111.441 35.977 111.027 36.426 110.414 36.426 cv
f
115.422 43.832 mo
113.574 43.832 112.52 42.805 112.52 41.164 cv
112.52 39.781 li
112.52 38.168 113.586 37.137 115.41 37.137 cv
116.117 37.137 116.789 37.332 117.414 37.715 cv
117.523 37.789 117.551 37.895 117.477 38.02 cv
116.828 38.996 li
116.754 39.121 116.656 39.133 116.523 39.07 cv
116.203 38.898 115.848 38.789 115.492 38.789 cv
114.82 38.789 114.418 39.156 114.418 39.781 cv
114.418 41.164 li
114.418 41.852 114.848 42.18 115.48 42.18 cv
115.898 42.18 116.289 42.059 116.656 41.824 cv
116.777 41.75 116.887 41.777 116.965 41.887 cv
117.625 42.863 li
117.695 42.977 117.684 43.086 117.586 43.16 cv
116.965 43.598 116.266 43.832 115.422 43.832 cv
f
118.727 43.672 mo
118.594 43.672 118.508 43.598 118.508 43.453 cv
118.508 37.516 li
118.508 37.383 118.594 37.309 118.727 37.309 cv
120.172 37.309 li
120.305 37.309 120.379 37.383 120.379 37.516 cv
120.379 43.453 li
120.379 43.598 120.305 43.672 120.172 43.672 cv
cp
119.449 36.426 mo
118.848 36.426 118.41 35.977 118.41 35.398 cv
118.41 34.801 118.848 34.371 119.449 34.371 cv
120.059 34.371 120.477 34.801 120.477 35.398 cv
120.477 35.977 120.059 36.426 119.449 36.426 cv
f
124.211 42.316 mo
124.492 42.316 124.82 42.266 125.043 42.219 cv
125.043 41.141 li
124.797 41.09 124.469 41.066 124.195 41.066 cv
123.523 41.066 123.23 41.285 123.23 41.68 cv
123.23 42.105 123.621 42.316 124.211 42.316 cv
124.234 37.137 mo
125.922 37.137 126.914 38.02 126.914 39.879 cv
126.914 43.234 li
126.914 43.355 126.852 43.441 126.73 43.477 cv
126.008 43.695 125.043 43.832 124.211 43.832 cv
122.449 43.832 121.336 43.172 121.336 41.727 cv
121.336 40.453 122.336 39.82 124 39.82 cv
124.379 39.82 124.734 39.855 125.043 39.891 cv
125.043 39.77 li
125.043 39.121 124.809 38.766 124.016 38.766 cv
123.477 38.766 122.84 38.91 122.484 39.109 cv
122.375 39.168 122.25 39.156 122.191 39.035 cv
121.688 38.082 li
121.629 37.957 121.629 37.871 121.715 37.812 cv
122.289 37.445 123.18 37.137 124.234 37.137 cv
f
134.273 43.82 mo
132.117 43.82 130.867 42.598 130.867 40.453 cv
130.867 35.145 li
130.867 34.996 130.941 34.922 131.09 34.922 cv
132.645 34.922 li
132.777 34.922 132.863 34.996 132.863 35.145 cv
132.863 40.453 li
132.863 41.445 133.367 41.961 134.273 41.961 cv
135.176 41.961 135.703 41.445 135.703 40.453 cv
135.703 35.145 li
135.703 34.996 135.777 34.922 135.91 34.922 cv
137.48 34.922 li
137.613 34.922 137.684 34.996 137.684 35.145 cv
137.684 40.453 li
137.684 42.598 136.426 43.82 134.273 43.82 cv
f
139.277 43.684 mo
139.133 43.684 139.059 43.598 139.059 43.465 cv
139.059 37.895 li
139.059 37.773 139.109 37.688 139.219 37.641 cv
139.965 37.332 140.918 37.137 141.785 37.137 cv
143.648 37.137 144.699 38.141 144.699 39.977 cv
144.699 43.465 li
144.699 43.598 144.629 43.684 144.48 43.684 cv
143.035 43.684 li
142.887 43.684 142.816 43.598 142.816 43.465 cv
142.816 39.977 li
142.816 39.086 142.438 38.805 141.785 38.805 cv
141.445 38.805 141.125 38.852 140.93 38.91 cv
140.93 43.465 li
140.93 43.598 140.859 43.684 140.723 43.684 cv
cp
f
146.219 43.672 mo
146.082 43.672 146 43.598 146 43.453 cv
146 37.516 li
146 37.383 146.082 37.309 146.219 37.309 cv
147.664 37.309 li
147.797 37.309 147.871 37.383 147.871 37.516 cv
147.871 43.453 li
147.871 43.598 147.797 43.672 147.664 43.672 cv
cp
146.941 36.426 mo
146.34 36.426 145.902 35.977 145.902 35.398 cv
145.902 34.801 146.34 34.371 146.941 34.371 cv
147.555 34.371 147.969 34.801 147.969 35.398 cv
147.969 35.977 147.555 36.426 146.941 36.426 cv
f
150.945 43.672 mo
150.836 43.672 150.75 43.613 150.711 43.5 cv
148.656 37.555 li
148.594 37.406 148.668 37.309 148.828 37.309 cv
150.367 37.309 li
150.492 37.309 150.578 37.371 150.602 37.48 cv
151.348 40.16 li
151.48 40.578 151.656 41.227 151.789 41.762 cv
151.824 41.762 li
151.961 41.227 152.145 40.578 152.266 40.16 cv
153.027 37.48 li
153.062 37.371 153.148 37.309 153.27 37.309 cv
154.812 37.309 li
154.969 37.309 155.031 37.406 154.984 37.555 cv
152.902 43.5 li
152.855 43.613 152.777 43.672 152.656 43.672 cv
cp
f
158.266 38.691 mo
157.699 38.691 157.32 38.988 157.32 39.66 cv
157.32 39.918 li
159.207 39.918 li
159.207 39.66 li
159.207 38.996 158.812 38.691 158.266 38.691 cv
161.004 40.922 mo
161.004 41.055 160.934 41.125 160.785 41.125 cv
157.32 41.125 li
157.32 41.324 li
157.32 41.945 157.727 42.266 158.375 42.266 cv
158.988 42.266 159.488 42.082 159.93 41.824 cv
160.039 41.738 160.137 41.762 160.211 41.875 cv
160.848 42.719 li
160.922 42.828 160.922 42.938 160.809 43.023 cv
160.188 43.5 159.391 43.832 158.312 43.832 cv
156.723 43.832 155.438 42.988 155.438 41.285 cv
155.438 39.746 li
155.438 37.922 156.723 37.137 158.277 37.137 cv
159.781 37.137 161.004 37.895 161.004 39.746 cv
cp
f
162.316 43.672 mo
162.172 43.672 162.098 43.598 162.098 43.453 cv
162.098 37.895 li
162.098 37.789 162.145 37.699 162.254 37.637 cv
162.93 37.309 163.711 37.137 164.508 37.137 cv
164.875 37.137 165.254 37.188 165.695 37.258 cv
165.828 37.285 165.891 37.359 165.891 37.492 cv
165.891 38.617 li
165.891 38.766 165.805 38.84 165.66 38.812 cv
165.414 38.777 165.145 38.766 164.898 38.766 cv
164.531 38.766 164.203 38.828 163.969 38.926 cv
163.969 43.453 li
163.969 43.598 163.895 43.672 163.762 43.672 cv
cp
f
168.988 43.832 mo
168.129 43.832 167.211 43.574 166.441 43.035 cv
166.32 42.949 166.309 42.855 166.383 42.73 cv
166.957 41.75 li
167.043 41.617 167.129 41.594 167.25 41.68 cv
167.789 42.043 168.387 42.23 169 42.23 cv
169.516 42.23 169.867 42.059 169.867 41.738 cv
169.867 41.422 169.477 41.312 168.988 41.227 cv
167.652 41.004 166.566 40.441 166.566 39.156 cv
166.566 37.812 167.617 37.137 169.223 37.137 cv
169.957 37.137 170.641 37.309 171.387 37.699 cv
171.508 37.762 171.535 37.871 171.461 37.996 cv
170.898 38.949 li
170.824 39.07 170.727 39.094 170.602 39.035 cv
170.188 38.812 169.672 38.68 169.184 38.68 cv
168.656 38.68 168.402 38.828 168.402 39.133 cv
168.402 39.477 168.684 39.574 169.465 39.695 cv
170.738 39.918 171.754 40.441 171.754 41.688 cv
171.754 43.121 170.738 43.832 168.988 43.832 cv
f
172.992 43.672 mo
172.855 43.672 172.77 43.598 172.77 43.453 cv
172.77 37.516 li
172.77 37.383 172.855 37.309 172.992 37.309 cv
174.438 37.309 li
174.57 37.309 174.645 37.383 174.645 37.516 cv
174.645 43.453 li
174.645 43.598 174.57 43.672 174.438 43.672 cv
cp
173.711 36.426 mo
173.113 36.426 172.672 35.977 172.672 35.398 cv
172.672 34.801 173.113 34.371 173.711 34.371 cv
174.324 34.371 174.742 34.801 174.742 35.398 cv
174.742 35.977 174.324 36.426 173.711 36.426 cv
f
178.742 42.18 mo
179.051 42.18 179.355 42.129 179.586 42.043 cv
179.586 38.973 li
179.355 38.852 179.062 38.766 178.73 38.766 cv
178.07 38.766 177.715 39.109 177.715 39.82 cv
177.715 41.09 li
177.715 41.863 178.082 42.18 178.742 42.18 cv
179.586 35.145 mo
179.586 34.996 179.66 34.922 179.797 34.922 cv
181.238 34.922 li
181.387 34.922 181.461 34.996 181.461 35.145 cv
181.461 43.137 li
181.461 43.258 181.414 43.34 181.289 43.391 cv
180.543 43.66 179.539 43.832 178.707 43.832 cv
176.992 43.832 175.809 42.805 175.809 41.055 cv
175.809 39.844 li
175.809 38.191 176.883 37.137 178.449 37.137 cv
178.867 37.137 179.281 37.234 179.586 37.348 cv
cp
f
185.281 42.316 mo
185.562 42.316 185.895 42.266 186.113 42.219 cv
186.113 41.141 li
185.867 41.09 185.539 41.066 185.27 41.066 cv
184.598 41.066 184.301 41.285 184.301 41.68 cv
184.301 42.105 184.695 42.316 185.281 42.316 cv
185.305 37.137 mo
186.992 37.137 187.984 38.02 187.984 39.879 cv
187.984 43.234 li
187.984 43.355 187.926 43.441 187.801 43.477 cv
187.078 43.695 186.113 43.832 185.281 43.832 cv
183.52 43.832 182.406 43.172 182.406 41.727 cv
182.406 40.453 183.406 39.82 185.074 39.82 cv
185.453 39.82 185.809 39.855 186.113 39.891 cv
186.113 39.77 li
186.113 39.121 185.879 38.766 185.086 38.766 cv
184.547 38.766 183.91 38.91 183.555 39.109 cv
183.445 39.168 183.324 39.156 183.262 39.035 cv
182.762 38.082 li
182.699 37.957 182.699 37.871 182.785 37.812 cv
183.359 37.445 184.254 37.137 185.305 37.137 cv
f
192 42.18 mo
192.309 42.18 192.613 42.129 192.844 42.043 cv
192.844 38.973 li
192.613 38.852 192.32 38.766 191.988 38.766 cv
191.328 38.766 190.973 39.109 190.973 39.82 cv
190.973 41.09 li
190.973 41.863 191.34 42.18 192 42.18 cv
192.844 35.145 mo
192.844 34.996 192.922 34.922 193.055 34.922 cv
194.5 34.922 li
194.645 34.922 194.719 34.996 194.719 35.145 cv
194.719 43.137 li
194.719 43.258 194.668 43.34 194.547 43.391 cv
193.801 43.66 192.797 43.832 191.965 43.832 cv
190.25 43.832 189.062 42.805 189.062 41.055 cv
189.062 39.844 li
189.062 38.191 190.141 37.137 191.707 37.137 cv
192.125 37.137 192.539 37.234 192.844 37.348 cv
cp
f
79.945 56.086 mo
77.793 56.086 76.371 54.945 76.371 52.816 cv
76.371 50.262 li
76.371 48.129 77.805 47.004 79.91 47.004 cv
80.887 47.004 81.832 47.297 82.527 47.789 cv
82.652 47.863 82.664 47.961 82.59 48.07 cv
81.816 49.242 li
81.734 49.367 81.633 49.379 81.512 49.305 cv
81.059 49.012 80.484 48.863 79.945 48.863 cv
78.918 48.863 78.367 49.453 78.367 50.336 cv
78.367 52.73 li
78.367 53.672 78.957 54.211 79.957 54.211 cv
80.57 54.211 81.172 54.027 81.656 53.699 cv
81.781 53.613 81.879 53.625 81.953 53.746 cv
82.734 54.922 li
82.809 55.031 82.809 55.129 82.727 55.191 cv
82.016 55.719 81.082 56.086 79.945 56.086 cv
f
86.152 54.555 mo
86.434 54.555 86.762 54.508 86.984 54.457 cv
86.984 53.379 li
86.738 53.332 86.41 53.309 86.137 53.309 cv
85.465 53.309 85.172 53.527 85.172 53.918 cv
85.172 54.348 85.562 54.555 86.152 54.555 cv
86.176 49.379 mo
87.867 49.379 88.855 50.262 88.855 52.117 cv
88.855 55.473 li
88.855 55.598 88.797 55.68 88.672 55.719 cv
87.949 55.938 86.984 56.074 86.152 56.074 cv
84.391 56.074 83.277 55.41 83.277 53.969 cv
83.277 52.695 84.281 52.059 85.945 52.059 cv
86.324 52.059 86.676 52.094 86.984 52.133 cv
86.984 52.012 li
86.984 51.359 86.75 51.004 85.957 51.004 cv
85.418 51.004 84.781 51.152 84.426 51.348 cv
84.316 51.41 84.195 51.398 84.133 51.277 cv
83.629 50.32 li
83.57 50.199 83.57 50.113 83.656 50.051 cv
84.23 49.684 85.125 49.379 86.176 49.379 cv
f
92.785 54.395 mo
92.898 54.395 93.043 54.387 93.18 54.371 cv
93.34 54.348 93.41 54.41 93.41 54.555 cv
93.41 55.754 li
93.41 55.879 93.363 55.977 93.238 56 cv
93.031 56.035 92.762 56.062 92.469 56.062 cv
91.051 56.062 90.094 55.289 90.094 53.723 cv
90.094 48.227 li
90.094 48.094 90.168 48.02 90.312 48.02 cv
91.586 48.02 li
91.723 48.02 91.793 48.082 91.809 48.219 cv
91.953 49.684 li
93.055 49.684 li
93.188 49.684 93.277 49.758 93.277 49.895 cv
93.277 51.07 li
93.277 51.203 93.188 51.277 93.055 51.277 cv
91.969 51.277 li
91.969 53.492 li
91.969 54.09 92.246 54.395 92.785 54.395 cv
f
97.047 54.422 mo
97.695 54.422 98.051 54.09 98.051 53.48 cv
98.051 52.012 li
98.051 51.398 97.695 51.043 97.047 51.043 cv
96.398 51.043 96.043 51.398 96.043 52.012 cv
96.043 53.48 li
96.043 54.09 96.398 54.422 97.047 54.422 cv
96.168 48.754 mo
95.992 48.754 95.934 48.633 96.031 48.496 cv
97.035 46.906 li
97.098 46.809 97.184 46.758 97.289 46.758 cv
98.676 46.758 li
98.844 46.758 98.906 46.883 98.785 47.027 cv
97.488 48.633 li
97.426 48.719 97.328 48.754 97.23 48.754 cv
cp
97.047 56.074 mo
95.25 56.074 94.133 55.094 94.133 53.48 cv
94.133 52.012 li
94.133 50.371 95.25 49.379 97.047 49.379 cv
98.836 49.379 99.945 50.371 99.945 52.012 cv
99.945 53.48 li
99.945 55.094 98.836 56.074 97.047 56.074 cv
f
103.34 56.074 mo
101.895 56.074 101.074 55.191 101.074 53.699 cv
101.074 47.383 li
101.074 47.238 101.148 47.164 101.293 47.164 cv
102.738 47.164 li
102.875 47.164 102.945 47.238 102.945 47.383 cv
102.945 53.465 li
102.945 54.078 103.191 54.359 103.668 54.359 cv
103.793 54.359 103.926 54.359 104.051 54.348 cv
104.195 54.336 104.281 54.406 104.281 54.555 cv
104.281 55.777 li
104.281 55.891 104.234 55.988 104.145 56 cv
103.938 56.035 103.668 56.074 103.34 56.074 cv
f
105.285 55.914 mo
105.152 55.914 105.066 55.84 105.066 55.691 cv
105.066 49.758 li
105.066 49.625 105.152 49.551 105.285 49.551 cv
106.73 49.551 li
106.863 49.551 106.938 49.625 106.938 49.758 cv
106.938 55.691 li
106.938 55.84 106.863 55.914 106.73 55.914 cv
cp
106.008 48.668 mo
105.406 48.668 104.969 48.215 104.969 47.641 cv
104.969 47.043 105.406 46.613 106.008 46.613 cv
106.621 46.613 107.035 47.043 107.035 47.641 cv
107.035 48.215 106.621 48.668 106.008 48.668 cv
f
111.012 56.074 mo
109.164 56.074 108.113 55.043 108.113 53.406 cv
108.113 52.023 li
108.113 50.406 109.176 49.379 111 49.379 cv
111.711 49.379 112.383 49.574 113.008 49.953 cv
113.121 50.027 113.145 50.137 113.07 50.262 cv
112.422 51.238 li
112.348 51.359 112.25 51.375 112.113 51.312 cv
111.797 51.141 111.441 51.031 111.086 51.031 cv
110.414 51.031 110.012 51.398 110.012 52.023 cv
110.012 53.406 li
110.012 54.09 110.438 54.422 111.074 54.422 cv
111.492 54.422 111.883 54.297 112.25 54.066 cv
112.371 53.992 112.48 54.016 112.555 54.129 cv
113.215 55.105 li
113.289 55.215 113.277 55.324 113.18 55.402 cv
112.555 55.84 111.859 56.074 111.012 56.074 cv
f
116.559 54.555 mo
116.84 54.555 117.168 54.508 117.391 54.457 cv
117.391 53.379 li
117.145 53.332 116.816 53.309 116.547 53.309 cv
115.871 53.309 115.582 53.527 115.582 53.918 cv
115.582 54.348 115.973 54.555 116.559 54.555 cv
116.582 49.379 mo
118.273 49.379 119.262 50.262 119.262 52.117 cv
119.262 55.473 li
119.262 55.598 119.203 55.68 119.078 55.719 cv
118.359 55.938 117.391 56.074 116.559 56.074 cv
114.797 56.074 113.684 55.41 113.684 53.969 cv
113.684 52.695 114.688 52.059 116.352 52.059 cv
116.73 52.059 117.086 52.094 117.391 52.133 cv
117.391 52.012 li
117.391 51.359 117.16 51.004 116.363 51.004 cv
115.824 51.004 115.188 51.152 114.832 51.348 cv
114.723 51.41 114.602 51.398 114.539 51.277 cv
114.035 50.32 li
113.977 50.199 113.977 50.113 114.062 50.051 cv
114.637 49.684 115.531 49.379 116.582 49.379 cv
f
125.801 54.422 mo
126.105 54.422 126.41 54.371 126.645 54.285 cv
126.645 51.215 li
126.41 51.094 126.117 51.008 125.789 51.008 cv
125.129 51.008 124.773 51.352 124.773 52.059 cv
124.773 53.332 li
124.773 54.102 125.141 54.422 125.801 54.422 cv
126.645 47.383 mo
126.645 47.238 126.719 47.164 126.852 47.164 cv
128.297 47.164 li
128.445 47.164 128.52 47.238 128.52 47.383 cv
128.52 55.375 li
128.52 55.5 128.469 55.582 128.344 55.633 cv
127.602 55.902 126.598 56.074 125.766 56.074 cv
124.051 56.074 122.863 55.043 122.863 53.293 cv
122.863 52.082 li
122.863 50.43 123.941 49.379 125.508 49.379 cv
125.922 49.379 126.34 49.477 126.645 49.586 cv
cp
f
132.508 50.934 mo
131.945 50.934 131.566 51.227 131.566 51.898 cv
131.566 52.156 li
133.453 52.156 li
133.453 51.898 li
133.453 51.238 133.059 50.934 132.508 50.934 cv
135.25 53.16 mo
135.25 53.293 135.176 53.367 135.031 53.367 cv
131.566 53.367 li
131.566 53.562 li
131.566 54.188 131.973 54.508 132.617 54.508 cv
133.23 54.508 133.734 54.324 134.172 54.066 cv
134.281 53.98 134.379 54.004 134.453 54.113 cv
135.09 54.961 li
135.164 55.07 135.164 55.18 135.055 55.266 cv
134.43 55.742 133.637 56.074 132.559 56.074 cv
130.965 56.074 129.684 55.227 129.684 53.527 cv
129.684 51.984 li
129.684 50.16 130.965 49.379 132.52 49.379 cv
134.027 49.379 135.25 50.137 135.25 51.984 cv
cp
f
138.582 56.074 mo
137.137 56.074 136.316 55.191 136.316 53.699 cv
136.316 47.383 li
136.316 47.238 136.391 47.164 136.539 47.164 cv
137.98 47.164 li
138.117 47.164 138.191 47.238 138.191 47.383 cv
138.191 53.465 li
138.191 54.078 138.434 54.359 138.91 54.359 cv
139.031 54.359 139.168 54.359 139.289 54.348 cv
139.438 54.336 139.523 54.406 139.523 54.555 cv
139.523 55.777 li
139.523 55.891 139.473 55.988 139.391 56 cv
139.18 56.035 138.91 56.074 138.582 56.074 cv
f
144.801 54.141 mo
148.434 54.141 li
148.57 54.141 148.656 54.211 148.656 54.348 cv
148.656 55.691 li
148.656 55.84 148.57 55.914 148.434 55.914 cv
143.051 55.914 li
142.902 55.914 142.828 55.84 142.828 55.691 cv
142.828 47.383 li
142.828 47.234 142.902 47.164 143.051 47.164 cv
148.238 47.164 li
148.387 47.164 148.457 47.234 148.457 47.383 cv
148.457 48.73 li
148.457 48.863 148.387 48.938 148.238 48.938 cv
144.801 48.938 li
144.801 50.617 li
147.836 50.617 li
147.98 50.617 148.055 50.688 148.055 50.82 cv
148.055 52.145 li
148.055 52.277 147.98 52.352 147.836 52.352 cv
144.801 52.352 li
cp
f
152.438 56.074 mo
150.59 56.074 149.539 55.043 149.539 53.406 cv
149.539 52.023 li
149.539 50.406 150.602 49.379 152.426 49.379 cv
153.133 49.379 153.809 49.574 154.434 49.953 cv
154.543 50.027 154.566 50.137 154.492 50.262 cv
153.844 51.238 li
153.77 51.359 153.672 51.375 153.539 51.312 cv
153.223 51.141 152.867 51.031 152.512 51.031 cv
151.836 51.031 151.434 51.398 151.434 52.023 cv
151.434 53.406 li
151.434 54.09 151.863 54.422 152.5 54.422 cv
152.914 54.422 153.309 54.297 153.672 54.066 cv
153.797 53.992 153.906 54.016 153.98 54.129 cv
154.641 55.105 li
154.711 55.215 154.703 55.324 154.605 55.402 cv
153.98 55.84 153.281 56.074 152.438 56.074 cv
f
160.797 49.551 mo
160.945 49.551 161.02 49.625 161.02 49.758 cv
161.02 55.324 li
161.02 55.449 160.969 55.535 160.859 55.582 cv
160.125 55.887 159.195 56.074 158.336 56.074 cv
156.488 56.074 155.449 55.082 155.449 53.234 cv
155.449 49.758 li
155.449 49.625 155.523 49.551 155.672 49.551 cv
157.113 49.551 li
157.262 49.551 157.336 49.625 157.336 49.758 cv
157.336 53.246 li
157.336 54.141 157.699 54.422 158.336 54.422 cv
158.656 54.422 158.965 54.371 159.145 54.297 cv
159.145 49.758 li
159.145 49.625 159.219 49.551 159.352 49.551 cv
cp
f
164.824 54.555 mo
165.105 54.555 165.438 54.508 165.66 54.457 cv
165.66 53.379 li
165.414 53.332 165.082 53.309 164.812 53.309 cv
164.141 53.309 163.848 53.527 163.848 53.918 cv
163.848 54.348 164.238 54.555 164.824 54.555 cv
164.848 49.379 mo
166.539 49.379 167.531 50.262 167.531 52.117 cv
167.531 55.473 li
167.531 55.598 167.469 55.68 167.348 55.719 cv
166.625 55.938 165.66 56.074 164.824 56.074 cv
163.062 56.074 161.949 55.41 161.949 53.969 cv
161.949 52.695 162.953 52.059 164.617 52.059 cv
164.996 52.059 165.352 52.094 165.66 52.133 cv
165.66 52.012 li
165.66 51.359 165.426 51.004 164.629 51.004 cv
164.09 51.004 163.457 51.152 163.102 51.348 cv
162.988 51.41 162.867 51.398 162.809 51.277 cv
162.305 50.32 li
162.246 50.199 162.246 50.113 162.328 50.051 cv
162.906 49.684 163.797 49.379 164.848 49.379 cv
f
171.547 54.422 mo
171.852 54.422 172.156 54.371 172.391 54.285 cv
172.391 51.215 li
172.156 51.094 171.863 51.008 171.535 51.008 cv
170.871 51.008 170.52 51.352 170.52 52.059 cv
170.52 53.332 li
170.52 54.102 170.883 54.422 171.547 54.422 cv
172.391 47.383 mo
172.391 47.238 172.465 47.164 172.598 47.164 cv
174.043 47.164 li
174.188 47.164 174.262 47.238 174.262 47.383 cv
174.262 55.375 li
174.262 55.5 174.215 55.582 174.09 55.633 cv
173.344 55.902 172.34 56.074 171.508 56.074 cv
169.797 56.074 168.609 55.043 168.609 53.293 cv
168.609 52.082 li
168.609 50.43 169.684 49.379 171.254 49.379 cv
171.668 49.379 172.082 49.477 172.391 49.586 cv
cp
f
178.34 54.422 mo
178.988 54.422 179.344 54.09 179.344 53.48 cv
179.344 52.012 li
179.344 51.398 178.988 51.043 178.34 51.043 cv
177.691 51.043 177.336 51.398 177.336 52.012 cv
177.336 53.48 li
177.336 54.09 177.691 54.422 178.34 54.422 cv
178.34 56.074 mo
176.539 56.074 175.43 55.094 175.43 53.48 cv
175.43 52.012 li
175.43 50.371 176.539 49.379 178.34 49.379 cv
180.129 49.379 181.238 50.371 181.238 52.012 cv
181.238 53.48 li
181.238 55.094 180.129 56.074 178.34 56.074 cv
f
182.613 55.914 mo
182.465 55.914 182.391 55.84 182.391 55.691 cv
182.391 50.137 li
182.391 50.027 182.441 49.941 182.551 49.879 cv
183.223 49.551 184.008 49.379 184.801 49.379 cv
185.172 49.379 185.551 49.426 185.992 49.5 cv
186.125 49.523 186.188 49.598 186.188 49.734 cv
186.188 50.859 li
186.188 51.008 186.098 51.078 185.953 51.055 cv
185.711 51.02 185.438 51.008 185.195 51.008 cv
184.828 51.008 184.496 51.066 184.266 51.164 cv
184.266 55.691 li
184.266 55.84 184.191 55.914 184.059 55.914 cv
cp
f
50.277 28.273 mo
47.344 28.555 44.625 29.562 42.305 31.125 cv
41.992 31.332 41.688 31.555 41.391 31.785 cv
42.512 32.902 li
42.812 32.676 43.121 32.461 43.438 32.258 cv
44.824 31.363 46.367 30.68 48.008 30.258 cv
48.008 39.969 li
48.793 40.754 li
48.793 30.082 li
49.309 29.977 49.832 29.895 50.363 29.844 cv
50.363 42.324 li
51.934 43.895 li
53.504 42.324 li
53.504 29.844 li
54.035 29.895 54.559 29.977 55.074 30.082 cv
55.074 40.754 li
55.859 39.969 li
55.859 30.258 li
57.5 30.68 59.043 31.363 60.43 32.258 cv
60.746 32.461 61.055 32.676 61.355 32.902 cv
62.477 31.785 li
62.18 31.555 61.875 31.332 61.562 31.125 cv
59.242 29.562 56.523 28.555 53.59 28.273 cv
51.934 23.836 li
cp
.785794 .233829 0 0 cmyk
f
53.59 62.656 mo
56.523 62.375 59.242 61.367 61.566 59.805 cv
61.875 59.598 62.18 59.375 62.477 59.145 cv
61.355 58.027 li
61.055 58.25 60.746 58.469 60.43 58.672 cv
59.043 59.566 57.5 60.25 55.859 60.672 cv
55.859 50.961 li
55.074 50.176 li
55.074 60.848 li
54.559 60.953 54.035 61.035 53.504 61.086 cv
53.504 48.605 li
51.934 47.035 li
50.363 48.605 li
50.363 61.086 li
49.832 61.035 49.309 60.953 48.793 60.848 cv
48.793 50.176 li
48.008 50.961 li
48.008 60.672 li
46.367 60.25 44.824 59.566 43.438 58.672 cv
43.121 58.469 42.812 58.25 42.512 58.027 cv
41.391 59.148 li
41.691 59.375 41.992 59.598 42.305 59.805 cv
44.625 61.367 47.344 62.375 50.277 62.656 cv
51.934 67.094 li
cp
f
34.742 47.121 mo
35.023 50.055 36.031 52.773 37.594 55.094 cv
37.801 55.406 38.023 55.711 38.254 56.008 cv
39.371 54.887 li
39.148 54.586 38.93 54.277 38.727 53.961 cv
37.832 52.574 37.148 51.031 36.727 49.391 cv
46.441 49.391 li
47.227 48.605 li
36.551 48.605 li
36.445 48.09 36.363 47.566 36.312 47.035 cv
48.793 47.035 li
50.363 45.465 li
48.793 43.895 li
36.312 43.895 li
36.363 43.363 36.445 42.84 36.551 42.324 cv
47.227 42.324 li
46.441 41.539 li
36.727 41.539 li
37.148 39.898 37.832 38.355 38.727 36.969 cv
38.93 36.652 39.145 36.344 39.371 36.043 cv
38.25 34.922 li
38.023 35.223 37.801 35.523 37.594 35.836 cv
36.031 38.156 35.023 40.875 34.742 43.809 cv
30.305 45.465 li
cp
f
69.125 47.121 mo
68.848 50.055 67.836 52.773 66.273 55.094 cv
66.066 55.406 65.848 55.711 65.617 56.008 cv
64.496 54.887 li
64.723 54.586 64.938 54.277 65.141 53.961 cv
66.035 52.574 66.719 51.031 67.141 49.391 cv
57.426 49.391 li
56.641 48.605 li
67.32 48.605 li
67.426 48.09 67.504 47.566 67.555 47.035 cv
55.074 47.035 li
53.504 45.465 li
55.074 43.895 li
67.555 43.895 li
67.504 43.363 67.426 42.84 67.32 42.324 cv
56.641 42.324 li
57.426 41.539 li
67.141 41.539 li
66.719 39.898 66.035 38.355 65.141 36.969 cv
64.938 36.652 64.723 36.344 64.496 36.043 cv
65.617 34.922 li
65.848 35.223 66.066 35.523 66.273 35.836 cv
67.836 38.156 68.848 40.875 69.125 43.809 cv
73.562 45.465 li
cp
f
792.148 209.363 mo
791.973 209.188 li
791.973 75.5748 li
792.148 75.1051 li
803.223 104.816 li
822.863 106.695 841.062 113.449 856.59 123.906 cv
858.676 125.301 860.719 126.773 862.691 128.297 cv
855.195 135.809 li
853.188 134.285 851.117 132.859 849.012 131.484 cv
839.715 125.492 829.418 120.93 818.426 118.094 cv
818.426 183.086 li
813.164 188.348 li
813.164 116.914 li
809.715 116.199 806.219 115.664 802.656 115.324 cv
802.656 198.855 li
792.148 209.363 li
.140392 .120784 .120784 .0980392 cmyk
f
791.973 209.188 mo
781.637 198.855 li
781.637 115.324 li
778.078 115.664 774.578 116.199 771.129 116.914 cv
771.129 188.348 li
765.867 183.102 li
765.867 118.094 li
754.875 120.945 744.578 125.492 735.281 131.484 cv
733.16 132.859 731.105 134.285 729.082 135.809 cv
721.602 128.312 li
723.574 126.773 725.617 125.301 727.703 123.906 cv
743.234 113.449 761.43 106.695 781.07 104.816 cv
791.973 75.5748 li
791.973 209.188 li
.133333 .0980392 .105882 0 cmyk
f
792.148 364.625 mo
791.973 364.156 li
791.973 230.558 li
792.148 230.383 li
802.656 240.891 li
802.656 324.422 li
806.219 324.066 809.715 323.531 813.164 322.836 cv
813.164 251.398 li
818.426 256.645 li
818.426 321.637 li
829.402 318.801 839.715 314.254 849.012 308.262 cv
851.133 306.887 853.188 305.461 855.195 303.938 cv
862.691 311.434 li
860.719 312.973 858.676 314.445 856.59 315.84 cv
841.062 326.301 822.863 333.051 803.223 334.93 cv
792.148 364.625 li
.140392 .120784 .120784 .0980392 cmyk
f
791.973 364.156 mo
781.07 334.93 li
761.43 333.051 743.234 326.301 727.703 315.84 cv
725.617 314.445 723.594 312.973 721.602 311.434 cv
729.098 303.938 li
731.105 305.461 733.16 306.887 735.281 308.262 cv
744.578 314.254 754.875 318.801 765.867 321.637 cv
765.867 256.645 li
771.129 251.398 li
771.129 322.836 li
774.578 323.531 778.078 324.066 781.637 324.422 cv
781.637 240.891 li
791.973 230.558 li
791.973 364.156 li
.133333 .0980392 .105882 0 cmyk
f
700.586 290.418 mo
699.047 288.426 697.574 286.402 696.18 284.316 cv
685.719 268.789 678.969 250.59 677.09 230.949 cv
647.379 219.867 li
677.09 208.777 li
678.969 189.152 685.719 170.938 696.164 155.41 cv
697.574 153.34 699.047 151.297 700.566 149.324 cv
708.066 156.805 li
706.559 158.828 705.117 160.883 703.758 163.004 cv
697.766 172.297 693.199 182.598 690.367 193.59 cv
755.391 193.59 li
760.637 198.852 li
689.188 198.852 li
688.473 202.301 687.938 205.797 687.598 209.359 cv
771.129 209.359 li
781.637 219.867 li
771.129 230.379 li
687.598 230.379 li
687.938 233.938 688.473 237.438 689.188 240.887 cv
760.637 240.887 li
755.391 246.148 li
690.367 246.137 li
693.199 257.129 697.766 267.445 703.758 276.738 cv
705.117 278.859 706.559 280.914 708.082 282.922 cv
700.586 290.418 li
f
0 420.219 mo
791.973 420.219 li
791.973 445.559 li
0 445.559 li
cp
.78143 .218967 0 0 cmyk
f
0 0 mo
792.035 0 li
792.035 12.012 li
0 12.012 li
cp
1 .894224 .089662 .0632334 cmyk
f
26.23 436.762 mo
23.965 430.527 li
25.684 430.527 li
27.543 435.887 li
26.73 435.887 li
28.684 430.527 li
30.215 430.527 li
32.105 435.887 li
31.293 435.887 li
33.215 430.527 li
34.809 430.527 li
32.559 436.762 li
30.809 436.762 li
29.152 432.152 li
29.684 432.152 li
27.965 436.762 li
cp
0 0 0 0 cmyk
f
36.941 436.762 mo
34.676 430.527 li
36.395 430.527 li
38.254 435.887 li
37.441 435.887 li
39.395 430.527 li
40.926 430.527 li
42.816 435.887 li
42.004 435.887 li
43.926 430.527 li
45.52 430.527 li
43.27 436.762 li
41.52 436.762 li
39.863 432.152 li
40.395 432.152 li
38.676 436.762 li
cp
f
47.656 436.762 mo
45.391 430.527 li
47.109 430.527 li
48.969 435.887 li
48.156 435.887 li
50.109 430.527 li
51.641 430.527 li
53.531 435.887 li
52.719 435.887 li
54.641 430.527 li
56.234 430.527 li
53.984 436.762 li
52.234 436.762 li
50.578 432.152 li
51.109 432.152 li
49.391 436.762 li
cp
f
57.422 436.855 mo
57.098 436.855 56.828 436.754 56.609 436.543 cv
56.391 436.324 56.281 436.051 56.281 435.715 cv
56.281 435.383 56.391 435.117 56.609 434.918 cv
56.828 434.711 57.098 434.605 57.422 434.605 cv
57.723 434.605 57.984 434.711 58.203 434.918 cv
58.43 435.117 58.547 435.383 58.547 435.715 cv
58.547 436.051 58.43 436.324 58.203 436.543 cv
57.984 436.754 57.723 436.855 57.422 436.855 cv
cp
f
63.445 436.855 mo
62.922 436.855 62.465 436.742 62.07 436.512 cv
61.672 436.273 61.367 435.918 61.148 435.449 cv
60.93 434.973 60.82 434.371 60.82 433.652 cv
60.82 432.914 60.922 432.309 61.133 431.84 cv
61.34 431.363 61.641 431.008 62.039 430.777 cv
62.434 430.551 62.902 430.434 63.445 430.434 cv
64.039 430.434 64.57 430.57 65.039 430.84 cv
65.508 431.102 65.875 431.473 66.148 431.949 cv
66.418 432.43 66.555 432.996 66.555 433.652 cv
66.555 434.301 66.418 434.863 66.148 435.34 cv
65.875 435.82 65.508 436.195 65.039 436.465 cv
64.57 436.727 64.039 436.855 63.445 436.855 cv
cp
59.773 439.012 mo
59.773 430.527 li
61.492 430.527 li
61.492 431.809 li
61.461 433.652 li
61.57 435.496 li
61.57 439.012 li
cp
63.133 435.371 mo
63.434 435.371 63.703 435.305 63.945 435.168 cv
64.184 435.035 64.371 434.836 64.508 434.574 cv
64.652 434.316 64.727 434.008 64.727 433.652 cv
64.727 433.289 64.652 432.977 64.508 432.715 cv
64.371 432.457 64.184 432.258 63.945 432.121 cv
63.703 431.988 63.434 431.918 63.133 431.918 cv
62.828 431.918 62.559 431.988 62.32 432.121 cv
62.09 432.258 61.902 432.457 61.758 432.715 cv
61.609 432.977 61.539 433.289 61.539 433.652 cv
61.539 434.008 61.609 434.316 61.758 434.574 cv
61.902 434.836 62.09 435.035 62.32 435.168 cv
62.559 435.305 62.828 435.371 63.133 435.371 cv
cp
f
70.402 436.855 mo
69.879 436.855 69.418 436.758 69.012 436.559 cv
68.605 436.363 68.285 436.055 68.059 435.637 cv
67.84 435.223 67.73 434.691 67.73 434.043 cv
67.73 430.527 li
69.543 430.527 li
69.543 433.777 li
69.543 434.301 69.652 434.684 69.871 434.934 cv
70.09 435.176 70.395 435.293 70.793 435.293 cv
71.074 435.293 71.324 435.238 71.543 435.121 cv
71.762 434.996 71.934 434.809 72.059 434.559 cv
72.184 434.309 72.246 433.992 72.246 433.605 cv
72.246 430.527 li
74.059 430.527 li
74.059 436.762 li
72.324 436.762 li
72.324 435.043 li
72.652 435.543 li
72.441 435.973 72.137 436.301 71.73 436.527 cv
71.324 436.746 70.879 436.855 70.402 436.855 cv
cp
f
78.75 436.855 mo
78.082 436.855 77.484 436.723 76.953 436.449 cv
76.43 436.168 76.02 435.789 75.719 435.309 cv
75.426 434.82 75.281 434.262 75.281 433.637 cv
75.281 433.012 75.426 432.461 75.719 431.98 cv
76.02 431.504 76.43 431.129 76.953 430.855 cv
77.484 430.574 78.082 430.434 78.75 430.434 cv
79.406 430.434 79.977 430.57 80.469 430.84 cv
80.957 431.113 81.316 431.504 81.547 432.012 cv
80.156 432.777 li
79.988 432.488 79.781 432.273 79.531 432.137 cv
79.289 431.992 79.031 431.918 78.75 431.918 cv
78.438 431.918 78.156 431.988 77.906 432.121 cv
77.664 432.258 77.473 432.457 77.328 432.715 cv
77.18 432.965 77.109 433.273 77.109 433.637 cv
77.109 434.004 77.18 434.316 77.328 434.574 cv
77.473 434.836 77.664 435.035 77.906 435.168 cv
78.156 435.305 78.438 435.371 78.75 435.371 cv
79.031 435.371 79.289 435.305 79.531 435.168 cv
79.781 435.035 79.988 434.816 80.156 434.512 cv
81.547 435.277 li
81.316 435.777 80.957 436.168 80.469 436.449 cv
79.977 436.723 79.406 436.855 78.75 436.855 cv
cp
f
85.602 436.855 mo
84.891 436.855 84.266 436.723 83.727 436.449 cv
83.195 436.168 82.781 435.785 82.492 435.293 cv
82.199 434.805 82.055 434.254 82.055 433.637 cv
82.055 433.012 82.195 432.461 82.477 431.98 cv
82.766 431.504 83.164 431.129 83.664 430.855 cv
84.172 430.574 84.746 430.434 85.383 430.434 cv
85.984 430.434 86.531 430.566 87.023 430.824 cv
87.512 431.086 87.898 431.461 88.18 431.949 cv
88.469 432.43 88.617 433.004 88.617 433.668 cv
88.617 433.742 88.609 433.824 88.602 433.918 cv
88.602 434.152 li
83.523 434.152 li
83.523 433.09 li
87.633 433.09 li
86.945 433.418 li
86.945 433.098 86.875 432.816 86.742 432.574 cv
86.605 432.324 86.422 432.133 86.195 431.996 cv
85.965 431.863 85.695 431.793 85.383 431.793 cv
85.078 431.793 84.809 431.863 84.57 431.996 cv
84.328 432.133 84.141 432.324 84.008 432.574 cv
83.883 432.816 83.82 433.102 83.82 433.434 cv
83.82 433.715 li
83.82 434.059 83.891 434.363 84.039 434.621 cv
84.195 434.871 84.406 435.066 84.68 435.199 cv
84.961 435.336 85.289 435.402 85.664 435.402 cv
85.996 435.402 86.289 435.355 86.539 435.262 cv
86.789 435.16 87.016 435.004 87.227 434.793 cv
88.195 435.84 li
87.902 436.176 87.539 436.43 87.102 436.605 cv
86.672 436.77 86.172 436.855 85.602 436.855 cv
cp
f
90.531 436.855 mo
90.207 436.855 89.938 436.754 89.719 436.543 cv
89.5 436.324 89.391 436.051 89.391 435.715 cv
89.391 435.383 89.5 435.117 89.719 434.918 cv
89.938 434.711 90.207 434.605 90.531 434.605 cv
90.832 434.605 91.094 434.711 91.312 434.918 cv
91.539 435.117 91.656 435.383 91.656 435.715 cv
91.656 436.051 91.539 436.324 91.312 436.543 cv
91.094 436.754 90.832 436.855 90.531 436.855 cv
cp
f
95.883 436.855 mo
95.172 436.855 94.547 436.723 94.008 436.449 cv
93.477 436.168 93.062 435.785 92.773 435.293 cv
92.48 434.805 92.336 434.254 92.336 433.637 cv
92.336 433.012 92.477 432.461 92.758 431.98 cv
93.047 431.504 93.445 431.129 93.945 430.855 cv
94.453 430.574 95.027 430.434 95.664 430.434 cv
96.266 430.434 96.812 430.566 97.305 430.824 cv
97.793 431.086 98.18 431.461 98.461 431.949 cv
98.75 432.43 98.898 433.004 98.898 433.668 cv
98.898 433.742 98.891 433.824 98.883 433.918 cv
98.883 434.152 li
93.805 434.152 li
93.805 433.09 li
97.914 433.09 li
97.227 433.418 li
97.227 433.098 97.156 432.816 97.023 432.574 cv
96.887 432.324 96.703 432.133 96.477 431.996 cv
96.246 431.863 95.977 431.793 95.664 431.793 cv
95.359 431.793 95.09 431.863 94.852 431.996 cv
94.609 432.133 94.422 432.324 94.289 432.574 cv
94.164 432.816 94.102 433.102 94.102 433.434 cv
94.102 433.715 li
94.102 434.059 94.172 434.363 94.32 434.621 cv
94.477 434.871 94.688 435.066 94.961 435.199 cv
95.242 435.336 95.57 435.402 95.945 435.402 cv
96.277 435.402 96.57 435.355 96.82 435.262 cv
97.07 435.16 97.297 435.004 97.508 434.793 cv
98.477 435.84 li
98.184 436.176 97.82 436.43 97.383 436.605 cv
96.953 436.77 96.453 436.855 95.883 436.855 cv
cp
f
102.797 436.855 mo
102.211 436.855 101.68 436.727 101.203 436.465 cv
100.734 436.195 100.363 435.82 100.094 435.34 cv
99.82 434.863 99.688 434.293 99.688 433.637 cv
99.688 432.992 99.82 432.43 100.094 431.949 cv
100.363 431.473 100.734 431.102 101.203 430.84 cv
101.68 430.57 102.211 430.434 102.797 430.434 cv
103.316 430.434 103.773 430.555 104.172 430.793 cv
104.566 431.023 104.875 431.371 105.094 431.84 cv
105.312 432.309 105.422 432.91 105.422 433.637 cv
105.422 434.367 105.316 434.973 105.109 435.449 cv
104.898 435.93 104.598 436.285 104.203 436.512 cv
103.805 436.742 103.336 436.855 102.797 436.855 cv
cp
103.109 435.371 mo
103.398 435.371 103.664 435.305 103.906 435.168 cv
104.145 435.035 104.332 434.836 104.469 434.574 cv
104.613 434.305 104.688 433.992 104.688 433.637 cv
104.688 433.273 104.613 432.965 104.469 432.715 cv
104.332 432.457 104.145 432.258 103.906 432.121 cv
103.664 431.988 103.398 431.918 103.109 431.918 cv
102.805 431.918 102.535 431.988 102.297 432.121 cv
102.055 432.258 101.863 432.457 101.719 432.715 cv
101.582 432.965 101.516 433.273 101.516 433.637 cv
101.516 433.992 101.582 434.305 101.719 434.574 cv
101.863 434.836 102.055 435.035 102.297 435.168 cv
102.535 435.305 102.805 435.371 103.109 435.371 cv
cp
104.75 436.762 mo
104.75 435.48 li
104.781 433.637 li
104.656 431.777 li
104.656 428.152 li
106.469 428.152 li
106.469 436.762 li
cp
f
110.777 436.855 mo
110.254 436.855 109.793 436.758 109.387 436.559 cv
108.98 436.363 108.66 436.055 108.434 435.637 cv
108.215 435.223 108.105 434.691 108.105 434.043 cv
108.105 430.527 li
109.918 430.527 li
109.918 433.777 li
109.918 434.301 110.027 434.684 110.246 434.934 cv
110.465 435.176 110.77 435.293 111.168 435.293 cv
111.449 435.293 111.699 435.238 111.918 435.121 cv
112.137 434.996 112.309 434.809 112.434 434.559 cv
112.559 434.309 112.621 433.992 112.621 433.605 cv
112.621 430.527 li
114.434 430.527 li
114.434 436.762 li
112.699 436.762 li
112.699 435.043 li
113.027 435.543 li
112.816 435.973 112.512 436.301 112.105 436.527 cv
111.699 436.746 111.254 436.855 110.777 436.855 cv
cp
f
116.809 436.855 mo
116.484 436.855 116.215 436.754 115.996 436.543 cv
115.777 436.324 115.668 436.051 115.668 435.715 cv
115.668 435.383 115.777 435.117 115.996 434.918 cv
116.215 434.711 116.484 434.605 116.809 434.605 cv
117.109 434.605 117.371 434.711 117.59 434.918 cv
117.816 435.117 117.934 435.383 117.934 435.715 cv
117.934 436.051 117.816 436.324 117.59 436.543 cv
117.371 436.754 117.109 436.855 116.809 436.855 cv
cp
f
122.164 436.855 mo
121.453 436.855 120.828 436.723 120.289 436.449 cv
119.758 436.168 119.344 435.785 119.055 435.293 cv
118.762 434.805 118.617 434.254 118.617 433.637 cv
118.617 433.012 118.758 432.461 119.039 431.98 cv
119.328 431.504 119.727 431.129 120.227 430.855 cv
120.734 430.574 121.309 430.434 121.945 430.434 cv
122.547 430.434 123.094 430.566 123.586 430.824 cv
124.074 431.086 124.461 431.461 124.742 431.949 cv
125.031 432.43 125.18 433.004 125.18 433.668 cv
125.18 433.742 125.172 433.824 125.164 433.918 cv
125.164 434.152 li
120.086 434.152 li
120.086 433.09 li
124.195 433.09 li
123.508 433.418 li
123.508 433.098 123.438 432.816 123.305 432.574 cv
123.168 432.324 122.984 432.133 122.758 431.996 cv
122.527 431.863 122.258 431.793 121.945 431.793 cv
121.641 431.793 121.371 431.863 121.133 431.996 cv
120.891 432.133 120.703 432.324 120.57 432.574 cv
120.445 432.816 120.383 433.102 120.383 433.434 cv
120.383 433.715 li
120.383 434.059 120.453 434.363 120.602 434.621 cv
120.758 434.871 120.969 435.066 121.242 435.199 cv
121.523 435.336 121.852 435.402 122.227 435.402 cv
122.559 435.402 122.852 435.355 123.102 435.262 cv
123.352 435.16 123.578 435.004 123.789 434.793 cv
124.758 435.84 li
124.465 436.176 124.102 436.43 123.664 436.605 cv
123.234 436.77 122.734 436.855 122.164 436.855 cv
cp
f
129.402 436.855 mo
128.734 436.855 128.137 436.723 127.605 436.449 cv
127.082 436.168 126.672 435.789 126.371 435.309 cv
126.078 434.82 125.934 434.262 125.934 433.637 cv
125.934 433.012 126.078 432.461 126.371 431.98 cv
126.672 431.504 127.082 431.129 127.605 430.855 cv
128.137 430.574 128.734 430.434 129.402 430.434 cv
130.059 430.434 130.629 430.57 131.121 430.84 cv
131.609 431.113 131.969 431.504 132.199 432.012 cv
130.809 432.777 li
130.641 432.488 130.434 432.273 130.184 432.137 cv
129.941 431.992 129.684 431.918 129.402 431.918 cv
129.09 431.918 128.809 431.988 128.559 432.121 cv
128.316 432.258 128.125 432.457 127.98 432.715 cv
127.832 432.965 127.762 433.273 127.762 433.637 cv
127.762 434.004 127.832 434.316 127.98 434.574 cv
128.125 434.836 128.316 435.035 128.559 435.168 cv
128.809 435.305 129.09 435.371 129.402 435.371 cv
129.684 435.371 129.941 435.305 130.184 435.168 cv
130.434 435.035 130.641 434.816 130.809 434.512 cv
132.199 435.277 li
131.969 435.777 131.609 436.168 131.121 436.449 cv
130.629 436.723 130.059 436.855 129.402 436.855 cv
cp
f
679.172 433.332 mo
680.41 433.332 li
680.41 438.441 li
680.41 438.543 680.492 438.625 680.594 438.625 cv
682.699 438.625 li
682.801 438.625 682.879 438.543 682.879 438.441 cv
682.879 433.359 li
684.309 433.359 li
684.398 433.359 684.477 433.289 684.488 433.195 cv
684.707 431.316 li
684.66 431.172 li
684.523 431.113 li
682.879 431.113 li
682.879 429.934 li
682.879 429.578 683.07 429.398 683.449 429.398 cv
684.523 429.398 li
684.625 429.398 684.707 429.316 684.707 429.215 cv
684.707 427.488 li
684.707 427.387 684.625 427.305 684.523 427.305 cv
683.043 427.305 li
682.977 427.305 li
682.719 427.305 681.824 427.355 681.121 428.004 cv
680.336 428.723 680.445 429.582 680.473 429.734 cv
680.473 431.113 li
679.168 431.113 li
679.07 431.113 678.988 431.195 678.988 431.293 cv
678.988 433.152 li
678.988 433.254 679.066 433.336 679.168 433.336 cv
cp
f
694.422 438.625 mo
699.75 438.625 702.664 434.281 702.664 430.512 cv
702.664 430.387 702.664 430.266 702.656 430.141 cv
703.223 429.738 703.711 429.238 704.102 428.668 cv
703.574 428.898 703.012 429.047 702.438 429.113 cv
703.043 428.758 703.492 428.199 703.711 427.539 cv
703.141 427.871 702.52 428.105 701.871 428.23 cv
700.773 427.082 698.938 427.027 697.773 428.105 cv
697.02 428.801 696.699 429.84 696.934 430.832 cv
694.605 430.715 692.438 429.633 690.965 427.852 cv
690.195 429.156 690.59 430.82 691.863 431.66 cv
691.402 431.645 690.949 431.523 690.547 431.301 cv
690.547 431.336 li
690.547 432.695 691.52 433.863 692.871 434.133 cv
692.445 434.246 691.996 434.266 691.562 434.184 cv
691.941 435.344 693.031 436.141 694.27 436.164 cv
693.242 436.957 691.977 437.387 690.672 437.387 cv
690.441 437.387 690.211 437.371 689.98 437.344 cv
691.309 438.184 692.848 438.625 694.422 438.625 cv
ef
712.715 427.312 mo
711.789 427.355 710.984 427.582 710.336 428.227 cv
709.688 428.875 709.465 429.68 709.422 430.598 cv
709.395 431.172 709.242 435.496 709.684 436.629 cv
709.98 437.395 710.57 437.98 711.34 438.281 cv
711.703 438.422 712.113 438.516 712.715 438.543 cv
717.758 438.77 719.629 438.648 720.418 436.629 cv
720.559 436.27 720.652 435.859 720.68 435.258 cv
720.91 430.199 720.641 429.105 719.762 428.227 cv
719.066 427.531 718.246 427.059 712.715 427.312 cv
712.762 437.527 mo
712.211 437.5 711.91 437.41 711.711 437.332 cv
711.207 437.137 710.828 436.762 710.637 436.262 cv
710.301 435.398 710.41 431.305 710.441 430.645 cv
710.469 429.996 710.602 429.402 711.059 428.945 cv
711.625 428.379 712.355 428.105 717.34 428.328 cv
717.988 428.359 718.582 428.488 719.043 428.945 cv
719.609 429.512 719.891 430.246 719.66 435.211 cv
719.637 435.762 719.543 436.062 719.465 436.262 cv
718.953 437.574 717.773 437.758 712.762 437.527 cv
717.395 429.91 mo
717.395 430.285 717.699 430.59 718.074 430.59 cv
718.449 430.59 718.754 430.285 718.754 429.91 cv
718.754 429.539 718.449 429.234 718.074 429.234 cv
717.699 429.234 717.395 429.539 717.395 429.91 cv
712.145 432.926 mo
712.145 434.531 713.445 435.828 715.051 435.828 cv
716.656 435.828 717.961 434.531 717.961 432.926 cv
717.961 431.324 716.656 430.027 715.051 430.027 cv
713.445 430.027 712.145 431.324 712.145 432.926 cv
713.164 432.926 mo
713.164 431.887 714.008 431.043 715.051 431.043 cv
716.094 431.043 716.938 431.887 716.938 432.926 cv
716.938 433.969 716.094 434.812 715.051 434.812 cv
714.008 434.812 713.164 433.969 713.164 432.926 cv
ef
728.715 438.625 mo
728.715 431.008 li
726.184 431.008 li
726.184 438.625 li
cp
727.449 429.969 mo
728.332 429.969 728.879 429.383 728.879 428.652 cv
728.863 427.906 728.332 427.336 727.465 427.336 cv
726.598 427.336 726.031 427.906 726.031 428.652 cv
726.031 429.383 726.582 429.969 727.434 429.969 cv
cp
730.113 438.625 mo
730.113 438.625 730.148 431.723 730.113 431.008 cv
732.648 431.008 li
732.648 432.113 li
732.629 432.113 li
732.965 431.594 733.562 430.828 734.93 430.828 cv
736.594 430.828 737.844 431.918 737.844 434.258 cv
737.844 438.625 li
735.312 438.625 li
735.312 434.551 li
735.312 433.527 734.945 432.828 734.027 432.828 cv
733.328 432.828 732.914 433.301 732.73 433.754 cv
732.664 433.918 732.648 434.145 732.648 434.371 cv
732.648 438.625 li
cp
ef
749.438 435.133 mo
749.438 430.695 li
751.016 431.438 752.234 432.152 753.68 432.926 cv
752.488 433.586 751.016 434.324 749.438 435.133 cv
758.223 428.484 mo
757.949 428.129 757.484 427.848 756.992 427.758 cv
755.543 427.48 746.496 427.48 745.047 427.758 cv
744.652 427.832 744.301 428.008 743.996 428.289 cv
742.723 429.473 743.121 435.82 743.43 436.848 cv
743.559 437.293 743.727 437.613 743.938 437.824 cv
744.207 438.102 744.578 438.293 745.004 438.379 cv
746.199 438.625 752.348 438.766 756.969 438.418 cv
757.395 438.344 757.77 438.145 758.066 437.855 cv
759.246 436.676 759.164 429.973 758.223 428.484 cv
ef
769.285 427.531 mo
769.891 427.52 770.492 427.523 771.094 427.52 cv
771.113 428.273 771.418 428.949 771.902 429.449 cv
772.426 429.922 773.105 430.227 773.855 430.277 cv
773.867 430.277 li
773.867 432.145 li
773.156 432.125 772.492 431.961 771.891 431.684 cv
771.922 431.695 li
771.633 431.555 771.387 431.41 771.152 431.25 cv
771.172 431.266 li
771.168 432.617 771.176 433.969 771.164 435.312 cv
771.125 436 770.895 436.625 770.531 437.148 cv
770.539 437.137 li
769.926 438.012 768.934 438.59 767.809 438.621 cv
767.805 438.621 li
767.648 438.625 li
767.008 438.625 766.41 438.449 765.898 438.137 cv
765.914 438.145 li
764.984 437.586 764.344 436.629 764.227 435.52 cv
764.227 435.504 li
764.215 435.273 764.211 435.039 764.219 434.812 cv
764.402 433.043 765.883 431.676 767.688 431.676 cv
767.891 431.676 768.09 431.691 768.281 431.727 cv
768.262 431.723 li
768.27 432.406 768.242 433.094 768.242 433.777 cv
768.086 433.719 767.906 433.688 767.715 433.688 cv
767.023 433.688 766.438 434.129 766.219 434.746 cv
766.215 434.758 li
766.164 434.914 766.137 435.098 766.137 435.285 cv
766.152 435.512 li
766.148 435.504 li
766.273 436.262 766.922 436.832 767.707 436.832 cv
767.773 436.832 li
767.77 436.832 li
768.312 436.816 768.781 436.523 769.047 436.094 cv
769.051 436.086 li
769.148 435.949 769.219 435.781 769.242 435.602 cv
769.242 435.594 li
769.289 434.766 769.27 433.941 769.273 433.113 cv
769.277 431.25 769.27 429.387 769.281 427.527 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
