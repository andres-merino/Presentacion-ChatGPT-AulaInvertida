%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: inicioECFM.pdf
%%Creator: Adobe Acrobat 23.8.0
%%For: AEMERINOT
%%CreationDate: 22/02/2024, 15:50:37
%%BoundingBox: 0 0 792 446
%%HiResBoundingBox: 0 0 792 445.5586
%%CropBox: 0 0 792 445.5586
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 582 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 9.1-c001 79.675d0f7, 2023/06/11-19:21:16        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2023-09-26T15:43:01+05:00"
   xmp:CreatorTool="Inkscape 1.1.2 (https://inkscape.org)"
   pdf:Producer="cairo 1.17.4 (https://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -445.559 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 445.559 li
792 445.559 li
792 0 li
cp
clp
0 0 mo
791.973 0 li
791.973 445.559 li
0 445.559 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
1 .85626 .191257 .0514534 cmyk
f
533.297 36.367 mo
533.297 36.258 533.234 36.195 533.109 36.195 cv
528.016 36.195 li
527.906 36.195 527.844 36.258 527.844 36.367 cv
527.844 44.586 li
527.844 44.711 527.906 44.773 528.016 44.773 cv
529.109 44.773 li
529.219 44.773 529.281 44.711 529.281 44.586 cv
529.281 41.336 li
532.609 41.336 li
532.719 41.336 532.781 41.289 532.781 41.164 cv
532.781 40.195 li
532.781 40.086 532.719 40.023 532.609 40.023 cv
529.281 40.023 li
529.281 37.523 li
533.109 37.523 li
533.234 37.523 533.297 37.461 533.297 37.352 cv
cp
0 0 0 0 cmyk
f
533.98 39.055 mo
533.918 39.102 533.918 39.164 533.98 39.258 cv
534.465 39.992 li
534.527 40.086 534.621 40.086 534.699 40.039 cv
535.09 39.805 535.637 39.648 536.246 39.648 cv
537.137 39.648 537.434 40.008 537.434 40.867 cv
537.434 41.086 li
537.074 41.039 536.637 40.992 536.246 40.992 cv
534.699 40.992 533.621 41.602 533.621 42.914 cv
533.621 44.414 534.902 44.914 536.293 44.914 cv
537.184 44.914 538.074 44.742 538.699 44.555 cv
538.793 44.523 538.84 44.445 538.84 44.352 cv
538.84 40.852 li
538.84 39.164 537.824 38.414 536.34 38.414 cv
535.371 38.414 534.559 38.648 533.98 39.055 cv
cp
535.012 42.898 mo
535.012 42.414 535.371 42.117 536.277 42.117 cv
536.652 42.117 537.121 42.164 537.434 42.211 cv
537.434 43.555 li
537.137 43.633 536.684 43.711 536.293 43.711 cv
535.559 43.711 535.012 43.461 535.012 42.898 cv
cp
f
544.879 44.242 mo
544.973 44.18 544.973 44.102 544.926 44.008 cv
544.41 43.289 li
544.363 43.18 544.27 43.18 544.16 43.242 cv
543.723 43.523 543.223 43.664 542.77 43.664 cv
541.941 43.664 541.457 43.242 541.457 42.508 cv
541.457 40.82 li
541.457 40.086 541.926 39.664 542.785 39.664 cv
543.223 39.664 543.676 39.789 544.051 40.008 cv
544.145 40.07 544.238 40.039 544.301 39.961 cv
544.77 39.242 li
544.816 39.148 544.816 39.055 544.723 38.992 cv
544.098 38.602 543.441 38.414 542.754 38.414 cv
541.098 38.414 540.066 39.367 540.066 40.82 cv
540.066 42.492 li
540.066 43.961 541.082 44.914 542.754 44.914 cv
543.598 44.914 544.27 44.68 544.879 44.242 cv
cp
f
549.887 38.555 mo
549.777 38.555 549.715 38.617 549.715 38.727 cv
549.715 43.523 li
549.449 43.617 549.027 43.664 548.621 43.664 cv
547.777 43.664 547.277 43.32 547.277 42.195 cv
547.277 38.727 li
547.277 38.617 547.215 38.555 547.105 38.555 cv
546.059 38.555 li
545.934 38.555 545.887 38.617 545.887 38.727 cv
545.887 42.211 li
545.887 44.133 546.996 44.914 548.621 44.914 cv
549.465 44.914 550.293 44.742 550.98 44.43 cv
551.059 44.398 551.105 44.336 551.105 44.227 cv
551.105 38.727 li
551.105 38.617 551.043 38.555 550.934 38.555 cv
cp
f
555.262 44.883 mo
555.355 44.867 555.402 44.789 555.402 44.695 cv
555.402 43.805 li
555.402 43.68 555.34 43.617 555.215 43.617 cv
555.059 43.633 554.902 43.648 554.762 43.648 cv
554.215 43.648 553.965 43.336 553.965 42.539 cv
553.965 36.367 li
553.965 36.258 553.902 36.195 553.793 36.195 cv
552.762 36.195 li
552.637 36.195 552.574 36.258 552.574 36.367 cv
552.574 42.586 li
552.574 44.055 553.277 44.914 554.574 44.914 cv
554.824 44.914 555.059 44.898 555.262 44.883 cv
cp
f
557.602 42.602 mo
557.602 39.852 li
558.883 39.852 li
558.977 39.852 559.055 39.789 559.055 39.68 cv
559.055 38.805 li
559.055 38.695 558.977 38.648 558.883 38.648 cv
557.586 38.648 li
557.477 37.195 li
557.477 37.102 557.398 37.039 557.305 37.039 cv
556.398 37.039 li
556.273 37.039 556.211 37.102 556.211 37.211 cv
556.211 42.695 li
556.211 44.289 557.18 44.914 558.43 44.914 cv
558.617 44.914 558.867 44.898 559.07 44.898 cv
559.195 44.883 559.242 44.805 559.242 44.695 cv
559.242 43.789 li
559.242 43.68 559.164 43.617 559.039 43.617 cv
558.852 43.633 558.664 43.648 558.555 43.648 cv
557.945 43.648 557.602 43.258 557.602 42.602 cv
cp
f
560.191 39.055 mo
560.129 39.102 560.129 39.164 560.191 39.258 cv
560.676 39.992 li
560.738 40.086 560.832 40.086 560.91 40.039 cv
561.301 39.805 561.848 39.648 562.457 39.648 cv
563.348 39.648 563.645 40.008 563.645 40.867 cv
563.645 41.086 li
563.285 41.039 562.848 40.992 562.457 40.992 cv
560.91 40.992 559.832 41.602 559.832 42.914 cv
559.832 44.414 561.113 44.914 562.504 44.914 cv
563.395 44.914 564.285 44.742 564.91 44.555 cv
565.004 44.523 565.051 44.445 565.051 44.352 cv
565.051 40.852 li
565.051 39.164 564.035 38.414 562.551 38.414 cv
561.582 38.414 560.77 38.648 560.191 39.055 cv
cp
561.223 42.898 mo
561.223 42.414 561.582 42.117 562.488 42.117 cv
562.863 42.117 563.332 42.164 563.645 42.211 cv
563.645 43.555 li
563.348 43.633 562.895 43.711 562.504 43.711 cv
561.77 43.711 561.223 43.461 561.223 42.898 cv
cp
f
570.18 38.68 mo
569.82 38.523 569.367 38.414 568.883 38.414 cv
567.367 38.414 566.273 39.398 566.273 40.961 cv
566.273 42.273 li
566.273 44.102 567.43 44.914 569.008 44.914 cv
569.789 44.914 570.711 44.742 571.445 44.492 cv
571.539 44.445 571.57 44.383 571.57 44.289 cv
571.57 36.367 li
571.57 36.258 571.508 36.195 571.383 36.195 cv
570.352 36.195 li
570.242 36.195 570.18 36.258 570.18 36.367 cv
cp
567.664 42.289 mo
567.664 40.961 li
567.664 40.039 568.164 39.648 569.023 39.648 cv
569.492 39.648 569.883 39.773 570.18 39.961 cv
570.18 43.523 li
569.883 43.633 569.461 43.695 569.055 43.695 cv
568.18 43.695 567.664 43.32 567.664 42.289 cv
cp
f
579.359 38.68 mo
579 38.523 578.547 38.414 578.062 38.414 cv
576.547 38.414 575.453 39.398 575.453 40.961 cv
575.453 42.273 li
575.453 44.102 576.609 44.914 578.188 44.914 cv
578.969 44.914 579.891 44.742 580.625 44.492 cv
580.719 44.445 580.75 44.383 580.75 44.289 cv
580.75 36.367 li
580.75 36.258 580.688 36.195 580.562 36.195 cv
579.531 36.195 li
579.422 36.195 579.359 36.258 579.359 36.367 cv
cp
576.844 42.289 mo
576.844 40.961 li
576.844 40.039 577.344 39.648 578.203 39.648 cv
578.672 39.648 579.062 39.773 579.359 39.961 cv
579.359 43.523 li
579.062 43.633 578.641 43.695 578.234 43.695 cv
577.359 43.695 576.844 43.32 576.844 42.289 cv
cp
f
587.293 40.867 mo
587.293 39.117 586.012 38.414 584.699 38.414 cv
583.387 38.414 582.059 39.117 582.059 40.867 cv
582.059 42.57 li
582.059 44.18 583.34 44.914 584.684 44.914 cv
585.715 44.914 586.48 44.586 587.121 44.086 cv
587.215 44.023 587.23 43.914 587.152 43.836 cv
586.668 43.18 li
586.605 43.086 586.512 43.086 586.434 43.148 cv
585.98 43.445 585.48 43.695 584.73 43.695 cv
583.965 43.695 583.465 43.32 583.465 42.586 cv
583.465 42.258 li
587.105 42.258 li
587.23 42.258 587.293 42.195 587.293 42.086 cv
cp
585.934 40.867 mo
585.934 41.18 li
583.465 41.18 li
583.465 40.867 li
583.465 39.977 583.996 39.633 584.699 39.633 cv
585.371 39.633 585.934 39.992 585.934 40.867 cv
cp
f
597.172 44.039 mo
597.25 43.977 597.25 43.883 597.188 43.789 cv
596.625 42.977 li
596.562 42.867 596.484 42.852 596.391 42.93 cv
595.828 43.336 595.078 43.555 594.391 43.555 cv
593.234 43.555 592.547 42.914 592.547 41.82 cv
592.547 39.133 li
592.547 38.07 593.219 37.414 594.391 37.414 cv
594.984 37.414 595.625 37.586 596.172 37.961 cv
596.281 38.023 596.359 38.023 596.422 37.914 cv
596.984 37.086 li
597.047 36.992 597.031 36.914 596.953 36.852 cv
596.234 36.352 595.312 36.055 594.391 36.055 cv
592.625 36.055 591.094 37.008 591.094 39.117 cv
591.094 41.852 li
591.094 43.977 592.625 44.914 594.406 44.914 cv
595.406 44.914 596.406 44.633 597.172 44.039 cv
cp
f
599.477 44.773 mo
599.586 44.773 599.633 44.711 599.633 44.586 cv
599.633 38.727 li
599.633 38.617 599.586 38.555 599.477 38.555 cv
598.43 38.555 li
598.32 38.555 598.242 38.617 598.242 38.727 cv
598.242 44.586 li
598.242 44.711 598.32 44.773 598.43 44.773 cv
cp
599.742 36.93 mo
599.742 36.477 599.414 36.148 598.961 36.148 cv
598.508 36.148 598.164 36.477 598.164 36.93 cv
598.164 37.367 598.508 37.711 598.961 37.711 cv
599.414 37.711 599.742 37.367 599.742 36.93 cv
cp
f
606.191 40.867 mo
606.191 39.117 604.91 38.414 603.598 38.414 cv
602.285 38.414 600.957 39.117 600.957 40.867 cv
600.957 42.57 li
600.957 44.18 602.238 44.914 603.582 44.914 cv
604.613 44.914 605.379 44.586 606.02 44.086 cv
606.113 44.023 606.129 43.914 606.051 43.836 cv
605.566 43.18 li
605.504 43.086 605.41 43.086 605.332 43.148 cv
604.879 43.445 604.379 43.695 603.629 43.695 cv
602.863 43.695 602.363 43.32 602.363 42.586 cv
602.363 42.258 li
606.004 42.258 li
606.129 42.258 606.191 42.195 606.191 42.086 cv
cp
604.832 40.867 mo
604.832 41.18 li
602.363 41.18 li
602.363 40.867 li
602.363 39.977 602.895 39.633 603.598 39.633 cv
604.27 39.633 604.832 39.992 604.832 40.867 cv
cp
f
608.637 44.773 mo
608.762 44.773 608.824 44.711 608.824 44.586 cv
608.824 39.789 li
609.09 39.727 609.543 39.664 609.949 39.664 cv
610.824 39.664 611.34 39.992 611.34 41.133 cv
611.34 44.586 li
611.34 44.711 611.418 44.773 611.527 44.773 cv
612.559 44.773 li
612.668 44.773 612.73 44.711 612.73 44.586 cv
612.73 41.102 li
612.73 39.18 611.605 38.414 609.949 38.414 cv
609.09 38.414 608.262 38.586 607.559 38.883 cv
607.465 38.93 607.434 39.008 607.434 39.102 cv
607.434 44.586 li
607.434 44.711 607.48 44.773 607.605 44.773 cv
cp
f
618.785 44.242 mo
618.879 44.18 618.879 44.102 618.832 44.008 cv
618.316 43.289 li
618.27 43.18 618.176 43.18 618.066 43.242 cv
617.629 43.523 617.129 43.664 616.676 43.664 cv
615.848 43.664 615.363 43.242 615.363 42.508 cv
615.363 40.82 li
615.363 40.086 615.832 39.664 616.691 39.664 cv
617.129 39.664 617.582 39.789 617.957 40.008 cv
618.051 40.07 618.145 40.039 618.207 39.961 cv
618.676 39.242 li
618.723 39.148 618.723 39.055 618.629 38.992 cv
618.004 38.602 617.348 38.414 616.66 38.414 cv
615.004 38.414 613.973 39.367 613.973 40.82 cv
613.973 42.492 li
613.973 43.961 614.988 44.914 616.66 44.914 cv
617.504 44.914 618.176 44.68 618.785 44.242 cv
cp
f
621.074 44.773 mo
621.184 44.773 621.23 44.711 621.23 44.586 cv
621.23 38.727 li
621.23 38.617 621.184 38.555 621.074 38.555 cv
620.027 38.555 li
619.918 38.555 619.84 38.617 619.84 38.727 cv
619.84 44.586 li
619.84 44.711 619.918 44.773 620.027 44.773 cv
cp
621.34 36.93 mo
621.34 36.477 621.012 36.148 620.559 36.148 cv
620.105 36.148 619.762 36.477 619.762 36.93 cv
619.762 37.367 620.105 37.711 620.559 37.711 cv
621.012 37.711 621.34 37.367 621.34 36.93 cv
cp
f
622.699 39.055 mo
622.637 39.102 622.637 39.164 622.699 39.258 cv
623.184 39.992 li
623.246 40.086 623.34 40.086 623.418 40.039 cv
623.809 39.805 624.355 39.648 624.965 39.648 cv
625.855 39.648 626.152 40.008 626.152 40.867 cv
626.152 41.086 li
625.793 41.039 625.355 40.992 624.965 40.992 cv
623.418 40.992 622.34 41.602 622.34 42.914 cv
622.34 44.414 623.621 44.914 625.012 44.914 cv
625.902 44.914 626.793 44.742 627.418 44.555 cv
627.512 44.523 627.559 44.445 627.559 44.352 cv
627.559 40.852 li
627.559 39.164 626.543 38.414 625.059 38.414 cv
624.09 38.414 623.277 38.648 622.699 39.055 cv
cp
623.73 42.898 mo
623.73 42.414 624.09 42.117 624.996 42.117 cv
625.371 42.117 625.84 42.164 626.152 42.211 cv
626.152 43.555 li
625.855 43.633 625.402 43.711 625.012 43.711 cv
624.277 43.711 623.73 43.461 623.73 42.898 cv
cp
f
633.672 42.93 mo
633.672 41.539 632.422 41.227 631.438 41.055 cv
630.641 40.898 630.109 40.773 630.109 40.289 cv
630.109 39.883 630.484 39.633 631.203 39.633 cv
631.734 39.633 632.281 39.789 632.719 40.023 cv
632.812 40.07 632.906 40.039 632.969 39.961 cv
633.422 39.195 li
633.484 39.102 633.453 39.008 633.359 38.961 cv
632.656 38.57 631.953 38.398 631.266 38.398 cv
629.984 38.398 628.719 38.961 628.719 40.289 cv
628.719 41.742 630.25 42.117 631.156 42.273 cv
631.688 42.367 632.266 42.508 632.266 42.992 cv
632.266 43.445 631.781 43.68 631.156 43.68 cv
630.531 43.68 629.875 43.461 629.344 43.07 cv
629.234 42.992 629.156 43.008 629.094 43.117 cv
628.641 43.898 li
628.578 43.992 628.578 44.07 628.688 44.133 cv
629.453 44.695 630.312 44.914 631.125 44.914 cv
632.562 44.914 633.672 44.273 633.672 42.93 cv
cp
f
639.07 41.07 mo
642.445 41.07 li
642.555 41.07 642.617 41.023 642.617 40.898 cv
642.617 39.93 li
642.617 39.82 642.555 39.758 642.445 39.758 cv
639.07 39.758 li
639.07 37.508 li
642.758 37.508 li
642.867 37.508 642.93 37.461 642.93 37.352 cv
642.93 36.367 li
642.93 36.258 642.867 36.195 642.758 36.195 cv
637.789 36.195 li
637.68 36.195 637.617 36.258 637.617 36.367 cv
637.617 44.586 li
637.617 44.711 637.68 44.773 637.789 44.773 cv
642.914 44.773 li
643.039 44.773 643.102 44.711 643.102 44.586 cv
643.102 43.617 li
643.102 43.508 643.039 43.461 642.914 43.461 cv
639.07 43.461 li
cp
f
647.543 41.648 mo
649.371 38.758 li
649.434 38.648 649.387 38.555 649.246 38.555 cv
648.043 38.555 li
647.934 38.555 647.871 38.602 647.824 38.68 cv
646.684 40.68 li
645.543 38.68 li
645.496 38.602 645.418 38.555 645.324 38.555 cv
644.105 38.555 li
643.98 38.555 643.918 38.648 643.996 38.758 cv
645.809 41.648 li
643.887 44.555 li
643.809 44.695 643.855 44.773 644.012 44.773 cv
645.262 44.773 li
645.355 44.773 645.434 44.742 645.48 44.648 cv
646.684 42.617 li
647.887 44.648 li
647.934 44.742 647.996 44.773 648.09 44.773 cv
649.371 44.773 li
649.496 44.773 649.543 44.695 649.48 44.555 cv
cp
f
650.238 39.055 mo
650.176 39.102 650.176 39.164 650.238 39.258 cv
650.723 39.992 li
650.785 40.086 650.879 40.086 650.957 40.039 cv
651.348 39.805 651.895 39.648 652.504 39.648 cv
653.395 39.648 653.691 40.008 653.691 40.867 cv
653.691 41.086 li
653.332 41.039 652.895 40.992 652.504 40.992 cv
650.957 40.992 649.879 41.602 649.879 42.914 cv
649.879 44.414 651.16 44.914 652.551 44.914 cv
653.441 44.914 654.332 44.742 654.957 44.555 cv
655.051 44.523 655.098 44.445 655.098 44.352 cv
655.098 40.852 li
655.098 39.164 654.082 38.414 652.598 38.414 cv
651.629 38.414 650.816 38.648 650.238 39.055 cv
cp
651.27 42.898 mo
651.27 42.414 651.629 42.117 652.535 42.117 cv
652.91 42.117 653.379 42.164 653.691 42.211 cv
653.691 43.555 li
653.395 43.633 652.941 43.711 652.551 43.711 cv
651.816 43.711 651.27 43.461 651.27 42.898 cv
cp
f
661.133 44.242 mo
661.227 44.18 661.227 44.102 661.18 44.008 cv
660.664 43.289 li
660.617 43.18 660.523 43.18 660.414 43.242 cv
659.977 43.523 659.477 43.664 659.023 43.664 cv
658.195 43.664 657.711 43.242 657.711 42.508 cv
657.711 40.82 li
657.711 40.086 658.18 39.664 659.039 39.664 cv
659.477 39.664 659.93 39.789 660.305 40.008 cv
660.398 40.07 660.492 40.039 660.555 39.961 cv
661.023 39.242 li
661.07 39.148 661.07 39.055 660.977 38.992 cv
660.352 38.602 659.695 38.414 659.008 38.414 cv
657.352 38.414 656.32 39.367 656.32 40.82 cv
656.32 42.492 li
656.32 43.961 657.336 44.914 659.008 44.914 cv
659.852 44.914 660.523 44.68 661.133 44.242 cv
cp
f
663.547 42.602 mo
663.547 39.852 li
664.828 39.852 li
664.922 39.852 665 39.789 665 39.68 cv
665 38.805 li
665 38.695 664.922 38.648 664.828 38.648 cv
663.531 38.648 li
663.422 37.195 li
663.422 37.102 663.344 37.039 663.25 37.039 cv
662.344 37.039 li
662.219 37.039 662.156 37.102 662.156 37.211 cv
662.156 42.695 li
662.156 44.289 663.125 44.914 664.375 44.914 cv
664.562 44.914 664.812 44.898 665.016 44.898 cv
665.141 44.883 665.188 44.805 665.188 44.695 cv
665.188 43.789 li
665.188 43.68 665.109 43.617 664.984 43.617 cv
664.797 43.633 664.609 43.648 664.5 43.648 cv
663.891 43.648 663.547 43.258 663.547 42.602 cv
cp
f
666.137 39.055 mo
666.074 39.102 666.074 39.164 666.137 39.258 cv
666.621 39.992 li
666.684 40.086 666.777 40.086 666.855 40.039 cv
667.246 39.805 667.793 39.648 668.402 39.648 cv
669.293 39.648 669.59 40.008 669.59 40.867 cv
669.59 41.086 li
669.23 41.039 668.793 40.992 668.402 40.992 cv
666.855 40.992 665.777 41.602 665.777 42.914 cv
665.777 44.414 667.059 44.914 668.449 44.914 cv
669.34 44.914 670.23 44.742 670.855 44.555 cv
670.949 44.523 670.996 44.445 670.996 44.352 cv
670.996 40.852 li
670.996 39.164 669.98 38.414 668.496 38.414 cv
667.527 38.414 666.715 38.648 666.137 39.055 cv
cp
667.168 42.898 mo
667.168 42.414 667.527 42.117 668.434 42.117 cv
668.809 42.117 669.277 42.164 669.59 42.211 cv
669.59 43.555 li
669.293 43.633 668.84 43.711 668.449 43.711 cv
667.715 43.711 667.168 43.461 667.168 42.898 cv
cp
f
677.113 42.93 mo
677.113 41.539 675.863 41.227 674.879 41.055 cv
674.082 40.898 673.551 40.773 673.551 40.289 cv
673.551 39.883 673.926 39.633 674.645 39.633 cv
675.176 39.633 675.723 39.789 676.16 40.023 cv
676.254 40.07 676.348 40.039 676.41 39.961 cv
676.863 39.195 li
676.926 39.102 676.895 39.008 676.801 38.961 cv
676.098 38.57 675.395 38.398 674.707 38.398 cv
673.426 38.398 672.16 38.961 672.16 40.289 cv
672.16 41.742 673.691 42.117 674.598 42.273 cv
675.129 42.367 675.707 42.508 675.707 42.992 cv
675.707 43.445 675.223 43.68 674.598 43.68 cv
673.973 43.68 673.316 43.461 672.785 43.07 cv
672.676 42.992 672.598 43.008 672.535 43.117 cv
672.082 43.898 li
672.02 43.992 672.02 44.07 672.129 44.133 cv
672.895 44.695 673.754 44.914 674.566 44.914 cv
676.004 44.914 677.113 44.273 677.113 42.93 cv
cp
f
684.605 43.086 mo
684.34 43.242 683.934 43.352 683.527 43.336 cv
682.809 43.336 682.168 43.008 682.168 42.086 cv
682.168 38.727 li
682.168 38.617 682.105 38.555 681.996 38.555 cv
680.949 38.555 li
680.84 38.555 680.777 38.617 680.777 38.727 cv
680.777 42.148 li
680.777 43.805 682.09 44.586 683.34 44.586 cv
683.777 44.586 684.23 44.492 684.621 44.383 cv
684.668 45.57 684.137 45.93 683.309 45.93 cv
682.668 45.93 682.137 45.695 681.684 45.383 cv
681.605 45.32 681.512 45.352 681.449 45.445 cv
680.934 46.18 li
680.871 46.273 680.871 46.352 680.98 46.414 cv
681.605 46.93 682.309 47.18 683.324 47.18 cv
685.168 47.18 685.996 46.227 685.996 44.383 cv
685.996 38.727 li
685.996 38.617 685.949 38.555 685.824 38.555 cv
684.793 38.555 li
684.668 38.555 684.605 38.617 684.605 38.727 cv
cp
f
691.613 44.773 mo
691.723 44.773 691.77 44.711 691.77 44.586 cv
691.77 41.852 li
691.77 40.82 691.723 39.57 691.66 38.539 cv
691.707 38.539 li
692.035 39.242 692.551 40.18 692.988 40.898 cv
695.254 44.648 li
695.301 44.742 695.379 44.773 695.457 44.773 cv
696.676 44.773 li
696.785 44.773 696.848 44.711 696.848 44.586 cv
696.848 36.367 li
696.848 36.258 696.785 36.195 696.676 36.195 cv
695.598 36.195 li
695.473 36.195 695.41 36.258 695.41 36.367 cv
695.41 39.305 li
695.41 40.305 695.441 41.539 695.52 42.555 cv
695.488 42.57 li
695.145 41.914 694.691 41.117 694.285 40.398 cv
691.941 36.32 li
691.895 36.242 691.816 36.195 691.723 36.195 cv
690.52 36.195 li
690.41 36.195 690.348 36.258 690.348 36.367 cv
690.348 44.586 li
690.348 44.711 690.41 44.773 690.52 44.773 cv
cp
f
698.539 39.055 mo
698.477 39.102 698.477 39.164 698.539 39.258 cv
699.023 39.992 li
699.086 40.086 699.18 40.086 699.258 40.039 cv
699.648 39.805 700.195 39.648 700.805 39.648 cv
701.695 39.648 701.992 40.008 701.992 40.867 cv
701.992 41.086 li
701.633 41.039 701.195 40.992 700.805 40.992 cv
699.258 40.992 698.18 41.602 698.18 42.914 cv
698.18 44.414 699.461 44.914 700.852 44.914 cv
701.742 44.914 702.633 44.742 703.258 44.555 cv
703.352 44.523 703.398 44.445 703.398 44.352 cv
703.398 40.852 li
703.398 39.164 702.383 38.414 700.898 38.414 cv
699.93 38.414 699.117 38.648 698.539 39.055 cv
cp
699.57 42.898 mo
699.57 42.414 699.93 42.117 700.836 42.117 cv
701.211 42.117 701.68 42.164 701.992 42.211 cv
701.992 43.555 li
701.695 43.633 701.242 43.711 700.852 43.711 cv
700.117 43.711 699.57 43.461 699.57 42.898 cv
cp
f
706.184 42.602 mo
706.184 39.852 li
707.465 39.852 li
707.559 39.852 707.637 39.789 707.637 39.68 cv
707.637 38.805 li
707.637 38.695 707.559 38.648 707.465 38.648 cv
706.168 38.648 li
706.059 37.195 li
706.059 37.102 705.98 37.039 705.887 37.039 cv
704.98 37.039 li
704.855 37.039 704.793 37.102 704.793 37.211 cv
704.793 42.695 li
704.793 44.289 705.762 44.914 707.012 44.914 cv
707.199 44.914 707.449 44.898 707.652 44.898 cv
707.777 44.883 707.824 44.805 707.824 44.695 cv
707.824 43.789 li
707.824 43.68 707.746 43.617 707.621 43.617 cv
707.434 43.633 707.246 43.648 707.137 43.648 cv
706.527 43.648 706.184 43.258 706.184 42.602 cv
cp
f
712.773 38.555 mo
712.664 38.555 712.602 38.617 712.602 38.727 cv
712.602 43.523 li
712.336 43.617 711.914 43.664 711.508 43.664 cv
710.664 43.664 710.164 43.32 710.164 42.195 cv
710.164 38.727 li
710.164 38.617 710.102 38.555 709.992 38.555 cv
708.945 38.555 li
708.82 38.555 708.773 38.617 708.773 38.727 cv
708.773 42.211 li
708.773 44.133 709.883 44.914 711.508 44.914 cv
712.352 44.914 713.18 44.742 713.867 44.43 cv
713.945 44.398 713.992 44.336 713.992 44.227 cv
713.992 38.727 li
713.992 38.617 713.93 38.555 713.82 38.555 cv
cp
f
716.695 44.773 mo
716.82 44.773 716.883 44.711 716.883 44.586 cv
716.883 39.82 li
717.102 39.727 717.508 39.648 717.93 39.648 cv
718.258 39.648 718.602 39.648 718.898 39.695 cv
719.023 39.727 719.102 39.664 719.102 39.555 cv
719.102 38.695 li
719.102 38.586 719.055 38.523 718.945 38.508 cv
718.492 38.43 718.086 38.414 717.711 38.414 cv
716.992 38.414 716.227 38.57 715.617 38.867 cv
715.523 38.898 715.492 38.977 715.492 39.07 cv
715.492 44.586 li
715.492 44.711 715.539 44.773 715.664 44.773 cv
cp
f
719.852 39.055 mo
719.789 39.102 719.789 39.164 719.852 39.258 cv
720.336 39.992 li
720.398 40.086 720.492 40.086 720.57 40.039 cv
720.961 39.805 721.508 39.648 722.117 39.648 cv
723.008 39.648 723.305 40.008 723.305 40.867 cv
723.305 41.086 li
722.945 41.039 722.508 40.992 722.117 40.992 cv
720.57 40.992 719.492 41.602 719.492 42.914 cv
719.492 44.414 720.773 44.914 722.164 44.914 cv
723.055 44.914 723.945 44.742 724.57 44.555 cv
724.664 44.523 724.711 44.445 724.711 44.352 cv
724.711 40.852 li
724.711 39.164 723.695 38.414 722.211 38.414 cv
721.242 38.414 720.43 38.648 719.852 39.055 cv
cp
720.883 42.898 mo
720.883 42.414 721.242 42.117 722.148 42.117 cv
722.523 42.117 722.992 42.164 723.305 42.211 cv
723.305 43.555 li
723.008 43.633 722.555 43.711 722.164 43.711 cv
721.43 43.711 720.883 43.461 720.883 42.898 cv
cp
f
728.793 44.883 mo
728.887 44.867 728.934 44.789 728.934 44.695 cv
728.934 43.805 li
728.934 43.68 728.871 43.617 728.746 43.617 cv
728.59 43.633 728.434 43.648 728.293 43.648 cv
727.746 43.648 727.496 43.336 727.496 42.539 cv
727.496 36.367 li
727.496 36.258 727.434 36.195 727.324 36.195 cv
726.293 36.195 li
726.168 36.195 726.105 36.258 726.105 36.367 cv
726.105 42.586 li
726.105 44.055 726.809 44.914 728.105 44.914 cv
728.355 44.914 728.59 44.898 728.793 44.883 cv
cp
f
734.82 40.867 mo
734.82 39.117 733.539 38.414 732.227 38.414 cv
730.914 38.414 729.586 39.117 729.586 40.867 cv
729.586 42.57 li
729.586 44.18 730.867 44.914 732.211 44.914 cv
733.242 44.914 734.008 44.586 734.648 44.086 cv
734.742 44.023 734.758 43.914 734.68 43.836 cv
734.195 43.18 li
734.133 43.086 734.039 43.086 733.961 43.148 cv
733.508 43.445 733.008 43.695 732.258 43.695 cv
731.492 43.695 730.992 43.32 730.992 42.586 cv
730.992 42.258 li
734.633 42.258 li
734.758 42.258 734.82 42.195 734.82 42.086 cv
cp
733.461 40.867 mo
733.461 41.18 li
730.992 41.18 li
730.992 40.867 li
730.992 39.977 731.523 39.633 732.227 39.633 cv
732.898 39.633 733.461 39.992 733.461 40.867 cv
cp
f
740.75 42.93 mo
740.75 41.539 739.5 41.227 738.516 41.055 cv
737.719 40.898 737.188 40.773 737.188 40.289 cv
737.188 39.883 737.562 39.633 738.281 39.633 cv
738.812 39.633 739.359 39.789 739.797 40.023 cv
739.891 40.07 739.984 40.039 740.047 39.961 cv
740.5 39.195 li
740.562 39.102 740.531 39.008 740.438 38.961 cv
739.734 38.57 739.031 38.398 738.344 38.398 cv
737.062 38.398 735.797 38.961 735.797 40.289 cv
735.797 41.742 737.328 42.117 738.234 42.273 cv
738.766 42.367 739.344 42.508 739.344 42.992 cv
739.344 43.445 738.859 43.68 738.234 43.68 cv
737.609 43.68 736.953 43.461 736.422 43.07 cv
736.312 42.992 736.234 43.008 736.172 43.117 cv
735.719 43.898 li
735.656 43.992 735.656 44.07 735.766 44.133 cv
736.531 44.695 737.391 44.914 738.203 44.914 cv
739.641 44.914 740.75 44.273 740.75 42.93 cv
cp
f
528.18 56.52 mo
531.555 56.52 li
531.664 56.52 531.727 56.473 531.727 56.348 cv
531.727 55.379 li
531.727 55.27 531.664 55.207 531.555 55.207 cv
528.18 55.207 li
528.18 52.957 li
531.867 52.957 li
531.977 52.957 532.039 52.91 532.039 52.801 cv
532.039 51.816 li
532.039 51.707 531.977 51.645 531.867 51.645 cv
526.898 51.645 li
526.789 51.645 526.727 51.707 526.727 51.816 cv
526.727 60.035 li
526.727 60.16 526.789 60.223 526.898 60.223 cv
532.023 60.223 li
532.148 60.223 532.211 60.16 532.211 60.035 cv
532.211 59.066 li
532.211 58.957 532.148 58.91 532.023 58.91 cv
528.18 58.91 li
cp
f
538.211 58.379 mo
538.211 56.988 536.961 56.676 535.977 56.504 cv
535.18 56.348 534.648 56.223 534.648 55.738 cv
534.648 55.332 535.023 55.082 535.742 55.082 cv
536.273 55.082 536.82 55.238 537.258 55.473 cv
537.352 55.52 537.445 55.488 537.508 55.41 cv
537.961 54.645 li
538.023 54.551 537.992 54.457 537.898 54.41 cv
537.195 54.02 536.492 53.848 535.805 53.848 cv
534.523 53.848 533.258 54.41 533.258 55.738 cv
533.258 57.191 534.789 57.566 535.695 57.723 cv
536.227 57.816 536.805 57.957 536.805 58.441 cv
536.805 58.895 536.32 59.129 535.695 59.129 cv
535.07 59.129 534.414 58.91 533.883 58.52 cv
533.773 58.441 533.695 58.457 533.633 58.566 cv
533.18 59.348 li
533.117 59.441 533.117 59.52 533.227 59.582 cv
533.992 60.145 534.852 60.363 535.664 60.363 cv
537.102 60.363 538.211 59.723 538.211 58.379 cv
cp
f
543.941 59.691 mo
544.035 59.629 544.035 59.551 543.988 59.457 cv
543.473 58.738 li
543.426 58.629 543.332 58.629 543.223 58.691 cv
542.785 58.973 542.285 59.113 541.832 59.113 cv
541.004 59.113 540.52 58.691 540.52 57.957 cv
540.52 56.27 li
540.52 55.535 540.988 55.113 541.848 55.113 cv
542.285 55.113 542.738 55.238 543.113 55.457 cv
543.207 55.52 543.301 55.488 543.363 55.41 cv
543.832 54.691 li
543.879 54.598 543.879 54.504 543.785 54.441 cv
543.16 54.051 542.504 53.863 541.816 53.863 cv
540.16 53.863 539.129 54.816 539.129 56.27 cv
539.129 57.941 li
539.129 59.41 540.145 60.363 541.816 60.363 cv
542.66 60.363 543.332 60.129 543.941 59.691 cv
cp
f
548.949 54.004 mo
548.84 54.004 548.777 54.066 548.777 54.176 cv
548.777 58.973 li
548.512 59.066 548.09 59.113 547.684 59.113 cv
546.84 59.113 546.34 58.77 546.34 57.645 cv
546.34 54.176 li
546.34 54.066 546.277 54.004 546.168 54.004 cv
545.121 54.004 li
544.996 54.004 544.949 54.066 544.949 54.176 cv
544.949 57.66 li
544.949 59.582 546.059 60.363 547.684 60.363 cv
548.527 60.363 549.355 60.191 550.043 59.879 cv
550.121 59.848 550.168 59.785 550.168 59.676 cv
550.168 54.176 li
550.168 54.066 550.105 54.004 549.996 54.004 cv
cp
f
556.715 56.316 mo
556.715 54.566 555.434 53.863 554.121 53.863 cv
552.809 53.863 551.48 54.566 551.48 56.316 cv
551.48 58.02 li
551.48 59.629 552.762 60.363 554.105 60.363 cv
555.137 60.363 555.902 60.035 556.543 59.535 cv
556.637 59.473 556.652 59.363 556.574 59.285 cv
556.09 58.629 li
556.027 58.535 555.934 58.535 555.855 58.598 cv
555.402 58.895 554.902 59.145 554.152 59.145 cv
553.387 59.145 552.887 58.77 552.887 58.035 cv
552.887 57.707 li
556.527 57.707 li
556.652 57.707 556.715 57.645 556.715 57.535 cv
cp
555.355 56.316 mo
555.355 56.629 li
552.887 56.629 li
552.887 56.316 li
552.887 55.426 553.418 55.082 554.121 55.082 cv
554.793 55.082 555.355 55.441 555.355 56.316 cv
cp
f
560.613 60.332 mo
560.707 60.316 560.754 60.238 560.754 60.145 cv
560.754 59.254 li
560.754 59.129 560.691 59.066 560.566 59.066 cv
560.41 59.082 560.254 59.098 560.113 59.098 cv
559.566 59.098 559.316 58.785 559.316 57.988 cv
559.316 51.816 li
559.316 51.707 559.254 51.645 559.145 51.645 cv
558.113 51.645 li
557.988 51.645 557.926 51.707 557.926 51.816 cv
557.926 58.035 li
557.926 59.504 558.629 60.363 559.926 60.363 cv
560.176 60.363 560.41 60.348 560.613 60.332 cv
cp
f
561.547 54.504 mo
561.484 54.551 561.484 54.613 561.547 54.707 cv
562.031 55.441 li
562.094 55.535 562.188 55.535 562.266 55.488 cv
562.656 55.254 563.203 55.098 563.812 55.098 cv
564.703 55.098 565 55.457 565 56.316 cv
565 56.535 li
564.641 56.488 564.203 56.441 563.812 56.441 cv
562.266 56.441 561.188 57.051 561.188 58.363 cv
561.188 59.863 562.469 60.363 563.859 60.363 cv
564.75 60.363 565.641 60.191 566.266 60.004 cv
566.359 59.973 566.406 59.895 566.406 59.801 cv
566.406 56.301 li
566.406 54.613 565.391 53.863 563.906 53.863 cv
562.938 53.863 562.125 54.098 561.547 54.504 cv
cp
562.578 58.348 mo
562.578 57.863 562.938 57.566 563.844 57.566 cv
564.219 57.566 564.688 57.613 565 57.66 cv
565 59.004 li
564.703 59.082 564.25 59.16 563.859 59.16 cv
563.125 59.16 562.578 58.91 562.578 58.348 cv
cp
f
574.129 54.129 mo
573.77 53.973 573.316 53.863 572.832 53.863 cv
571.316 53.863 570.223 54.848 570.223 56.41 cv
570.223 57.723 li
570.223 59.551 571.379 60.363 572.957 60.363 cv
573.738 60.363 574.66 60.191 575.395 59.941 cv
575.488 59.895 575.52 59.832 575.52 59.738 cv
575.52 51.816 li
575.52 51.707 575.457 51.645 575.332 51.645 cv
574.301 51.645 li
574.191 51.645 574.129 51.707 574.129 51.816 cv
cp
571.613 57.738 mo
571.613 56.41 li
571.613 55.488 572.113 55.098 572.973 55.098 cv
573.441 55.098 573.832 55.223 574.129 55.41 cv
574.129 58.973 li
573.832 59.082 573.41 59.145 573.004 59.145 cv
572.129 59.145 571.613 58.77 571.613 57.738 cv
cp
f
582.059 56.316 mo
582.059 54.566 580.777 53.863 579.465 53.863 cv
578.152 53.863 576.824 54.566 576.824 56.316 cv
576.824 58.02 li
576.824 59.629 578.105 60.363 579.449 60.363 cv
580.48 60.363 581.246 60.035 581.887 59.535 cv
581.98 59.473 581.996 59.363 581.918 59.285 cv
581.434 58.629 li
581.371 58.535 581.277 58.535 581.199 58.598 cv
580.746 58.895 580.246 59.145 579.496 59.145 cv
578.73 59.145 578.23 58.77 578.23 58.035 cv
578.23 57.707 li
581.871 57.707 li
581.996 57.707 582.059 57.645 582.059 57.535 cv
cp
580.699 56.316 mo
580.699 56.629 li
578.23 56.629 li
578.23 56.316 li
578.23 55.426 578.762 55.082 579.465 55.082 cv
580.137 55.082 580.699 55.441 580.699 56.316 cv
cp
f
591.941 59.488 mo
592.02 59.426 592.02 59.332 591.957 59.238 cv
591.395 58.426 li
591.332 58.316 591.254 58.301 591.16 58.379 cv
590.598 58.785 589.848 59.004 589.16 59.004 cv
588.004 59.004 587.316 58.363 587.316 57.27 cv
587.316 54.582 li
587.316 53.52 587.988 52.863 589.16 52.863 cv
589.754 52.863 590.395 53.035 590.941 53.41 cv
591.051 53.473 591.129 53.473 591.191 53.363 cv
591.754 52.535 li
591.816 52.441 591.801 52.363 591.723 52.301 cv
591.004 51.801 590.082 51.504 589.16 51.504 cv
587.395 51.504 585.863 52.457 585.863 54.566 cv
585.863 57.301 li
585.863 59.426 587.395 60.363 589.176 60.363 cv
590.176 60.363 591.176 60.082 591.941 59.488 cv
cp
f
594.242 60.223 mo
594.352 60.223 594.398 60.16 594.398 60.035 cv
594.398 54.176 li
594.398 54.066 594.352 54.004 594.242 54.004 cv
593.195 54.004 li
593.086 54.004 593.008 54.066 593.008 54.176 cv
593.008 60.035 li
593.008 60.16 593.086 60.223 593.195 60.223 cv
cp
594.508 52.379 mo
594.508 51.926 594.18 51.598 593.727 51.598 cv
593.273 51.598 592.93 51.926 592.93 52.379 cv
592.93 52.816 593.273 53.16 593.727 53.16 cv
594.18 53.16 594.508 52.816 594.508 52.379 cv
cp
f
600.961 56.316 mo
600.961 54.566 599.68 53.863 598.367 53.863 cv
597.055 53.863 595.727 54.566 595.727 56.316 cv
595.727 58.02 li
595.727 59.629 597.008 60.363 598.352 60.363 cv
599.383 60.363 600.148 60.035 600.789 59.535 cv
600.883 59.473 600.898 59.363 600.82 59.285 cv
600.336 58.629 li
600.273 58.535 600.18 58.535 600.102 58.598 cv
599.648 58.895 599.148 59.145 598.398 59.145 cv
597.633 59.145 597.133 58.77 597.133 58.035 cv
597.133 57.707 li
600.773 57.707 li
600.898 57.707 600.961 57.645 600.961 57.535 cv
cp
599.602 56.316 mo
599.602 56.629 li
597.133 56.629 li
597.133 56.316 li
597.133 55.426 597.664 55.082 598.367 55.082 cv
599.039 55.082 599.602 55.441 599.602 56.316 cv
cp
f
603.402 60.223 mo
603.527 60.223 603.59 60.16 603.59 60.035 cv
603.59 55.238 li
603.855 55.176 604.309 55.113 604.715 55.113 cv
605.59 55.113 606.105 55.441 606.105 56.582 cv
606.105 60.035 li
606.105 60.16 606.184 60.223 606.293 60.223 cv
607.324 60.223 li
607.434 60.223 607.496 60.16 607.496 60.035 cv
607.496 56.551 li
607.496 54.629 606.371 53.863 604.715 53.863 cv
603.855 53.863 603.027 54.035 602.324 54.332 cv
602.23 54.379 602.199 54.457 602.199 54.551 cv
602.199 60.035 li
602.199 60.16 602.246 60.223 602.371 60.223 cv
cp
f
613.555 59.691 mo
613.648 59.629 613.648 59.551 613.602 59.457 cv
613.086 58.738 li
613.039 58.629 612.945 58.629 612.836 58.691 cv
612.398 58.973 611.898 59.113 611.445 59.113 cv
610.617 59.113 610.133 58.691 610.133 57.957 cv
610.133 56.27 li
610.133 55.535 610.602 55.113 611.461 55.113 cv
611.898 55.113 612.352 55.238 612.727 55.457 cv
612.82 55.52 612.914 55.488 612.977 55.41 cv
613.445 54.691 li
613.492 54.598 613.492 54.504 613.398 54.441 cv
612.773 54.051 612.117 53.863 611.43 53.863 cv
609.773 53.863 608.742 54.816 608.742 56.27 cv
608.742 57.941 li
608.742 59.41 609.758 60.363 611.43 60.363 cv
612.273 60.363 612.945 60.129 613.555 59.691 cv
cp
f
615.844 60.223 mo
615.953 60.223 616 60.16 616 60.035 cv
616 54.176 li
616 54.066 615.953 54.004 615.844 54.004 cv
614.797 54.004 li
614.688 54.004 614.609 54.066 614.609 54.176 cv
614.609 60.035 li
614.609 60.16 614.688 60.223 614.797 60.223 cv
cp
616.109 52.379 mo
616.109 51.926 615.781 51.598 615.328 51.598 cv
614.875 51.598 614.531 51.926 614.531 52.379 cv
614.531 52.816 614.875 53.16 615.328 53.16 cv
615.781 53.16 616.109 52.816 616.109 52.379 cv
cp
f
617.465 54.504 mo
617.402 54.551 617.402 54.613 617.465 54.707 cv
617.949 55.441 li
618.012 55.535 618.105 55.535 618.184 55.488 cv
618.574 55.254 619.121 55.098 619.73 55.098 cv
620.621 55.098 620.918 55.457 620.918 56.316 cv
620.918 56.535 li
620.559 56.488 620.121 56.441 619.73 56.441 cv
618.184 56.441 617.105 57.051 617.105 58.363 cv
617.105 59.863 618.387 60.363 619.777 60.363 cv
620.668 60.363 621.559 60.191 622.184 60.004 cv
622.277 59.973 622.324 59.895 622.324 59.801 cv
622.324 56.301 li
622.324 54.613 621.309 53.863 619.824 53.863 cv
618.855 53.863 618.043 54.098 617.465 54.504 cv
cp
618.496 58.348 mo
618.496 57.863 618.855 57.566 619.762 57.566 cv
620.137 57.566 620.605 57.613 620.918 57.66 cv
620.918 59.004 li
620.621 59.082 620.168 59.16 619.777 59.16 cv
619.043 59.16 618.496 58.91 618.496 58.348 cv
cp
f
628.441 58.379 mo
628.441 56.988 627.191 56.676 626.207 56.504 cv
625.41 56.348 624.879 56.223 624.879 55.738 cv
624.879 55.332 625.254 55.082 625.973 55.082 cv
626.504 55.082 627.051 55.238 627.488 55.473 cv
627.582 55.52 627.676 55.488 627.738 55.41 cv
628.191 54.645 li
628.254 54.551 628.223 54.457 628.129 54.41 cv
627.426 54.02 626.723 53.848 626.035 53.848 cv
624.754 53.848 623.488 54.41 623.488 55.738 cv
623.488 57.191 625.02 57.566 625.926 57.723 cv
626.457 57.816 627.035 57.957 627.035 58.441 cv
627.035 58.895 626.551 59.129 625.926 59.129 cv
625.301 59.129 624.645 58.91 624.113 58.52 cv
624.004 58.441 623.926 58.457 623.863 58.566 cv
623.41 59.348 li
623.348 59.441 623.348 59.52 623.457 59.582 cv
624.223 60.145 625.082 60.363 625.895 60.363 cv
627.332 60.363 628.441 59.723 628.441 58.379 cv
cp
f
637.84 51.816 mo
637.84 51.707 637.777 51.645 637.652 51.645 cv
632.559 51.645 li
632.449 51.645 632.387 51.707 632.387 51.816 cv
632.387 60.035 li
632.387 60.16 632.449 60.223 632.559 60.223 cv
633.652 60.223 li
633.762 60.223 633.824 60.16 633.824 60.035 cv
633.824 56.785 li
637.152 56.785 li
637.262 56.785 637.324 56.738 637.324 56.613 cv
637.324 55.645 li
637.324 55.535 637.262 55.473 637.152 55.473 cv
633.824 55.473 li
633.824 52.973 li
637.652 52.973 li
637.777 52.973 637.84 52.91 637.84 52.801 cv
cp
f
640.152 60.223 mo
640.277 60.223 640.324 60.16 640.324 60.035 cv
640.324 54.176 li
640.324 54.066 640.277 54.004 640.152 54.004 cv
639.121 54.004 li
638.996 54.004 638.934 54.066 638.934 54.176 cv
638.934 60.035 li
638.934 60.16 638.996 60.223 639.121 60.223 cv
cp
639.715 53.129 mo
639.809 53.129 639.887 53.098 639.934 53.02 cv
641.137 51.441 li
641.23 51.316 641.184 51.223 641.043 51.223 cv
639.98 51.223 li
639.902 51.223 639.809 51.254 639.762 51.348 cv
638.809 52.91 li
638.73 53.035 638.777 53.129 638.934 53.129 cv
cp
f
646.523 58.379 mo
646.523 56.988 645.273 56.676 644.289 56.504 cv
643.492 56.348 642.961 56.223 642.961 55.738 cv
642.961 55.332 643.336 55.082 644.055 55.082 cv
644.586 55.082 645.133 55.238 645.57 55.473 cv
645.664 55.52 645.758 55.488 645.82 55.41 cv
646.273 54.645 li
646.336 54.551 646.305 54.457 646.211 54.41 cv
645.508 54.02 644.805 53.848 644.117 53.848 cv
642.836 53.848 641.57 54.41 641.57 55.738 cv
641.57 57.191 643.102 57.566 644.008 57.723 cv
644.539 57.816 645.117 57.957 645.117 58.441 cv
645.117 58.895 644.633 59.129 644.008 59.129 cv
643.383 59.129 642.727 58.91 642.195 58.52 cv
642.086 58.441 642.008 58.457 641.945 58.566 cv
641.492 59.348 li
641.43 59.441 641.43 59.52 641.539 59.582 cv
642.305 60.145 643.164 60.363 643.977 60.363 cv
645.414 60.363 646.523 59.723 646.523 58.379 cv
cp
f
648.879 60.223 mo
648.988 60.223 649.035 60.16 649.035 60.035 cv
649.035 54.176 li
649.035 54.066 648.988 54.004 648.879 54.004 cv
647.832 54.004 li
647.723 54.004 647.645 54.066 647.645 54.176 cv
647.645 60.035 li
647.645 60.16 647.723 60.223 647.832 60.223 cv
cp
649.145 52.379 mo
649.145 51.926 648.816 51.598 648.363 51.598 cv
647.91 51.598 647.566 51.926 647.566 52.379 cv
647.566 52.816 647.91 53.16 648.363 53.16 cv
648.816 53.16 649.145 52.816 649.145 52.379 cv
cp
f
655.156 59.691 mo
655.25 59.629 655.25 59.551 655.203 59.457 cv
654.688 58.738 li
654.641 58.629 654.547 58.629 654.438 58.691 cv
654 58.973 653.5 59.113 653.047 59.113 cv
652.219 59.113 651.734 58.691 651.734 57.957 cv
651.734 56.27 li
651.734 55.535 652.203 55.113 653.062 55.113 cv
653.5 55.113 653.953 55.238 654.328 55.457 cv
654.422 55.52 654.516 55.488 654.578 55.41 cv
655.047 54.691 li
655.094 54.598 655.094 54.504 655 54.441 cv
654.375 54.051 653.719 53.863 653.031 53.863 cv
651.375 53.863 650.344 54.816 650.344 56.27 cv
650.344 57.941 li
650.344 59.41 651.359 60.363 653.031 60.363 cv
653.875 60.363 654.547 60.129 655.156 59.691 cv
cp
f
656.164 54.504 mo
656.102 54.551 656.102 54.613 656.164 54.707 cv
656.648 55.441 li
656.711 55.535 656.805 55.535 656.883 55.488 cv
657.273 55.254 657.82 55.098 658.43 55.098 cv
659.32 55.098 659.617 55.457 659.617 56.316 cv
659.617 56.535 li
659.258 56.488 658.82 56.441 658.43 56.441 cv
656.883 56.441 655.805 57.051 655.805 58.363 cv
655.805 59.863 657.086 60.363 658.477 60.363 cv
659.367 60.363 660.258 60.191 660.883 60.004 cv
660.977 59.973 661.023 59.895 661.023 59.801 cv
661.023 56.301 li
661.023 54.613 660.008 53.863 658.523 53.863 cv
657.555 53.863 656.742 54.098 656.164 54.504 cv
cp
657.195 58.348 mo
657.195 57.863 657.555 57.566 658.461 57.566 cv
658.836 57.566 659.305 57.613 659.617 57.66 cv
659.617 59.004 li
659.32 59.082 658.867 59.16 658.477 59.16 cv
657.742 59.16 657.195 58.91 657.195 58.348 cv
cp
f
667.141 58.379 mo
667.141 56.988 665.891 56.676 664.906 56.504 cv
664.109 56.348 663.578 56.223 663.578 55.738 cv
663.578 55.332 663.953 55.082 664.672 55.082 cv
665.203 55.082 665.75 55.238 666.188 55.473 cv
666.281 55.52 666.375 55.488 666.438 55.41 cv
666.891 54.645 li
666.953 54.551 666.922 54.457 666.828 54.41 cv
666.125 54.02 665.422 53.848 664.734 53.848 cv
663.453 53.848 662.188 54.41 662.188 55.738 cv
662.188 57.191 663.719 57.566 664.625 57.723 cv
665.156 57.816 665.734 57.957 665.734 58.441 cv
665.734 58.895 665.25 59.129 664.625 59.129 cv
664 59.129 663.344 58.91 662.812 58.52 cv
662.703 58.441 662.625 58.457 662.562 58.566 cv
662.109 59.348 li
662.047 59.441 662.047 59.52 662.156 59.582 cv
662.922 60.145 663.781 60.363 664.594 60.363 cv
666.031 60.363 667.141 59.723 667.141 58.379 cv
cp
f
674.633 58.535 mo
674.367 58.691 673.961 58.801 673.555 58.785 cv
672.836 58.785 672.195 58.457 672.195 57.535 cv
672.195 54.176 li
672.195 54.066 672.133 54.004 672.023 54.004 cv
670.977 54.004 li
670.867 54.004 670.805 54.066 670.805 54.176 cv
670.805 57.598 li
670.805 59.254 672.117 60.035 673.367 60.035 cv
673.805 60.035 674.258 59.941 674.648 59.832 cv
674.695 61.02 674.164 61.379 673.336 61.379 cv
672.695 61.379 672.164 61.145 671.711 60.832 cv
671.633 60.77 671.539 60.801 671.477 60.895 cv
670.961 61.629 li
670.898 61.723 670.898 61.801 671.008 61.863 cv
671.633 62.379 672.336 62.629 673.352 62.629 cv
675.195 62.629 676.023 61.676 676.023 59.832 cv
676.023 54.176 li
676.023 54.066 675.977 54.004 675.852 54.004 cv
674.82 54.004 li
674.695 54.004 674.633 54.066 674.633 54.176 cv
cp
f
681.641 60.223 mo
681.75 60.223 681.812 60.16 681.812 60.035 cv
681.812 57.629 li
681.812 56.504 681.766 55.035 681.719 53.863 cv
681.75 53.848 li
682.047 54.473 682.438 55.285 682.828 56.066 cv
683.891 58.129 li
683.922 58.207 684 58.254 684.094 58.254 cv
685 58.254 li
685.109 58.254 685.172 58.207 685.203 58.129 cv
686.266 56.066 li
686.656 55.285 687.062 54.473 687.344 53.848 cv
687.375 53.863 li
687.328 55.035 687.281 56.504 687.281 57.629 cv
687.281 60.035 li
687.281 60.16 687.344 60.223 687.453 60.223 cv
688.547 60.223 li
688.672 60.223 688.734 60.16 688.734 60.035 cv
688.734 51.816 li
688.734 51.707 688.672 51.645 688.547 51.645 cv
687.25 51.645 li
687.172 51.645 687.094 51.676 687.047 51.77 cv
685.594 54.504 li
685.266 55.098 684.766 56.176 684.578 56.613 cv
684.531 56.613 li
684.328 56.176 683.828 55.098 683.5 54.504 cv
682.047 51.77 li
682 51.676 681.938 51.645 681.844 51.645 cv
680.547 51.645 li
680.438 51.645 680.375 51.707 680.375 51.816 cv
680.375 60.035 li
680.375 60.16 680.438 60.223 680.547 60.223 cv
cp
f
690.414 54.504 mo
690.352 54.551 690.352 54.613 690.414 54.707 cv
690.898 55.441 li
690.961 55.535 691.055 55.535 691.133 55.488 cv
691.523 55.254 692.07 55.098 692.68 55.098 cv
693.57 55.098 693.867 55.457 693.867 56.316 cv
693.867 56.535 li
693.508 56.488 693.07 56.441 692.68 56.441 cv
691.133 56.441 690.055 57.051 690.055 58.363 cv
690.055 59.863 691.336 60.363 692.727 60.363 cv
693.617 60.363 694.508 60.191 695.133 60.004 cv
695.227 59.973 695.273 59.895 695.273 59.801 cv
695.273 56.301 li
695.273 54.613 694.258 53.863 692.773 53.863 cv
691.805 53.863 690.992 54.098 690.414 54.504 cv
cp
691.445 58.348 mo
691.445 57.863 691.805 57.566 692.711 57.566 cv
693.086 57.566 693.555 57.613 693.867 57.66 cv
693.867 59.004 li
693.57 59.082 693.117 59.16 692.727 59.16 cv
691.992 59.16 691.445 58.91 691.445 58.348 cv
cp
f
698.059 58.051 mo
698.059 55.301 li
699.34 55.301 li
699.434 55.301 699.512 55.238 699.512 55.129 cv
699.512 54.254 li
699.512 54.145 699.434 54.098 699.34 54.098 cv
698.043 54.098 li
697.934 52.645 li
697.934 52.551 697.855 52.488 697.762 52.488 cv
696.855 52.488 li
696.73 52.488 696.668 52.551 696.668 52.66 cv
696.668 58.145 li
696.668 59.738 697.637 60.363 698.887 60.363 cv
699.074 60.363 699.324 60.348 699.527 60.348 cv
699.652 60.332 699.699 60.254 699.699 60.145 cv
699.699 59.238 li
699.699 59.129 699.621 59.066 699.496 59.066 cv
699.309 59.082 699.121 59.098 699.012 59.098 cv
698.402 59.098 698.059 58.707 698.059 58.051 cv
cp
f
705.695 56.316 mo
705.695 54.566 704.414 53.863 703.102 53.863 cv
701.789 53.863 700.461 54.566 700.461 56.316 cv
700.461 58.02 li
700.461 59.629 701.742 60.363 703.086 60.363 cv
704.117 60.363 704.883 60.035 705.523 59.535 cv
705.617 59.473 705.633 59.363 705.555 59.285 cv
705.07 58.629 li
705.008 58.535 704.914 58.535 704.836 58.598 cv
704.383 58.895 703.883 59.145 703.133 59.145 cv
702.367 59.145 701.867 58.77 701.867 58.035 cv
701.867 57.707 li
705.508 57.707 li
705.633 57.707 705.695 57.645 705.695 57.535 cv
cp
704.336 56.316 mo
704.336 56.629 li
701.867 56.629 li
701.867 56.316 li
701.867 55.426 702.398 55.082 703.102 55.082 cv
703.773 55.082 704.336 55.441 704.336 56.316 cv
cp
f
710.984 54.41 mo
710.547 54.066 709.953 53.863 709.25 53.863 cv
708.484 53.863 707.734 54.035 707.078 54.332 cv
706.969 54.379 706.938 54.457 706.938 54.551 cv
706.938 60.035 li
706.938 60.16 706.984 60.223 707.109 60.223 cv
708.141 60.223 li
708.266 60.223 708.328 60.16 708.328 60.035 cv
708.328 55.238 li
708.562 55.176 708.875 55.113 709.281 55.113 cv
710.062 55.113 710.469 55.488 710.469 56.363 cv
710.469 60.035 li
710.469 60.16 710.547 60.223 710.656 60.223 cv
711.688 60.223 li
711.797 60.223 711.859 60.16 711.859 60.035 cv
711.859 56.395 li
711.859 56.035 711.797 55.707 711.703 55.426 cv
712.016 55.223 712.375 55.129 712.766 55.129 cv
713.625 55.129 714 55.598 714 56.363 cv
714 60.035 li
714 60.16 714.062 60.223 714.172 60.223 cv
715.219 60.223 li
715.312 60.223 715.375 60.16 715.375 60.035 cv
715.375 56.426 li
715.375 54.738 714.297 53.863 712.797 53.863 cv
712.109 53.863 711.594 54.035 710.984 54.41 cv
cp
f
716.777 54.504 mo
716.715 54.551 716.715 54.613 716.777 54.707 cv
717.262 55.441 li
717.324 55.535 717.418 55.535 717.496 55.488 cv
717.887 55.254 718.434 55.098 719.043 55.098 cv
719.934 55.098 720.23 55.457 720.23 56.316 cv
720.23 56.535 li
719.871 56.488 719.434 56.441 719.043 56.441 cv
717.496 56.441 716.418 57.051 716.418 58.363 cv
716.418 59.863 717.699 60.363 719.09 60.363 cv
719.98 60.363 720.871 60.191 721.496 60.004 cv
721.59 59.973 721.637 59.895 721.637 59.801 cv
721.637 56.301 li
721.637 54.613 720.621 53.863 719.137 53.863 cv
718.168 53.863 717.355 54.098 716.777 54.504 cv
cp
717.809 58.348 mo
717.809 57.863 718.168 57.566 719.074 57.566 cv
719.449 57.566 719.918 57.613 720.23 57.66 cv
720.23 59.004 li
719.934 59.082 719.48 59.16 719.09 59.16 cv
718.355 59.16 717.809 58.91 717.809 58.348 cv
cp
719.184 53.129 mo
719.262 53.129 719.355 53.098 719.402 53.02 cv
720.605 51.441 li
720.699 51.316 720.652 51.223 720.496 51.223 cv
719.449 51.223 li
719.355 51.223 719.277 51.254 719.23 51.348 cv
718.277 52.91 li
718.184 53.035 718.246 53.129 718.387 53.129 cv
cp
f
724.426 58.051 mo
724.426 55.301 li
725.707 55.301 li
725.801 55.301 725.879 55.238 725.879 55.129 cv
725.879 54.254 li
725.879 54.145 725.801 54.098 725.707 54.098 cv
724.41 54.098 li
724.301 52.645 li
724.301 52.551 724.223 52.488 724.129 52.488 cv
723.223 52.488 li
723.098 52.488 723.035 52.551 723.035 52.66 cv
723.035 58.145 li
723.035 59.738 724.004 60.363 725.254 60.363 cv
725.441 60.363 725.691 60.348 725.895 60.348 cv
726.02 60.332 726.066 60.254 726.066 60.145 cv
726.066 59.238 li
726.066 59.129 725.988 59.066 725.863 59.066 cv
725.676 59.082 725.488 59.098 725.379 59.098 cv
724.77 59.098 724.426 58.707 724.426 58.051 cv
cp
f
728.297 60.223 mo
728.406 60.223 728.453 60.16 728.453 60.035 cv
728.453 54.176 li
728.453 54.066 728.406 54.004 728.297 54.004 cv
727.25 54.004 li
727.141 54.004 727.062 54.066 727.062 54.176 cv
727.062 60.035 li
727.062 60.16 727.141 60.223 727.25 60.223 cv
cp
728.562 52.379 mo
728.562 51.926 728.234 51.598 727.781 51.598 cv
727.328 51.598 726.984 51.926 726.984 52.379 cv
726.984 52.816 727.328 53.16 727.781 53.16 cv
728.234 53.16 728.562 52.816 728.562 52.379 cv
cp
f
734.574 59.691 mo
734.668 59.629 734.668 59.551 734.621 59.457 cv
734.105 58.738 li
734.059 58.629 733.965 58.629 733.855 58.691 cv
733.418 58.973 732.918 59.113 732.465 59.113 cv
731.637 59.113 731.152 58.691 731.152 57.957 cv
731.152 56.27 li
731.152 55.535 731.621 55.113 732.48 55.113 cv
732.918 55.113 733.371 55.238 733.746 55.457 cv
733.84 55.52 733.934 55.488 733.996 55.41 cv
734.465 54.691 li
734.512 54.598 734.512 54.504 734.418 54.441 cv
733.793 54.051 733.137 53.863 732.449 53.863 cv
730.793 53.863 729.762 54.816 729.762 56.27 cv
729.762 57.941 li
729.762 59.41 730.777 60.363 732.449 60.363 cv
733.293 60.363 733.965 60.129 734.574 59.691 cv
cp
f
735.582 54.504 mo
735.52 54.551 735.52 54.613 735.582 54.707 cv
736.066 55.441 li
736.129 55.535 736.223 55.535 736.301 55.488 cv
736.691 55.254 737.238 55.098 737.848 55.098 cv
738.738 55.098 739.035 55.457 739.035 56.316 cv
739.035 56.535 li
738.676 56.488 738.238 56.441 737.848 56.441 cv
736.301 56.441 735.223 57.051 735.223 58.363 cv
735.223 59.863 736.504 60.363 737.895 60.363 cv
738.785 60.363 739.676 60.191 740.301 60.004 cv
740.395 59.973 740.441 59.895 740.441 59.801 cv
740.441 56.301 li
740.441 54.613 739.426 53.863 737.941 53.863 cv
736.973 53.863 736.16 54.098 735.582 54.504 cv
cp
736.613 58.348 mo
736.613 57.863 736.973 57.566 737.879 57.566 cv
738.254 57.566 738.723 57.613 739.035 57.66 cv
739.035 59.004 li
738.738 59.082 738.285 59.16 737.895 59.16 cv
737.16 59.16 736.613 58.91 736.613 58.348 cv
cp
f
94.695 75.129 mo
93.695 75.129 92.965 74.812 92.168 74.168 cv
92.109 74.117 92.109 74.066 92.148 74.004 cv
92.492 73.531 li
92.531 73.469 92.594 73.461 92.645 73.5 cv
93.34 74.023 93.969 74.301 94.727 74.309 cv
95.645 74.309 96.477 73.922 96.477 73.074 cv
96.477 72.238 95.734 71.977 94.586 71.723 cv
93.359 71.449 92.168 70.934 92.168 69.59 cv
92.168 68.258 93.359 67.68 94.746 67.68 cv
95.645 67.68 96.332 67.93 97.102 68.488 cv
97.172 68.527 97.172 68.59 97.129 68.641 cv
96.797 69.113 li
96.758 69.172 96.695 69.172 96.633 69.137 cv
96.02 68.711 95.371 68.5 94.676 68.477 cv
93.715 68.477 93.039 68.871 93.039 69.609 cv
93.039 70.379 93.746 70.648 94.805 70.895 cv
96.148 71.195 97.344 71.621 97.344 73.055 cv
97.344 74.5 96.121 75.129 94.695 75.129 cv
f
101.688 70.43 mo
100.93 70.43 100.383 70.824 100.383 71.691 cv
100.383 72.117 li
102.988 72.117 li
102.988 71.691 li
102.988 70.832 102.426 70.43 101.688 70.43 cv
103.801 72.684 mo
103.801 72.762 103.758 72.805 103.688 72.805 cv
100.383 72.805 li
100.383 73.227 li
100.383 73.984 100.949 74.391 101.695 74.391 cv
102.395 74.391 102.871 74.117 103.242 73.82 cv
103.305 73.785 103.363 73.793 103.406 73.855 cv
103.699 74.238 li
103.75 74.297 103.738 74.348 103.676 74.398 cv
103.172 74.824 102.527 75.129 101.676 75.129 cv
100.586 75.129 99.543 74.5 99.543 73.227 cv
99.543 71.691 li
99.543 70.309 100.578 69.68 101.688 69.68 cv
102.789 69.68 103.801 70.309 103.801 71.691 cv
cp
f
106.324 75.016 mo
106.254 75.016 106.215 74.977 106.215 74.906 cv
106.215 70.184 li
106.215 70.125 106.234 70.074 106.293 70.055 cv
106.801 69.812 107.426 69.68 108.02 69.68 cv
108.355 69.68 108.699 69.711 109.062 69.762 cv
109.133 69.773 109.164 69.82 109.164 69.891 cv
109.164 70.387 li
109.164 70.469 109.125 70.512 109.043 70.488 cv
108.762 70.449 108.438 70.418 108.133 70.418 cv
107.719 70.418 107.316 70.512 107.043 70.621 cv
107.043 74.906 li
107.043 74.977 107.004 75.016 106.922 75.016 cv
cp
f
112.582 68.984 mo
112.488 68.984 112.438 68.922 112.488 68.84 cv
113.309 67.496 li
113.336 67.457 113.398 67.426 113.449 67.426 cv
114.086 67.426 li
114.176 67.426 114.207 67.488 114.145 67.566 cv
113.176 68.91 li
113.148 68.953 113.098 68.984 113.035 68.984 cv
cp
113.129 70.43 mo
112.367 70.43 111.82 70.824 111.82 71.691 cv
111.82 72.117 li
114.43 72.117 li
114.43 71.691 li
114.43 70.832 113.863 70.43 113.129 70.43 cv
115.238 72.684 mo
115.238 72.762 115.199 72.805 115.125 72.805 cv
111.82 72.805 li
111.82 73.227 li
111.82 73.984 112.387 74.391 113.133 74.391 cv
113.832 74.391 114.309 74.117 114.684 73.824 cv
114.742 73.785 114.805 73.793 114.844 73.855 cv
115.137 74.238 li
115.188 74.297 115.176 74.348 115.117 74.398 cv
114.609 74.824 113.965 75.129 113.117 75.129 cv
112.023 75.129 110.984 74.5 110.984 73.227 cv
110.984 71.691 li
110.984 70.309 112.016 69.68 113.129 69.68 cv
114.227 69.68 115.238 70.309 115.238 71.691 cv
cp
f
117.785 75.016 mo
117.703 75.016 117.664 74.977 117.664 74.906 cv
117.664 69.914 li
117.664 69.84 117.703 69.789 117.785 69.789 cv
118.379 69.789 li
118.453 69.789 118.492 69.84 118.492 69.914 cv
118.492 74.906 li
118.492 74.977 118.453 75.016 118.379 75.016 cv
cp
118.09 68.82 mo
117.805 68.82 117.582 68.609 117.582 68.324 cv
117.582 68.031 117.805 67.832 118.09 67.832 cv
118.371 67.832 118.582 68.031 118.582 68.324 cv
118.582 68.609 118.371 68.82 118.09 68.82 cv
f
122.859 75.129 mo
122.16 75.129 121.465 74.926 120.855 74.48 cv
120.797 74.441 120.797 74.379 120.828 74.316 cv
121.098 73.852 li
121.141 73.785 121.191 73.773 121.262 73.824 cv
121.746 74.188 122.301 74.387 122.879 74.387 cv
123.555 74.387 124.07 74.105 124.07 73.582 cv
124.07 73.016 123.441 72.883 122.879 72.773 cv
122.148 72.621 120.906 72.34 120.906 71.164 cv
120.906 70.133 121.887 69.68 122.898 69.68 cv
123.535 69.68 124.102 69.84 124.656 70.156 cv
124.727 70.184 124.738 70.246 124.695 70.309 cv
124.422 70.762 li
124.395 70.824 124.332 70.844 124.273 70.801 cv
123.855 70.582 123.363 70.43 122.859 70.43 cv
122.148 70.43 121.727 70.711 121.727 71.164 cv
121.727 71.723 122.324 71.875 123.039 72.016 cv
123.848 72.176 124.91 72.406 124.91 73.539 cv
124.91 74.57 124.039 75.129 122.859 75.129 cv
f
135.57 69.68 mo
136.805 69.68 137.664 70.398 137.664 71.742 cv
137.664 74.906 li
137.664 74.977 137.621 75.016 137.551 75.016 cv
136.953 75.016 li
136.871 75.016 136.832 74.977 136.832 74.906 cv
136.832 71.723 li
136.832 70.914 136.418 70.43 135.547 70.43 cv
135.125 70.43 134.742 70.559 134.438 70.773 cv
134.559 71.035 134.629 71.367 134.629 71.73 cv
134.629 74.906 li
134.629 74.977 134.59 75.016 134.52 75.016 cv
133.914 75.016 li
133.84 75.016 133.801 74.977 133.801 74.906 cv
133.801 71.723 li
133.801 70.863 133.406 70.43 132.59 70.43 cv
132.176 70.43 131.852 70.508 131.566 70.609 cv
131.566 74.906 li
131.566 74.977 131.527 75.016 131.445 75.016 cv
130.848 75.016 li
130.781 75.016 130.738 74.977 130.738 74.906 cv
130.738 70.215 li
130.738 70.156 130.762 70.105 130.828 70.074 cv
131.363 69.832 131.953 69.68 132.57 69.68 cv
133.184 69.68 133.66 69.863 134.016 70.176 cv
134.5 69.852 134.965 69.68 135.57 69.68 cv
f
140.391 75.016 mo
140.309 75.016 140.27 74.977 140.27 74.906 cv
140.27 69.914 li
140.27 69.84 140.309 69.789 140.391 69.789 cv
140.988 69.789 li
141.055 69.789 141.098 69.84 141.098 69.914 cv
141.098 74.906 li
141.098 74.977 141.055 75.016 140.988 75.016 cv
cp
140.691 68.82 mo
140.41 68.82 140.188 68.609 140.188 68.324 cv
140.188 68.031 140.41 67.832 140.691 67.832 cv
140.973 67.832 141.188 68.031 141.188 68.324 cv
141.188 68.609 140.973 68.82 140.691 68.82 cv
f
145.461 75.129 mo
144.766 75.129 144.066 74.926 143.461 74.48 cv
143.398 74.441 143.398 74.379 143.43 74.316 cv
143.703 73.852 li
143.746 73.785 143.793 73.773 143.863 73.824 cv
144.348 74.188 144.906 74.387 145.484 74.387 cv
146.16 74.387 146.676 74.105 146.676 73.582 cv
146.676 73.016 146.051 72.883 145.484 72.773 cv
144.754 72.621 143.512 72.34 143.512 71.164 cv
143.512 70.133 144.492 69.68 145.504 69.68 cv
146.137 69.68 146.703 69.84 147.262 70.156 cv
147.332 70.184 147.344 70.246 147.301 70.309 cv
147.031 70.762 li
147 70.824 146.938 70.844 146.879 70.801 cv
146.461 70.582 145.969 70.43 145.461 70.43 cv
144.754 70.43 144.328 70.711 144.328 71.164 cv
144.328 71.723 144.926 71.875 145.645 72.016 cv
146.453 72.176 147.512 72.406 147.512 73.539 cv
147.512 74.57 146.645 75.129 145.461 75.129 cv
f
155.121 74.359 mo
155.234 74.359 155.426 74.352 155.605 74.336 cv
155.688 74.336 155.73 74.379 155.73 74.449 cv
155.73 74.984 li
155.73 75.047 155.699 75.098 155.629 75.105 cv
155.445 75.117 155.215 75.129 155.082 75.129 cv
154.07 75.129 153.324 74.582 153.324 73.336 cv
153.324 68.629 li
153.324 68.547 153.363 68.508 153.445 68.508 cv
153.973 68.508 li
154.031 68.508 154.07 68.547 154.082 68.621 cv
154.152 69.84 li
155.465 69.84 li
155.535 69.84 155.578 69.883 155.578 69.953 cv
155.578 70.457 li
155.578 70.539 155.535 70.582 155.465 70.582 cv
154.152 70.582 li
154.152 73.297 li
154.152 73.965 154.496 74.359 155.121 74.359 cv
f
159.77 70.43 mo
159.012 70.43 158.469 70.824 158.469 71.691 cv
158.469 72.117 li
161.074 72.117 li
161.074 71.691 li
161.074 70.832 160.508 70.43 159.77 70.43 cv
161.883 72.684 mo
161.883 72.762 161.844 72.805 161.773 72.805 cv
158.469 72.805 li
158.469 73.227 li
158.469 73.984 159.031 74.391 159.781 74.391 cv
160.477 74.391 160.953 74.117 161.328 73.82 cv
161.387 73.785 161.445 73.793 161.488 73.855 cv
161.781 74.238 li
161.832 74.297 161.824 74.348 161.762 74.398 cv
161.258 74.824 160.609 75.129 159.762 75.129 cv
158.668 75.129 157.629 74.5 157.629 73.227 cv
157.629 71.691 li
157.629 70.309 158.656 69.68 159.77 69.68 cv
160.871 69.68 161.883 70.309 161.883 71.691 cv
cp
f
166.016 75.129 mo
165.316 75.129 164.621 74.926 164.016 74.48 cv
163.953 74.441 163.953 74.379 163.984 74.316 cv
164.258 73.852 li
164.297 73.785 164.348 73.773 164.418 73.824 cv
164.902 74.188 165.461 74.387 166.035 74.387 cv
166.715 74.387 167.227 74.105 167.227 73.582 cv
167.227 73.016 166.602 72.883 166.035 72.773 cv
165.309 72.621 164.066 72.34 164.066 71.164 cv
164.066 70.133 165.047 69.68 166.059 69.68 cv
166.691 69.68 167.258 69.84 167.816 70.156 cv
167.887 70.184 167.895 70.246 167.855 70.309 cv
167.582 70.762 li
167.551 70.824 167.488 70.844 167.43 70.801 cv
167.016 70.582 166.523 70.43 166.016 70.43 cv
165.309 70.43 164.883 70.711 164.883 71.164 cv
164.883 71.723 165.48 71.875 166.199 72.016 cv
167.004 72.176 168.066 72.406 168.066 73.539 cv
168.066 74.57 167.199 75.129 166.016 75.129 cv
f
172.137 74.359 mo
172.25 74.359 172.441 74.352 172.621 74.336 cv
172.703 74.336 172.746 74.379 172.746 74.449 cv
172.746 74.984 li
172.746 75.047 172.715 75.098 172.645 75.105 cv
172.461 75.117 172.23 75.129 172.098 75.129 cv
171.09 75.129 170.34 74.582 170.34 73.336 cv
170.34 68.629 li
170.34 68.547 170.379 68.508 170.461 68.508 cv
170.988 68.508 li
171.047 68.508 171.09 68.547 171.098 68.621 cv
171.168 69.84 li
172.484 69.84 li
172.551 69.84 172.594 69.883 172.594 69.953 cv
172.594 70.457 li
172.594 70.539 172.551 70.582 172.484 70.582 cv
171.168 70.582 li
171.168 73.297 li
171.168 73.965 171.512 74.359 172.137 74.359 cv
f
174.996 75.016 mo
174.918 75.016 174.875 74.977 174.875 74.906 cv
174.875 69.914 li
174.875 69.84 174.918 69.789 174.996 69.789 cv
175.594 69.789 li
175.664 69.789 175.707 69.84 175.707 69.914 cv
175.707 74.906 li
175.707 74.977 175.664 75.016 175.594 75.016 cv
cp
175.301 68.82 mo
175.02 68.82 174.797 68.609 174.797 68.324 cv
174.797 68.031 175.02 67.832 175.301 67.832 cv
175.586 67.832 175.797 68.031 175.797 68.324 cv
175.797 68.609 175.586 68.82 175.301 68.82 cv
f
180.406 74.105 mo
180.859 74.105 181.352 73.996 181.637 73.801 cv
181.637 70.598 li
181.344 70.5 180.82 70.43 180.445 70.43 cv
179.574 70.43 179.012 70.781 179.012 71.781 cv
179.012 72.793 li
179.012 73.766 179.605 74.105 180.406 74.105 cv
180.332 77.039 mo
179.523 77.039 178.918 76.785 178.383 76.34 cv
178.332 76.301 178.332 76.25 178.375 76.176 cv
178.664 75.742 li
178.707 75.684 178.766 75.676 178.828 75.727 cv
179.242 76.059 179.727 76.289 180.332 76.289 cv
181.242 76.289 181.668 75.836 181.637 74.805 cv
181.637 74.562 li
181.266 74.742 180.77 74.855 180.344 74.855 cv
179.129 74.855 178.172 74.199 178.172 72.793 cv
178.172 71.781 li
178.172 70.258 179.172 69.68 180.438 69.68 cv
181.141 69.68 181.848 69.844 182.375 70.074 cv
182.434 70.094 182.465 70.133 182.465 70.207 cv
182.465 74.875 li
182.465 76.199 181.84 77.039 180.332 77.039 cv
f
187.145 74.391 mo
188.055 74.391 188.539 73.902 188.539 73.145 cv
188.539 71.691 li
188.539 70.922 188.055 70.43 187.145 70.43 cv
186.246 70.43 185.762 70.922 185.762 71.691 cv
185.762 73.145 li
185.762 73.902 186.246 74.391 187.145 74.391 cv
187.145 75.129 mo
185.781 75.129 184.922 74.328 184.922 73.145 cv
184.922 71.691 li
184.922 70.508 185.781 69.68 187.145 69.68 cv
188.52 69.68 189.367 70.508 189.367 71.691 cv
189.367 73.145 li
189.367 74.328 188.52 75.129 187.145 75.129 cv
f
193.539 75.129 mo
192.844 75.129 192.145 74.926 191.539 74.48 cv
191.48 74.441 191.48 74.379 191.512 74.316 cv
191.781 73.852 li
191.824 73.785 191.875 73.773 191.945 73.824 cv
192.43 74.188 192.988 74.387 193.562 74.387 cv
194.238 74.387 194.754 74.105 194.754 73.582 cv
194.754 73.016 194.129 72.883 193.562 72.773 cv
192.836 72.621 191.59 72.34 191.59 71.164 cv
191.59 70.133 192.57 69.68 193.582 69.68 cv
194.219 69.68 194.781 69.84 195.34 70.156 cv
195.41 70.184 195.422 70.246 195.379 70.309 cv
195.109 70.762 li
195.078 70.824 195.016 70.844 194.953 70.801 cv
194.539 70.582 194.047 70.43 193.539 70.43 cv
192.836 70.43 192.41 70.711 192.41 71.164 cv
192.41 71.723 193.004 71.875 193.723 72.016 cv
194.531 72.176 195.594 72.406 195.594 73.539 cv
195.594 74.57 194.723 75.129 193.539 75.129 cv
f
96.055 39.875 mo
97.289 39.875 97.891 39.324 97.891 38.168 cv
97.891 37.031 97.289 36.461 96.055 36.461 cv
94.426 36.461 li
94.426 39.875 li
cp
96.414 34.059 mo
98.961 34.059 100.57 35.648 100.57 38.168 cv
100.57 40.703 98.961 42.293 96.414 42.293 cv
94.426 42.293 li
94.426 45.383 li
94.426 45.578 94.332 45.676 94.152 45.676 cv
92.105 45.676 li
91.926 45.676 91.828 45.578 91.828 45.383 cv
91.828 34.348 li
91.828 34.152 91.926 34.059 92.105 34.059 cv
cp
f
105.402 43.695 mo
106.262 43.695 106.734 43.254 106.734 42.441 cv
106.734 40.492 li
106.734 39.68 106.262 39.207 105.402 39.207 cv
104.539 39.207 104.07 39.68 104.07 40.492 cv
104.07 42.441 li
104.07 43.254 104.539 43.695 105.402 43.695 cv
105.402 45.887 mo
103.012 45.887 101.531 44.586 101.531 42.441 cv
101.531 40.492 li
101.531 38.312 103.012 37 105.402 37 cv
107.773 37 109.254 38.312 109.254 40.492 cv
109.254 42.441 li
109.254 44.586 107.773 45.887 105.402 45.887 cv
f
111.074 45.691 mo
110.879 45.691 110.781 45.578 110.781 45.398 cv
110.781 38.004 li
110.781 37.844 110.848 37.73 110.992 37.664 cv
111.984 37.258 113.254 37 114.406 37 cv
116.875 37 118.273 38.332 118.273 40.766 cv
118.273 45.398 li
118.273 45.578 118.176 45.691 117.98 45.691 cv
116.062 45.691 li
115.867 45.691 115.77 45.578 115.77 45.398 cv
115.77 40.766 li
115.77 39.582 115.266 39.211 114.406 39.211 cv
113.949 39.211 113.527 39.273 113.266 39.355 cv
113.266 45.398 li
113.266 45.578 113.172 45.691 112.992 45.691 cv
cp
f
123.504 43.66 mo
123.652 43.66 123.848 43.645 124.027 43.625 cv
124.238 43.594 124.336 43.676 124.336 43.871 cv
124.336 45.465 li
124.336 45.625 124.27 45.754 124.109 45.789 cv
123.832 45.836 123.473 45.867 123.086 45.867 cv
121.199 45.867 119.93 44.848 119.93 42.766 cv
119.93 35.473 li
119.93 35.293 120.031 35.195 120.227 35.195 cv
121.914 35.195 li
122.094 35.195 122.191 35.277 122.207 35.453 cv
122.402 37.406 li
123.863 37.406 li
124.043 37.406 124.156 37.5 124.156 37.68 cv
124.156 39.242 li
124.156 39.418 124.043 39.516 123.863 39.516 cv
122.418 39.516 li
122.418 42.457 li
122.418 43.254 122.793 43.66 123.504 43.66 cv
f
125.91 45.676 mo
125.734 45.676 125.621 45.578 125.621 45.383 cv
125.621 37.5 li
125.621 37.324 125.734 37.223 125.91 37.223 cv
127.828 37.223 li
128.008 37.223 128.105 37.324 128.105 37.5 cv
128.105 45.383 li
128.105 45.578 128.008 45.676 127.828 45.676 cv
cp
126.871 36.055 mo
126.074 36.055 125.488 35.453 125.488 34.691 cv
125.488 33.895 126.074 33.324 126.871 33.324 cv
127.684 33.324 128.234 33.895 128.234 34.691 cv
128.234 35.453 127.684 36.055 126.871 36.055 cv
f
133.488 35.992 mo
132.77 35.992 132.414 36.395 132.414 37.16 cv
132.414 37.438 li
133.941 37.438 li
134.121 37.438 134.215 37.535 134.215 37.715 cv
134.215 39.273 li
134.215 39.453 134.121 39.547 133.941 39.547 cv
132.414 39.547 li
132.414 45.383 li
132.414 45.578 132.316 45.676 132.137 45.676 cv
130.219 45.676 li
130.027 45.676 129.926 45.578 129.926 45.383 cv
129.926 37.062 li
129.926 34.949 131.195 33.844 133.062 33.844 cv
133.488 33.844 133.844 33.863 134.137 33.91 cv
134.297 33.941 134.379 34.059 134.379 34.234 cv
134.379 35.746 li
134.379 35.926 134.297 36.039 134.168 36.023 cv
133.973 36.004 133.73 35.992 133.488 35.992 cv
f
135.715 45.676 mo
135.535 45.676 135.422 45.578 135.422 45.383 cv
135.422 37.5 li
135.422 37.324 135.535 37.223 135.715 37.223 cv
137.633 37.223 li
137.809 37.223 137.91 37.324 137.91 37.5 cv
137.91 45.383 li
137.91 45.578 137.809 45.676 137.633 45.676 cv
cp
136.672 36.055 mo
135.875 36.055 135.289 35.453 135.289 34.691 cv
135.289 33.895 135.875 33.324 136.672 33.324 cv
137.484 33.324 138.039 33.895 138.039 34.691 cv
138.039 35.453 137.484 36.055 136.672 36.055 cv
f
143.32 45.887 mo
140.867 45.887 139.469 44.523 139.469 42.344 cv
139.469 40.508 li
139.469 38.363 140.883 37 143.305 37 cv
144.246 37 145.141 37.258 145.969 37.762 cv
146.113 37.859 146.145 38.004 146.051 38.168 cv
145.188 39.469 li
145.09 39.629 144.961 39.648 144.781 39.566 cv
144.359 39.336 143.891 39.191 143.418 39.191 cv
142.523 39.191 141.984 39.68 141.984 40.508 cv
141.984 42.344 li
141.984 43.254 142.559 43.695 143.398 43.695 cv
143.953 43.695 144.473 43.531 144.961 43.223 cv
145.121 43.121 145.27 43.156 145.367 43.305 cv
146.246 44.602 li
146.34 44.75 146.328 44.895 146.195 44.992 cv
145.367 45.578 144.441 45.887 143.32 45.887 cv
f
147.707 45.676 mo
147.531 45.676 147.418 45.578 147.418 45.383 cv
147.418 37.5 li
147.418 37.324 147.531 37.223 147.707 37.223 cv
149.625 37.223 li
149.805 37.223 149.902 37.324 149.902 37.5 cv
149.902 45.383 li
149.902 45.578 149.805 45.676 149.625 45.676 cv
cp
148.668 36.055 mo
147.871 36.055 147.289 35.453 147.289 34.691 cv
147.289 33.895 147.871 33.324 148.668 33.324 cv
149.48 33.324 150.031 33.895 150.031 34.691 cv
150.031 35.453 149.48 36.055 148.668 36.055 cv
f
154.988 43.871 mo
155.363 43.871 155.801 43.809 156.094 43.742 cv
156.094 42.312 li
155.77 42.246 155.332 42.215 154.973 42.215 cv
154.078 42.215 153.688 42.508 153.688 43.027 cv
153.688 43.594 154.211 43.871 154.988 43.871 cv
155.02 37 mo
157.262 37 158.582 38.168 158.582 40.637 cv
158.582 45.09 li
158.582 45.254 158.5 45.367 158.336 45.414 cv
157.379 45.707 156.094 45.887 154.988 45.887 cv
152.652 45.887 151.172 45.008 151.172 43.09 cv
151.172 41.402 152.504 40.559 154.711 40.559 cv
155.215 40.559 155.688 40.605 156.094 40.656 cv
156.094 40.492 li
156.094 39.629 155.785 39.16 154.73 39.16 cv
154.016 39.16 153.172 39.355 152.699 39.613 cv
152.551 39.695 152.387 39.68 152.309 39.52 cv
151.641 38.25 li
151.562 38.086 151.562 37.973 151.676 37.891 cv
152.438 37.406 153.625 37 155.02 37 cv
f
168.352 45.867 mo
165.488 45.867 163.832 44.246 163.832 41.402 cv
163.832 34.348 li
163.832 34.152 163.93 34.059 164.125 34.059 cv
166.188 34.059 li
166.367 34.059 166.48 34.152 166.48 34.348 cv
166.48 41.402 li
166.48 42.719 167.148 43.398 168.352 43.398 cv
169.551 43.398 170.25 42.719 170.25 41.402 cv
170.25 34.348 li
170.25 34.152 170.348 34.059 170.527 34.059 cv
172.609 34.059 li
172.785 34.059 172.883 34.152 172.883 34.348 cv
172.883 41.402 li
172.883 44.246 171.207 45.867 168.352 45.867 cv
f
174.996 45.691 mo
174.801 45.691 174.707 45.578 174.707 45.398 cv
174.707 38.004 li
174.707 37.844 174.77 37.73 174.918 37.664 cv
175.906 37.258 177.176 37 178.328 37 cv
180.801 37 182.195 38.332 182.195 40.766 cv
182.195 45.398 li
182.195 45.578 182.102 45.691 181.902 45.691 cv
179.988 45.691 li
179.789 45.691 179.695 45.578 179.695 45.398 cv
179.695 40.766 li
179.695 39.582 179.191 39.211 178.328 39.211 cv
177.871 39.211 177.453 39.273 177.191 39.355 cv
177.191 45.398 li
177.191 45.578 177.094 45.691 176.914 45.691 cv
cp
f
184.215 45.676 mo
184.035 45.676 183.922 45.578 183.922 45.383 cv
183.922 37.5 li
183.922 37.324 184.035 37.223 184.215 37.223 cv
186.133 37.223 li
186.309 37.223 186.41 37.324 186.41 37.5 cv
186.41 45.383 li
186.41 45.578 186.309 45.676 186.133 45.676 cv
cp
185.172 36.055 mo
184.375 36.055 183.789 35.453 183.789 34.691 cv
183.789 33.895 184.375 33.324 185.172 33.324 cv
185.984 33.324 186.539 33.895 186.539 34.691 cv
186.539 35.453 185.984 36.055 185.172 36.055 cv
f
190.488 45.676 mo
190.344 45.676 190.23 45.594 190.18 45.445 cv
187.449 37.551 li
187.367 37.355 187.465 37.223 187.676 37.223 cv
189.723 37.223 li
189.887 37.223 190 37.305 190.035 37.453 cv
191.023 41.012 li
191.203 41.566 191.43 42.426 191.609 43.141 cv
191.656 43.141 li
191.836 42.426 192.082 41.566 192.242 41.012 cv
193.25 37.453 li
193.301 37.305 193.414 37.223 193.578 37.223 cv
195.621 37.223 li
195.832 37.223 195.914 37.355 195.852 37.551 cv
193.086 45.445 li
193.023 45.594 192.922 45.676 192.762 45.676 cv
cp
f
200.207 39.062 mo
199.457 39.062 198.953 39.453 198.953 40.348 cv
198.953 40.688 li
201.457 40.688 li
201.457 40.348 li
201.457 39.469 200.938 39.062 200.207 39.062 cv
203.848 42.02 mo
203.848 42.199 203.75 42.293 203.555 42.293 cv
198.953 42.293 li
198.953 42.555 li
198.953 43.383 199.492 43.809 200.352 43.809 cv
201.164 43.809 201.832 43.562 202.414 43.223 cv
202.562 43.109 202.691 43.141 202.789 43.285 cv
203.633 44.406 li
203.734 44.555 203.734 44.699 203.586 44.812 cv
202.758 45.445 201.703 45.887 200.273 45.887 cv
198.16 45.887 196.453 44.766 196.453 42.508 cv
196.453 40.461 li
196.453 38.039 198.16 37 200.223 37 cv
202.219 37 203.848 38.004 203.848 40.461 cv
cp
f
205.586 45.676 mo
205.395 45.676 205.297 45.578 205.297 45.383 cv
205.297 38.004 li
205.297 37.859 205.363 37.746 205.508 37.664 cv
206.398 37.223 207.441 37 208.496 37 cv
208.984 37 209.488 37.062 210.074 37.16 cv
210.25 37.191 210.332 37.289 210.332 37.469 cv
210.332 38.965 li
210.332 39.16 210.219 39.258 210.023 39.223 cv
209.699 39.176 209.34 39.16 209.016 39.16 cv
208.527 39.16 208.09 39.242 207.781 39.371 cv
207.781 45.383 li
207.781 45.578 207.684 45.676 207.504 45.676 cv
cp
f
214.445 45.887 mo
213.309 45.887 212.09 45.547 211.066 44.832 cv
210.902 44.715 210.887 44.586 210.984 44.422 cv
211.746 43.121 li
211.863 42.945 211.977 42.914 212.137 43.027 cv
212.852 43.512 213.648 43.758 214.461 43.758 cv
215.145 43.758 215.613 43.531 215.613 43.109 cv
215.613 42.684 215.098 42.539 214.445 42.426 cv
212.672 42.133 211.227 41.387 211.227 39.68 cv
211.227 37.891 212.625 37 214.754 37 cv
215.73 37 216.637 37.227 217.629 37.746 cv
217.793 37.828 217.824 37.973 217.727 38.137 cv
216.98 39.406 li
216.883 39.566 216.754 39.598 216.59 39.52 cv
216.039 39.223 215.355 39.047 214.703 39.047 cv
214.004 39.047 213.664 39.242 213.664 39.648 cv
213.664 40.102 214.039 40.234 215.078 40.395 cv
216.77 40.688 218.117 41.387 218.117 43.043 cv
218.117 44.945 216.77 45.887 214.445 45.887 cv
f
219.762 45.676 mo
219.582 45.676 219.469 45.578 219.469 45.383 cv
219.469 37.5 li
219.469 37.324 219.582 37.223 219.762 37.223 cv
221.68 37.223 li
221.855 37.223 221.953 37.324 221.953 37.5 cv
221.953 45.383 li
221.953 45.578 221.855 45.676 221.68 45.676 cv
cp
220.719 36.055 mo
219.922 36.055 219.34 35.453 219.34 34.691 cv
219.34 33.895 219.922 33.324 220.719 33.324 cv
221.531 33.324 222.082 33.895 222.082 34.691 cv
222.082 35.453 221.531 36.055 220.719 36.055 cv
f
227.398 43.695 mo
227.805 43.695 228.211 43.625 228.52 43.512 cv
228.52 39.438 li
228.211 39.273 227.82 39.16 227.383 39.16 cv
226.504 39.16 226.035 39.613 226.035 40.559 cv
226.035 42.246 li
226.035 43.27 226.523 43.695 227.398 43.695 cv
228.52 34.348 mo
228.52 34.152 228.617 34.059 228.797 34.059 cv
230.715 34.059 li
230.91 34.059 231.008 34.152 231.008 34.348 cv
231.008 44.961 li
231.008 45.121 230.941 45.234 230.777 45.301 cv
229.785 45.66 228.453 45.887 227.352 45.887 cv
225.074 45.887 223.5 44.523 223.5 42.199 cv
223.5 40.59 li
223.5 38.395 224.93 37 227.008 37 cv
227.562 37 228.113 37.129 228.52 37.273 cv
cp
f
236.078 43.871 mo
236.449 43.871 236.891 43.809 237.184 43.742 cv
237.184 42.312 li
236.859 42.246 236.418 42.215 236.062 42.215 cv
235.168 42.215 234.777 42.508 234.777 43.027 cv
234.777 43.594 235.301 43.871 236.078 43.871 cv
236.109 37 mo
238.352 37 239.672 38.168 239.672 40.637 cv
239.672 45.09 li
239.672 45.254 239.59 45.367 239.426 45.414 cv
238.465 45.707 237.184 45.887 236.078 45.887 cv
233.738 45.887 232.258 45.008 232.258 43.09 cv
232.258 41.402 233.59 40.559 235.801 40.559 cv
236.305 40.559 236.777 40.605 237.184 40.656 cv
237.184 40.492 li
237.184 39.629 236.875 39.16 235.82 39.16 cv
235.105 39.16 234.258 39.355 233.785 39.613 cv
233.641 39.695 233.477 39.68 233.395 39.52 cv
232.73 38.25 li
232.648 38.086 232.648 37.973 232.762 37.891 cv
233.527 37.406 234.715 37 236.109 37 cv
f
245 43.695 mo
245.406 43.695 245.816 43.625 246.121 43.512 cv
246.121 39.438 li
245.816 39.273 245.426 39.16 244.984 39.16 cv
244.109 39.16 243.637 39.613 243.637 40.559 cv
243.637 42.246 li
243.637 43.27 244.125 43.695 245 43.695 cv
246.121 34.348 mo
246.121 34.152 246.223 34.059 246.398 34.059 cv
248.316 34.059 li
248.512 34.059 248.609 34.152 248.609 34.348 cv
248.609 44.961 li
248.609 45.121 248.543 45.234 248.383 45.301 cv
247.391 45.66 246.059 45.887 244.953 45.887 cv
242.68 45.887 241.102 44.523 241.102 42.199 cv
241.102 40.59 li
241.102 38.395 242.531 37 244.613 37 cv
245.164 37 245.715 37.129 246.121 37.273 cv
cp
f
96.219 62.156 mo
93.359 62.156 91.473 60.645 91.473 57.816 cv
91.473 54.422 li
91.473 51.594 93.371 50.102 96.168 50.102 cv
97.469 50.102 98.719 50.488 99.645 51.137 cv
99.809 51.238 99.824 51.367 99.727 51.512 cv
98.703 53.074 li
98.59 53.234 98.461 53.25 98.297 53.156 cv
97.695 52.766 96.934 52.57 96.219 52.57 cv
94.852 52.57 94.121 53.352 94.121 54.52 cv
94.121 57.703 li
94.121 58.953 94.902 59.668 96.234 59.668 cv
97.047 59.668 97.844 59.426 98.492 58.988 cv
98.656 58.875 98.785 58.891 98.883 59.055 cv
99.922 60.613 li
100.02 60.758 100.02 60.887 99.906 60.969 cv
98.961 61.668 97.727 62.156 96.219 62.156 cv
f
104.457 60.125 mo
104.828 60.125 105.27 60.059 105.562 59.996 cv
105.562 58.562 li
105.238 58.5 104.797 58.469 104.441 58.469 cv
103.547 58.469 103.16 58.758 103.16 59.281 cv
103.16 59.848 103.676 60.125 104.457 60.125 cv
104.492 53.25 mo
106.734 53.25 108.047 54.422 108.047 56.891 cv
108.047 61.344 li
108.047 61.508 107.969 61.621 107.805 61.668 cv
106.848 61.961 105.562 62.141 104.457 62.141 cv
102.117 62.141 100.641 61.262 100.641 59.344 cv
100.641 57.652 101.973 56.812 104.184 56.812 cv
104.684 56.812 105.156 56.859 105.562 56.906 cv
105.562 56.746 li
105.562 55.883 105.254 55.41 104.195 55.41 cv
103.484 55.41 102.637 55.605 102.168 55.867 cv
102.02 55.949 101.859 55.93 101.777 55.77 cv
101.109 54.504 li
101.031 54.34 101.031 54.227 101.145 54.145 cv
101.906 53.656 103.094 53.25 104.492 53.25 cv
f
113.266 59.914 mo
113.414 59.914 113.609 59.898 113.789 59.883 cv
114 59.848 114.094 59.93 114.094 60.125 cv
114.094 61.715 li
114.094 61.879 114.031 62.012 113.871 62.043 cv
113.594 62.094 113.234 62.125 112.844 62.125 cv
110.961 62.125 109.691 61.102 109.691 59.02 cv
109.691 51.723 li
109.691 51.547 109.789 51.445 109.984 51.445 cv
111.676 51.445 li
111.852 51.445 111.949 51.527 111.965 51.711 cv
112.16 53.656 li
113.625 53.656 li
113.801 53.656 113.918 53.754 113.918 53.934 cv
113.918 55.496 li
113.918 55.672 113.801 55.77 113.625 55.77 cv
112.18 55.77 li
112.18 58.711 li
112.18 59.508 112.551 59.914 113.266 59.914 cv
f
118.926 59.945 mo
119.785 59.945 120.258 59.508 120.258 58.695 cv
120.258 56.746 li
120.258 55.934 119.785 55.461 118.926 55.461 cv
118.062 55.461 117.59 55.934 117.59 56.746 cv
117.59 58.695 li
117.59 59.508 118.062 59.945 118.926 59.945 cv
117.754 52.422 mo
117.523 52.422 117.445 52.262 117.574 52.082 cv
118.906 49.969 li
118.988 49.84 119.102 49.773 119.246 49.773 cv
121.086 49.773 li
121.312 49.773 121.395 49.938 121.23 50.133 cv
119.508 52.262 li
119.426 52.375 119.297 52.422 119.164 52.422 cv
cp
118.926 62.141 mo
116.535 62.141 115.055 60.84 115.055 58.695 cv
115.055 56.746 li
115.055 54.566 116.535 53.25 118.926 53.25 cv
121.297 53.25 122.773 54.566 122.773 56.746 cv
122.773 58.695 li
122.773 60.84 121.297 62.141 118.926 62.141 cv
f
127.277 62.141 mo
125.359 62.141 124.273 60.969 124.273 58.988 cv
124.273 50.605 li
124.273 50.41 124.367 50.309 124.562 50.309 cv
126.48 50.309 li
126.66 50.309 126.758 50.41 126.758 50.605 cv
126.758 58.68 li
126.758 59.492 127.082 59.863 127.715 59.863 cv
127.879 59.863 128.059 59.863 128.223 59.848 cv
128.414 59.832 128.531 59.93 128.531 60.125 cv
128.531 61.75 li
128.531 61.898 128.465 62.027 128.348 62.043 cv
128.074 62.09 127.715 62.141 127.277 62.141 cv
f
129.863 61.93 mo
129.684 61.93 129.57 61.832 129.57 61.637 cv
129.57 53.754 li
129.57 53.574 129.684 53.48 129.863 53.48 cv
131.777 53.48 li
131.961 53.48 132.055 53.574 132.055 53.754 cv
132.055 61.637 li
132.055 61.832 131.961 61.93 131.777 61.93 cv
cp
130.82 52.309 mo
130.027 52.309 129.441 51.707 129.441 50.945 cv
129.441 50.148 130.027 49.582 130.82 49.582 cv
131.633 49.582 132.188 50.148 132.188 50.945 cv
132.188 51.707 131.633 52.309 130.82 52.309 cv
f
137.469 62.141 mo
135.012 62.141 133.617 60.773 133.617 58.598 cv
133.617 56.762 li
133.617 54.617 135.031 53.25 137.449 53.25 cv
138.395 53.25 139.289 53.512 140.117 54.016 cv
140.266 54.113 140.297 54.262 140.199 54.422 cv
139.336 55.723 li
139.242 55.883 139.109 55.898 138.93 55.82 cv
138.508 55.594 138.035 55.445 137.566 55.445 cv
136.672 55.445 136.137 55.934 136.137 56.762 cv
136.137 58.598 li
136.137 59.508 136.703 59.945 137.551 59.945 cv
138.102 59.945 138.621 59.781 139.109 59.473 cv
139.273 59.379 139.418 59.41 139.516 59.555 cv
140.391 60.855 li
140.492 61 140.473 61.148 140.344 61.246 cv
139.516 61.832 138.59 62.141 137.469 62.141 cv
f
144.832 60.125 mo
145.203 60.125 145.641 60.059 145.938 59.996 cv
145.938 58.562 li
145.609 58.5 145.172 58.469 144.812 58.469 cv
143.922 58.469 143.531 58.758 143.531 59.281 cv
143.531 59.848 144.051 60.125 144.832 60.125 cv
144.863 53.25 mo
147.105 53.25 148.422 54.422 148.422 56.891 cv
148.422 61.344 li
148.422 61.508 148.344 61.621 148.18 61.668 cv
147.219 61.961 145.938 62.141 144.832 62.141 cv
142.492 62.141 141.012 61.262 141.012 59.344 cv
141.012 57.652 142.344 56.812 144.555 56.812 cv
145.059 56.812 145.527 56.859 145.938 56.906 cv
145.938 56.746 li
145.938 55.883 145.629 55.41 144.57 55.41 cv
143.855 55.41 143.012 55.605 142.539 55.867 cv
142.395 55.949 142.23 55.93 142.148 55.77 cv
141.484 54.504 li
141.402 54.34 141.402 54.227 141.516 54.145 cv
142.281 53.656 143.465 53.25 144.863 53.25 cv
f
157.102 59.945 mo
157.508 59.945 157.914 59.883 158.223 59.77 cv
158.223 55.688 li
157.914 55.527 157.523 55.414 157.086 55.414 cv
156.207 55.414 155.738 55.867 155.738 56.812 cv
155.738 58.5 li
155.738 59.523 156.227 59.945 157.102 59.945 cv
158.223 50.605 mo
158.223 50.41 158.32 50.309 158.5 50.309 cv
160.418 50.309 li
160.609 50.309 160.711 50.41 160.711 50.605 cv
160.711 61.215 li
160.711 61.379 160.645 61.492 160.48 61.555 cv
159.492 61.91 158.16 62.141 157.055 62.141 cv
154.777 62.141 153.203 60.773 153.203 58.449 cv
153.203 56.844 li
153.203 54.648 154.633 53.25 156.711 53.25 cv
157.266 53.25 157.816 53.383 158.223 53.527 cv
cp
f
166.008 55.316 mo
165.262 55.316 164.758 55.707 164.758 56.598 cv
164.758 56.941 li
167.262 56.941 li
167.262 56.598 li
167.262 55.723 166.742 55.316 166.008 55.316 cv
169.648 58.273 mo
169.648 58.449 169.551 58.551 169.355 58.551 cv
164.758 58.551 li
164.758 58.809 li
164.758 59.637 165.297 60.059 166.156 60.059 cv
166.969 60.059 167.633 59.816 168.219 59.473 cv
168.363 59.359 168.496 59.391 168.594 59.539 cv
169.438 60.66 li
169.535 60.805 169.535 60.953 169.391 61.066 cv
168.559 61.699 167.504 62.141 166.074 62.141 cv
163.961 62.141 162.258 61.02 162.258 58.758 cv
162.258 56.711 li
162.258 54.293 163.961 53.25 166.027 53.25 cv
168.023 53.25 169.648 54.258 169.648 56.711 cv
cp
f
174.074 62.141 mo
172.156 62.141 171.062 60.969 171.062 58.988 cv
171.062 50.605 li
171.062 50.41 171.164 50.309 171.359 50.309 cv
173.273 50.309 li
173.453 50.309 173.551 50.41 173.551 50.605 cv
173.551 58.68 li
173.551 59.492 173.879 59.863 174.512 59.863 cv
174.672 59.863 174.852 59.863 175.016 59.848 cv
175.211 59.832 175.324 59.93 175.324 60.125 cv
175.324 61.75 li
175.324 61.898 175.258 62.027 175.145 62.043 cv
174.867 62.09 174.512 62.141 174.074 62.141 cv
f
182.328 59.574 mo
187.156 59.574 li
187.332 59.574 187.445 59.668 187.445 59.848 cv
187.445 61.637 li
187.445 61.828 187.332 61.93 187.156 61.93 cv
180.004 61.93 li
179.809 61.93 179.715 61.828 179.715 61.637 cv
179.715 50.605 li
179.715 50.406 179.809 50.309 180.004 50.309 cv
186.895 50.309 li
187.09 50.309 187.188 50.406 187.188 50.605 cv
187.188 52.387 li
187.188 52.57 187.09 52.664 186.895 52.664 cv
182.328 52.664 li
182.328 54.895 li
186.359 54.895 li
186.555 54.895 186.648 54.988 186.648 55.168 cv
186.648 56.922 li
186.648 57.102 186.555 57.199 186.359 57.199 cv
182.328 57.199 li
cp
f
192.473 62.141 mo
190.016 62.141 188.621 60.773 188.621 58.598 cv
188.621 56.762 li
188.621 54.617 190.035 53.25 192.453 53.25 cv
193.395 53.25 194.289 53.512 195.121 54.016 cv
195.266 54.113 195.297 54.262 195.199 54.422 cv
194.336 55.723 li
194.242 55.883 194.109 55.898 193.934 55.82 cv
193.512 55.594 193.039 55.445 192.566 55.445 cv
191.672 55.445 191.137 55.934 191.137 56.762 cv
191.137 58.598 li
191.137 59.508 191.707 59.945 192.551 59.945 cv
193.105 59.945 193.625 59.781 194.109 59.473 cv
194.273 59.379 194.418 59.41 194.52 59.555 cv
195.395 60.855 li
195.492 61 195.477 61.148 195.348 61.246 cv
194.52 61.832 193.59 62.141 192.473 62.141 cv
f
203.57 53.48 mo
203.766 53.48 203.863 53.574 203.863 53.754 cv
203.863 61.148 li
203.863 61.309 203.797 61.426 203.652 61.492 cv
202.676 61.895 201.441 62.141 200.305 62.141 cv
197.848 62.141 196.469 60.824 196.469 58.367 cv
196.469 53.754 li
196.469 53.574 196.566 53.48 196.762 53.48 cv
198.68 53.48 li
198.875 53.48 198.973 53.574 198.973 53.754 cv
198.973 58.387 li
198.973 59.574 199.457 59.945 200.305 59.945 cv
200.727 59.945 201.133 59.883 201.375 59.781 cv
201.375 53.754 li
201.375 53.574 201.473 53.48 201.652 53.48 cv
cp
f
208.918 60.125 mo
209.293 60.125 209.73 60.059 210.023 59.996 cv
210.023 58.562 li
209.699 58.5 209.262 58.469 208.902 58.469 cv
208.008 58.469 207.617 58.758 207.617 59.281 cv
207.617 59.848 208.137 60.125 208.918 60.125 cv
208.949 53.25 mo
211.191 53.25 212.512 54.422 212.512 56.891 cv
212.512 61.344 li
212.512 61.508 212.43 61.621 212.266 61.668 cv
211.309 61.961 210.023 62.141 208.918 62.141 cv
206.578 62.141 205.102 61.262 205.102 59.344 cv
205.102 57.652 206.434 56.812 208.641 56.812 cv
209.145 56.812 209.617 56.859 210.023 56.906 cv
210.023 56.746 li
210.023 55.883 209.715 55.41 208.66 55.41 cv
207.941 55.41 207.102 55.605 206.629 55.867 cv
206.48 55.949 206.32 55.93 206.238 55.77 cv
205.57 54.504 li
205.492 54.34 205.492 54.227 205.605 54.145 cv
206.367 53.656 207.555 53.25 208.949 53.25 cv
f
217.844 59.945 mo
218.246 59.945 218.652 59.883 218.961 59.77 cv
218.961 55.688 li
218.652 55.527 218.266 55.414 217.824 55.414 cv
216.945 55.414 216.477 55.867 216.477 56.812 cv
216.477 58.5 li
216.477 59.523 216.965 59.945 217.844 59.945 cv
218.961 50.605 mo
218.961 50.41 219.062 50.309 219.238 50.309 cv
221.156 50.309 li
221.352 50.309 221.449 50.41 221.449 50.605 cv
221.449 61.215 li
221.449 61.379 221.387 61.492 221.223 61.555 cv
220.23 61.91 218.898 62.141 217.793 62.141 cv
215.52 62.141 213.941 60.773 213.941 58.449 cv
213.941 56.844 li
213.941 54.648 215.371 53.25 217.453 53.25 cv
218.004 53.25 218.555 53.383 218.961 53.527 cv
cp
f
226.863 59.945 mo
227.723 59.945 228.195 59.508 228.195 58.695 cv
228.195 56.746 li
228.195 55.934 227.723 55.461 226.863 55.461 cv
226.004 55.461 225.531 55.934 225.531 56.746 cv
225.531 58.695 li
225.531 59.508 226.004 59.945 226.863 59.945 cv
226.863 62.141 mo
224.473 62.141 222.996 60.84 222.996 58.695 cv
222.996 56.746 li
222.996 54.566 224.473 53.25 226.863 53.25 cv
229.238 53.25 230.715 54.566 230.715 56.746 cv
230.715 58.695 li
230.715 60.84 229.238 62.141 226.863 62.141 cv
f
232.535 61.93 mo
232.34 61.93 232.242 61.832 232.242 61.637 cv
232.242 54.262 li
232.242 54.113 232.309 54 232.453 53.918 cv
233.348 53.48 234.391 53.25 235.445 53.25 cv
235.934 53.25 236.438 53.316 237.02 53.414 cv
237.199 53.445 237.281 53.543 237.281 53.723 cv
237.281 55.219 li
237.281 55.414 237.164 55.512 236.973 55.477 cv
236.648 55.43 236.289 55.414 235.965 55.414 cv
235.477 55.414 235.039 55.492 234.727 55.625 cv
234.727 61.637 li
234.727 61.832 234.633 61.93 234.453 61.93 cv
cp
f
56.824 25.227 mo
52.93 25.598 49.32 26.941 46.234 29.016 cv
45.824 29.289 45.418 29.582 45.027 29.887 cv
46.512 31.375 li
46.914 31.074 47.32 30.789 47.742 30.52 cv
49.586 29.328 51.629 28.426 53.809 27.863 cv
53.809 40.758 li
54.852 41.801 li
54.852 27.625 li
55.539 27.488 56.234 27.383 56.938 27.312 cv
56.938 43.883 li
59.023 45.969 li
61.109 43.883 li
61.109 27.312 li
61.812 27.383 62.512 27.488 63.195 27.625 cv
63.195 41.797 li
64.238 40.758 li
64.238 27.863 li
66.418 28.426 68.461 29.328 70.305 30.52 cv
70.727 30.789 71.137 31.074 71.535 31.375 cv
73.02 29.887 li
72.629 29.582 72.223 29.289 71.809 29.016 cv
68.73 26.941 65.117 25.598 61.223 25.227 cv
59.023 19.336 li
cp
f
61.223 70.883 mo
65.117 70.512 68.73 69.168 71.812 67.094 cv
72.223 66.816 72.629 66.527 73.02 66.219 cv
71.535 64.734 li
71.137 65.035 70.727 65.32 70.305 65.59 cv
68.461 66.781 66.418 67.684 64.238 68.246 cv
64.238 55.352 li
63.195 54.312 li
63.195 68.48 li
62.512 68.621 61.812 68.727 61.109 68.797 cv
61.109 52.227 li
59.023 50.141 li
56.938 52.227 li
56.938 68.797 li
56.234 68.727 55.539 68.621 54.852 68.48 cv
54.852 54.312 li
53.809 55.352 li
53.809 68.246 li
51.629 67.684 49.586 66.781 47.742 65.59 cv
47.32 65.32 46.914 65.035 46.516 64.734 cv
45.027 66.223 li
45.422 66.527 45.824 66.816 46.238 67.094 cv
49.32 69.168 52.93 70.512 56.824 70.883 cv
59.023 76.773 li
cp
f
36.195 50.254 mo
36.566 54.148 37.91 57.758 39.984 60.844 cv
40.262 61.254 40.551 61.66 40.859 62.051 cv
42.344 60.566 li
42.043 60.164 41.758 59.758 41.488 59.336 cv
40.297 57.492 39.395 55.449 38.832 53.27 cv
51.73 53.27 li
52.773 52.227 li
38.598 52.227 li
38.457 51.539 38.352 50.844 38.281 50.141 cv
54.852 50.141 li
56.938 48.055 li
54.852 45.969 li
38.281 45.969 li
38.352 45.266 38.457 44.566 38.598 43.883 cv
52.773 43.883 li
51.73 42.844 li
38.832 42.844 li
39.395 40.66 40.297 38.617 41.488 36.773 cv
41.758 36.352 42.043 35.941 42.344 35.547 cv
40.855 34.059 li
40.551 34.453 40.262 34.855 39.984 35.27 cv
37.91 38.348 36.566 41.961 36.195 45.855 cv
30.305 48.055 li
cp
f
81.852 50.254 mo
81.48 54.148 80.137 57.758 78.062 60.844 cv
77.789 61.254 77.496 61.66 77.191 62.051 cv
75.703 60.566 li
76.004 60.164 76.289 59.758 76.562 59.336 cv
77.75 57.492 78.652 55.449 79.215 53.27 cv
66.316 53.27 li
65.273 52.227 li
79.453 52.227 li
79.59 51.539 79.695 50.844 79.766 50.141 cv
63.195 50.141 li
61.109 48.055 li
63.195 45.969 li
79.766 45.969 li
79.695 45.266 79.59 44.566 79.453 43.883 cv
65.273 43.883 li
66.316 42.844 li
79.215 42.844 li
78.652 40.66 77.75 38.617 76.562 36.773 cv
76.289 36.352 76.004 35.941 75.703 35.547 cv
77.191 34.059 li
77.496 34.453 77.789 34.855 78.062 35.27 cv
80.137 38.348 81.48 41.961 81.852 45.855 cv
87.742 48.055 li
cp
f
0 420.219 mo
791.973 420.219 li
791.973 445.559 li
0 445.559 li
cp
.748135 .217197 0 0 cmyk
f
778.84 81.332 mo
755.715 83.543 734.285 91.492 716.004 103.809 cv
713.543 105.449 711.141 107.184 708.816 108.992 cv
717.625 117.82 li
720.008 116.027 722.43 114.352 724.926 112.73 cv
735.867 105.676 747.992 100.32 760.938 96.965 cv
760.938 173.508 li
767.133 179.684 li
767.133 95.574 li
771.195 94.734 775.312 94.105 779.508 93.703 cv
779.508 192.055 li
791.879 204.43 li
804.25 192.055 li
804.25 93.703 li
808.445 94.105 812.562 94.734 816.625 95.574 cv
816.625 179.684 li
822.82 173.488 li
822.82 96.965 li
835.766 100.301 847.891 105.676 858.832 112.73 cv
861.312 114.352 863.75 116.027 866.113 117.82 cv
874.941 108.977 li
872.617 107.184 870.215 105.449 867.754 103.809 cv
849.473 91.492 828.043 83.543 804.918 81.332 cv
791.879 46.348 li
cp
f
804.918 352.273 mo
828.043 350.059 849.473 342.109 867.754 329.797 cv
870.215 328.156 872.617 326.422 874.941 324.609 cv
866.113 315.781 li
863.75 317.574 861.328 319.254 858.832 320.875 cv
847.891 327.926 835.746 333.285 822.82 336.621 cv
822.82 260.098 li
816.625 253.918 li
816.625 338.031 li
812.562 338.852 808.445 339.48 804.25 339.898 cv
804.25 241.547 li
791.879 229.176 li
779.508 241.547 li
779.508 339.898 li
775.312 339.48 771.195 338.852 767.133 338.031 cv
767.133 253.918 li
760.938 260.098 li
760.938 336.621 li
747.992 333.285 735.867 327.926 724.926 320.875 cv
722.43 319.254 720.008 317.574 717.645 315.781 cv
708.816 324.609 li
711.16 326.422 713.543 328.156 716.004 329.797 cv
734.285 342.109 755.715 350.059 778.84 352.273 cv
791.879 387.234 li
cp
f
656.41 229.84 mo
658.621 252.965 666.57 274.395 678.887 292.676 cv
680.523 295.137 682.262 297.52 684.07 299.863 cv
692.898 291.039 li
691.105 288.672 689.41 286.254 687.809 283.754 cv
680.754 272.812 675.379 260.668 672.043 247.723 cv
748.602 247.738 li
754.781 241.543 li
670.648 241.543 li
669.812 237.48 669.184 233.363 668.781 229.168 cv
767.133 229.168 li
779.508 216.797 li
767.133 204.426 li
668.781 204.426 li
669.18 200.23 669.812 196.113 670.648 192.051 cv
754.781 192.051 li
748.602 185.855 li
672.043 185.855 li
675.379 172.91 680.754 160.785 687.809 149.844 cv
689.41 147.348 691.105 144.926 692.879 142.543 cv
684.051 133.734 li
682.262 136.059 680.523 138.461 678.867 140.902 cv
666.57 159.184 658.621 180.633 656.41 203.738 cv
621.426 216.797 li
cp
f
147.809 436.617 mo
147.871 436.57 147.871 436.508 147.809 436.445 cv
147.105 435.68 li
147.543 435.18 147.777 434.492 147.777 433.695 cv
147.777 431.242 li
147.777 429.352 146.574 428.18 144.605 428.18 cv
142.637 428.18 141.434 429.352 141.434 431.242 cv
141.434 433.695 li
141.434 435.539 142.637 436.727 144.605 436.727 cv
145.355 436.727 145.98 436.539 146.48 436.242 cv
147.215 437.023 li
147.277 437.086 147.34 437.086 147.418 437.023 cv
cp
142.434 433.695 mo
142.434 431.242 li
142.434 429.898 143.23 429.102 144.605 429.102 cv
145.98 429.102 146.762 429.898 146.762 431.242 cv
146.762 433.695 li
146.762 434.195 146.621 434.617 146.387 434.961 cv
145.309 433.836 li
145.262 433.758 145.168 433.773 145.121 433.836 cv
144.715 434.227 li
144.668 434.289 144.668 434.336 144.715 434.414 cv
145.777 435.508 li
145.449 435.68 145.059 435.805 144.605 435.805 cv
143.23 435.805 142.434 434.992 142.434 433.695 cv
cp
0 0 0 0 cmyk
f
155.578 433.773 mo
155.578 428.445 li
155.578 428.352 155.516 428.305 155.438 428.305 cv
154.703 428.305 li
154.625 428.305 154.578 428.352 154.578 428.445 cv
154.578 433.695 li
154.578 435.008 153.828 435.82 152.531 435.82 cv
151.234 435.82 150.5 435.008 150.5 433.695 cv
150.5 428.445 li
150.5 428.352 150.453 428.305 150.375 428.305 cv
149.625 428.305 li
149.547 428.305 149.5 428.352 149.5 428.445 cv
149.5 433.773 li
149.5 435.539 150.672 436.727 152.531 436.727 cv
154.391 436.727 155.578 435.539 155.578 433.773 cv
cp
f
158.562 428.445 mo
158.562 428.352 158.516 428.305 158.438 428.305 cv
157.719 428.305 li
157.625 428.305 157.578 428.352 157.578 428.445 cv
157.578 436.477 li
157.578 436.555 157.625 436.602 157.719 436.602 cv
158.438 436.602 li
158.516 436.602 158.562 436.555 158.562 436.477 cv
cp
f
159.863 428.305 mo
159.785 428.305 159.738 428.352 159.738 428.445 cv
159.738 429.086 li
159.738 429.164 159.785 429.211 159.863 429.211 cv
162.348 429.211 li
162.348 436.477 li
162.348 436.555 162.41 436.602 162.488 436.602 cv
163.207 436.602 li
163.285 436.602 163.348 436.555 163.348 436.477 cv
163.348 429.211 li
165.816 429.211 li
165.91 429.211 165.957 429.164 165.957 429.086 cv
165.957 428.445 li
165.957 428.352 165.91 428.305 165.816 428.305 cv
cp
f
173.02 433.695 mo
173.02 431.242 li
173.02 429.352 171.801 428.18 169.848 428.18 cv
167.895 428.18 166.676 429.352 166.676 431.242 cv
166.676 433.695 li
166.676 435.555 167.895 436.727 169.848 436.727 cv
171.801 436.727 173.02 435.555 173.02 433.695 cv
cp
167.676 433.695 mo
167.676 431.242 li
167.676 429.883 168.473 429.102 169.848 429.102 cv
171.223 429.102 172.004 429.883 172.004 431.242 cv
172.004 433.695 li
172.004 435.008 171.223 435.789 169.848 435.789 cv
168.473 435.789 167.676 435.008 167.676 433.695 cv
cp
f
180.168 433.555 mo
180.246 433.555 180.293 433.508 180.293 433.43 cv
180.293 432.805 li
180.293 432.711 180.246 432.664 180.168 432.664 cv
177.262 432.664 li
177.184 432.664 177.137 432.711 177.137 432.805 cv
177.137 433.43 li
177.137 433.508 177.184 433.555 177.262 433.555 cv
cp
f
184.398 436.602 mo
184.477 436.602 184.523 436.57 184.555 436.492 cv
185.273 434.43 li
188.742 434.43 li
189.461 436.492 li
189.477 436.57 189.539 436.602 189.602 436.602 cv
190.383 436.602 li
190.477 436.602 190.523 436.539 190.492 436.445 cv
187.617 428.414 li
187.586 428.352 187.523 428.305 187.461 428.305 cv
186.539 428.305 li
186.477 428.305 186.43 428.352 186.398 428.414 cv
183.523 436.445 li
183.492 436.539 183.523 436.602 183.617 436.602 cv
cp
186.992 429.414 mo
187.039 429.414 li
188.445 433.523 li
185.57 433.523 li
cp
f
192.484 436.602 mo
192.562 436.602 192.609 436.555 192.609 436.477 cv
192.609 432.977 li
192.609 431.992 192.578 430.82 192.547 429.836 cv
192.578 429.82 li
192.875 430.445 193.234 431.133 193.625 431.867 cv
195.078 434.555 li
195.109 434.602 195.156 434.648 195.234 434.648 cv
195.844 434.648 li
195.922 434.648 195.969 434.602 196.016 434.555 cv
197.453 431.867 li
197.844 431.133 198.203 430.445 198.516 429.82 cv
198.531 429.836 li
198.5 430.82 198.469 431.992 198.469 432.977 cv
198.469 436.477 li
198.469 436.555 198.516 436.602 198.594 436.602 cv
199.328 436.602 li
199.406 436.602 199.453 436.555 199.453 436.477 cv
199.453 428.445 li
199.453 428.352 199.406 428.305 199.328 428.305 cv
198.438 428.305 li
198.375 428.305 198.312 428.336 198.297 428.398 cv
196.484 431.68 li
196.188 432.211 195.766 433.07 195.562 433.508 cv
195.516 433.508 li
195.312 433.07 194.891 432.211 194.594 431.68 cv
192.797 428.398 li
192.766 428.336 192.703 428.305 192.641 428.305 cv
191.766 428.305 li
191.672 428.305 191.625 428.352 191.625 428.445 cv
191.625 436.477 li
191.625 436.555 191.672 436.602 191.766 436.602 cv
cp
f
201.473 436.602 mo
201.551 436.602 201.598 436.57 201.629 436.492 cv
202.348 434.43 li
205.816 434.43 li
206.535 436.492 li
206.551 436.57 206.613 436.602 206.676 436.602 cv
207.457 436.602 li
207.551 436.602 207.598 436.539 207.566 436.445 cv
204.691 428.414 li
204.66 428.352 204.598 428.305 204.535 428.305 cv
203.613 428.305 li
203.551 428.305 203.504 428.352 203.473 428.414 cv
200.598 436.445 li
200.566 436.539 200.598 436.602 200.691 436.602 cv
cp
204.066 429.414 mo
204.113 429.414 li
205.52 433.523 li
202.645 433.523 li
cp
f
213.934 436.602 mo
214.012 436.602 214.059 436.555 214.059 436.477 cv
214.059 435.82 li
214.059 435.742 214.012 435.695 213.934 435.695 cv
209.418 435.695 li
213.902 429.055 li
213.934 428.992 213.949 428.945 213.949 428.883 cv
213.949 428.445 li
213.949 428.352 213.902 428.305 213.824 428.305 cv
208.402 428.305 li
208.324 428.305 208.277 428.352 208.277 428.445 cv
208.277 429.086 li
208.277 429.164 208.324 429.211 208.402 429.211 cv
212.637 429.211 li
208.137 435.867 li
208.09 435.898 208.09 435.961 208.09 436.023 cv
208.09 436.477 li
208.09 436.555 208.137 436.602 208.215 436.602 cv
cp
f
221.484 433.695 mo
221.484 431.242 li
221.484 429.352 220.266 428.18 218.312 428.18 cv
216.359 428.18 215.141 429.352 215.141 431.242 cv
215.141 433.695 li
215.141 435.555 216.359 436.727 218.312 436.727 cv
220.266 436.727 221.484 435.555 221.484 433.695 cv
cp
216.141 433.695 mo
216.141 431.242 li
216.141 429.883 216.938 429.102 218.312 429.102 cv
219.688 429.102 220.469 429.883 220.469 431.242 cv
220.469 433.695 li
220.469 435.008 219.688 435.789 218.312 435.789 cv
216.938 435.789 216.141 435.008 216.141 433.695 cv
cp
f
224.102 436.602 mo
224.18 436.602 224.242 436.555 224.242 436.477 cv
224.242 432.961 li
224.242 432.039 224.211 430.852 224.18 429.93 cv
224.195 429.93 li
224.492 430.477 224.867 431.148 225.211 431.68 cv
228.258 436.523 li
228.289 436.586 228.352 436.602 228.414 436.602 cv
229.227 436.602 li
229.305 436.602 229.352 436.555 229.352 436.477 cv
229.352 428.445 li
229.352 428.352 229.305 428.305 229.227 428.305 cv
228.508 428.305 li
228.43 428.305 228.383 428.352 228.383 428.445 cv
228.383 431.945 li
228.383 432.93 228.398 434.133 228.445 435.102 cv
228.414 435.102 li
228.133 434.555 227.758 433.945 227.445 433.414 cv
224.367 428.398 li
224.336 428.352 224.273 428.305 224.211 428.305 cv
223.398 428.305 li
223.305 428.305 223.258 428.352 223.258 428.445 cv
223.258 436.477 li
223.258 436.555 223.305 436.602 223.398 436.602 cv
cp
f
231.375 436.602 mo
231.453 436.602 231.5 436.57 231.531 436.492 cv
232.25 434.43 li
235.719 434.43 li
236.438 436.492 li
236.453 436.57 236.516 436.602 236.578 436.602 cv
237.359 436.602 li
237.453 436.602 237.5 436.539 237.469 436.445 cv
234.594 428.414 li
234.562 428.352 234.5 428.305 234.438 428.305 cv
233.516 428.305 li
233.453 428.305 233.406 428.352 233.375 428.414 cv
230.5 436.445 li
230.469 436.539 230.5 436.602 230.594 436.602 cv
cp
233.969 429.414 mo
234.016 429.414 li
235.422 433.523 li
232.547 433.523 li
cp
f
244.105 434.352 mo
244.105 432.711 242.746 432.227 241.199 431.867 cv
239.98 431.586 239.168 431.273 239.168 430.398 cv
239.168 429.555 239.949 429.102 241.059 429.102 cv
241.855 429.117 242.59 429.367 243.309 429.852 cv
243.371 429.898 243.434 429.898 243.48 429.836 cv
243.871 429.289 li
243.918 429.227 243.918 429.164 243.84 429.117 cv
242.949 428.477 242.168 428.18 241.137 428.18 cv
239.543 428.18 238.184 428.852 238.184 430.383 cv
238.184 431.914 239.543 432.508 240.949 432.82 cv
242.277 433.117 243.121 433.414 243.121 434.383 cv
243.121 435.352 242.168 435.789 241.105 435.789 cv
240.246 435.773 239.527 435.461 238.715 434.867 cv
238.668 434.82 238.59 434.82 238.543 434.898 cv
238.152 435.445 li
238.105 435.508 238.105 435.57 238.184 435.633 cv
239.09 436.367 239.934 436.727 241.074 436.727 cv
242.715 436.727 244.105 436.008 244.105 434.352 cv
cp
f
251.008 433.555 mo
251.086 433.555 251.133 433.508 251.133 433.43 cv
251.133 432.805 li
251.133 432.711 251.086 432.664 251.008 432.664 cv
248.102 432.664 li
248.023 432.664 247.977 432.711 247.977 432.805 cv
247.977 433.43 li
247.977 433.508 248.023 433.555 248.102 433.555 cv
cp
f
255.238 436.602 mo
255.316 436.602 255.363 436.57 255.395 436.492 cv
256.113 434.43 li
259.582 434.43 li
260.301 436.492 li
260.316 436.57 260.379 436.602 260.441 436.602 cv
261.223 436.602 li
261.316 436.602 261.363 436.539 261.332 436.445 cv
258.457 428.414 li
258.426 428.352 258.363 428.305 258.301 428.305 cv
257.379 428.305 li
257.316 428.305 257.27 428.352 257.238 428.414 cv
254.363 436.445 li
254.332 436.539 254.363 436.602 254.457 436.602 cv
cp
257.832 429.414 mo
257.879 429.414 li
259.285 433.523 li
256.41 433.523 li
cp
f
263.324 436.602 mo
263.402 436.602 263.449 436.555 263.449 436.477 cv
263.449 432.977 li
263.449 431.992 263.418 430.82 263.387 429.836 cv
263.418 429.82 li
263.715 430.445 264.074 431.133 264.465 431.867 cv
265.918 434.555 li
265.949 434.602 265.996 434.648 266.074 434.648 cv
266.684 434.648 li
266.762 434.648 266.809 434.602 266.855 434.555 cv
268.293 431.867 li
268.684 431.133 269.043 430.445 269.355 429.82 cv
269.371 429.836 li
269.34 430.82 269.309 431.992 269.309 432.977 cv
269.309 436.477 li
269.309 436.555 269.355 436.602 269.434 436.602 cv
270.168 436.602 li
270.246 436.602 270.293 436.555 270.293 436.477 cv
270.293 428.445 li
270.293 428.352 270.246 428.305 270.168 428.305 cv
269.277 428.305 li
269.215 428.305 269.152 428.336 269.137 428.398 cv
267.324 431.68 li
267.027 432.211 266.605 433.07 266.402 433.508 cv
266.355 433.508 li
266.152 433.07 265.73 432.211 265.434 431.68 cv
263.637 428.398 li
263.605 428.336 263.543 428.305 263.48 428.305 cv
262.605 428.305 li
262.512 428.305 262.465 428.352 262.465 428.445 cv
262.465 436.477 li
262.465 436.555 262.512 436.602 262.605 436.602 cv
cp
f
277.797 430.492 mo
277.797 429.18 276.969 428.305 275.312 428.305 cv
272.5 428.305 li
272.406 428.305 272.359 428.352 272.359 428.445 cv
272.359 436.477 li
272.359 436.555 272.406 436.602 272.5 436.602 cv
275.297 436.602 li
277.109 436.602 278.141 435.711 278.141 434.195 cv
278.141 433.242 277.672 432.492 276.812 432.18 cv
277.422 431.898 277.797 431.273 277.797 430.492 cv
cp
273.344 435.711 mo
273.344 432.664 li
275.375 432.664 li
276.594 432.664 277.141 433.289 277.141 434.195 cv
277.141 435.227 276.438 435.711 275.312 435.711 cv
cp
276.797 430.492 mo
276.797 431.367 276.219 431.773 275.375 431.773 cv
273.344 431.773 li
273.344 429.211 li
275.312 429.211 li
276.297 429.211 276.797 429.711 276.797 430.492 cv
cp
f
279.645 436.602 mo
279.723 436.602 279.77 436.57 279.801 436.492 cv
280.52 434.43 li
283.988 434.43 li
284.707 436.492 li
284.723 436.57 284.785 436.602 284.848 436.602 cv
285.629 436.602 li
285.723 436.602 285.77 436.539 285.738 436.445 cv
282.863 428.414 li
282.832 428.352 282.77 428.305 282.707 428.305 cv
281.785 428.305 li
281.723 428.305 281.676 428.352 281.645 428.414 cv
278.77 436.445 li
278.738 436.539 278.77 436.602 278.863 436.602 cv
cp
282.238 429.414 mo
282.285 429.414 li
283.691 433.523 li
280.816 433.523 li
cp
f
285.398 428.305 mo
285.32 428.305 285.273 428.352 285.273 428.445 cv
285.273 429.086 li
285.273 429.164 285.32 429.211 285.398 429.211 cv
287.883 429.211 li
287.883 436.477 li
287.883 436.555 287.945 436.602 288.023 436.602 cv
288.742 436.602 li
288.82 436.602 288.883 436.555 288.883 436.477 cv
288.883 429.211 li
291.352 429.211 li
291.445 429.211 291.492 429.164 291.492 429.086 cv
291.492 428.445 li
291.492 428.352 291.445 428.305 291.352 428.305 cv
cp
f
298.555 433.695 mo
298.555 431.242 li
298.555 429.352 297.336 428.18 295.383 428.18 cv
293.43 428.18 292.211 429.352 292.211 431.242 cv
292.211 433.695 li
292.211 435.555 293.43 436.727 295.383 436.727 cv
297.336 436.727 298.555 435.555 298.555 433.695 cv
cp
293.211 433.695 mo
293.211 431.242 li
293.211 429.883 294.008 429.102 295.383 429.102 cv
296.758 429.102 297.539 429.883 297.539 431.242 cv
297.539 433.695 li
297.539 435.008 296.758 435.789 295.383 435.789 cv
294.008 435.789 293.211 435.008 293.211 433.695 cv
cp
f
305.703 433.555 mo
305.781 433.555 305.828 433.508 305.828 433.43 cv
305.828 432.805 li
305.828 432.711 305.781 432.664 305.703 432.664 cv
302.797 432.664 li
302.719 432.664 302.672 432.711 302.672 432.805 cv
302.672 433.43 li
302.672 433.508 302.719 433.555 302.797 433.555 cv
cp
f
311.234 432.852 mo
314.797 432.852 li
314.875 432.852 314.922 432.805 314.922 432.711 cv
314.922 432.07 li
314.922 431.977 314.875 431.93 314.797 431.93 cv
311.234 431.93 li
311.234 429.211 li
315.062 429.211 li
315.141 429.211 315.188 429.164 315.188 429.086 cv
315.188 428.445 li
315.188 428.352 315.141 428.305 315.062 428.305 cv
310.375 428.305 li
310.281 428.305 310.234 428.352 310.234 428.445 cv
310.234 436.477 li
310.234 436.555 310.281 436.602 310.375 436.602 cv
315.219 436.602 li
315.297 436.602 315.344 436.555 315.344 436.477 cv
315.344 435.82 li
315.344 435.742 315.297 435.695 315.219 435.695 cv
311.234 435.695 li
cp
f
322.449 434.352 mo
322.449 432.711 321.09 432.227 319.543 431.867 cv
318.324 431.586 317.512 431.273 317.512 430.398 cv
317.512 429.555 318.293 429.102 319.402 429.102 cv
320.199 429.117 320.934 429.367 321.652 429.852 cv
321.715 429.898 321.777 429.898 321.824 429.836 cv
322.215 429.289 li
322.262 429.227 322.262 429.164 322.184 429.117 cv
321.293 428.477 320.512 428.18 319.48 428.18 cv
317.887 428.18 316.527 428.852 316.527 430.383 cv
316.527 431.914 317.887 432.508 319.293 432.82 cv
320.621 433.117 321.465 433.414 321.465 434.383 cv
321.465 435.352 320.512 435.789 319.449 435.789 cv
318.59 435.773 317.871 435.461 317.059 434.867 cv
317.012 434.82 316.934 434.82 316.887 434.898 cv
316.496 435.445 li
316.449 435.508 316.449 435.57 316.527 435.633 cv
317.434 436.367 318.277 436.727 319.418 436.727 cv
321.059 436.727 322.449 436.008 322.449 434.352 cv
cp
f
324.84 436.602 mo
324.918 436.602 324.965 436.555 324.965 436.477 cv
324.965 432.977 li
324.965 431.992 324.934 430.82 324.902 429.836 cv
324.934 429.82 li
325.23 430.445 325.59 431.133 325.98 431.867 cv
327.434 434.555 li
327.465 434.602 327.512 434.648 327.59 434.648 cv
328.199 434.648 li
328.277 434.648 328.324 434.602 328.371 434.555 cv
329.809 431.867 li
330.199 431.133 330.559 430.445 330.871 429.82 cv
330.887 429.836 li
330.855 430.82 330.824 431.992 330.824 432.977 cv
330.824 436.477 li
330.824 436.555 330.871 436.602 330.949 436.602 cv
331.684 436.602 li
331.762 436.602 331.809 436.555 331.809 436.477 cv
331.809 428.445 li
331.809 428.352 331.762 428.305 331.684 428.305 cv
330.793 428.305 li
330.73 428.305 330.668 428.336 330.652 428.398 cv
328.84 431.68 li
328.543 432.211 328.121 433.07 327.918 433.508 cv
327.871 433.508 li
327.668 433.07 327.246 432.211 326.949 431.68 cv
325.152 428.398 li
325.121 428.336 325.059 428.305 324.996 428.305 cv
324.121 428.305 li
324.027 428.305 323.98 428.352 323.98 428.445 cv
323.98 436.477 li
323.98 436.555 324.027 436.602 324.121 436.602 cv
cp
f
334.875 432.852 mo
338.438 432.852 li
338.516 432.852 338.562 432.805 338.562 432.711 cv
338.562 432.07 li
338.562 431.977 338.516 431.93 338.438 431.93 cv
334.875 431.93 li
334.875 429.211 li
338.703 429.211 li
338.781 429.211 338.828 429.164 338.828 429.086 cv
338.828 428.445 li
338.828 428.352 338.781 428.305 338.703 428.305 cv
334.016 428.305 li
333.922 428.305 333.875 428.352 333.875 428.445 cv
333.875 436.477 li
333.875 436.555 333.922 436.602 334.016 436.602 cv
338.859 436.602 li
338.938 436.602 338.984 436.555 338.984 436.477 cv
338.984 435.82 li
338.984 435.742 338.938 435.695 338.859 435.695 cv
334.875 435.695 li
cp
f
346.355 436.602 mo
346.449 436.602 346.496 436.539 346.434 436.445 cv
344.074 433.289 li
345.449 433.055 346.262 432.18 346.262 430.852 cv
346.262 429.258 345.152 428.305 343.34 428.305 cv
340.73 428.305 li
340.637 428.305 340.59 428.352 340.59 428.445 cv
340.59 436.477 li
340.59 436.555 340.637 436.602 340.73 436.602 cv
341.449 436.602 li
341.527 436.602 341.574 436.555 341.574 436.477 cv
341.574 433.367 li
342.98 433.367 li
345.293 436.523 li
345.324 436.586 345.371 436.602 345.449 436.602 cv
cp
343.355 429.211 mo
344.605 429.211 345.246 429.758 345.246 430.852 cv
345.246 431.945 344.605 432.477 343.355 432.477 cv
341.574 432.477 li
341.574 429.211 li
cp
f
347.863 436.602 mo
347.941 436.602 347.988 436.57 348.02 436.492 cv
348.738 434.43 li
352.207 434.43 li
352.926 436.492 li
352.941 436.57 353.004 436.602 353.066 436.602 cv
353.848 436.602 li
353.941 436.602 353.988 436.539 353.957 436.445 cv
351.082 428.414 li
351.051 428.352 350.988 428.305 350.926 428.305 cv
350.004 428.305 li
349.941 428.305 349.895 428.352 349.863 428.414 cv
346.988 436.445 li
346.957 436.539 346.988 436.602 347.082 436.602 cv
cp
350.457 429.414 mo
350.504 429.414 li
351.91 433.523 li
349.035 433.523 li
cp
f
359.73 436.602 mo
359.809 436.602 359.855 436.555 359.855 436.477 cv
359.855 435.82 li
359.855 435.742 359.809 435.695 359.73 435.695 cv
356.09 435.695 li
356.09 428.445 li
356.09 428.352 356.043 428.305 355.965 428.305 cv
355.23 428.305 li
355.137 428.305 355.09 428.352 355.09 428.445 cv
355.09 436.477 li
355.09 436.555 355.137 436.602 355.23 436.602 cv
cp
f
364 436.602 mo
365.875 436.602 367.016 435.539 367.016 433.664 cv
367.016 431.289 li
367.016 429.383 365.875 428.305 364 428.305 cv
361.172 428.305 li
361.078 428.305 361.031 428.352 361.031 428.445 cv
361.031 436.477 li
361.031 436.555 361.078 436.602 361.172 436.602 cv
cp
362.031 429.211 mo
363.984 429.211 li
365.281 429.211 366 429.93 366 431.289 cv
366 433.664 li
366 435.008 365.281 435.68 363.984 435.68 cv
362.031 435.68 li
cp
f
368.664 436.602 mo
368.742 436.602 368.789 436.57 368.82 436.492 cv
369.539 434.43 li
373.008 434.43 li
373.727 436.492 li
373.742 436.57 373.805 436.602 373.867 436.602 cv
374.648 436.602 li
374.742 436.602 374.789 436.539 374.758 436.445 cv
371.883 428.414 li
371.852 428.352 371.789 428.305 371.727 428.305 cv
370.805 428.305 li
370.742 428.305 370.695 428.352 370.664 428.414 cv
367.789 436.445 li
367.758 436.539 367.789 436.602 367.883 436.602 cv
cp
371.258 429.414 mo
371.305 429.414 li
372.711 433.523 li
369.836 433.523 li
cp
f
381.391 434.352 mo
381.391 432.711 380.031 432.227 378.484 431.867 cv
377.266 431.586 376.453 431.273 376.453 430.398 cv
376.453 429.555 377.234 429.102 378.344 429.102 cv
379.141 429.117 379.875 429.367 380.594 429.852 cv
380.656 429.898 380.719 429.898 380.766 429.836 cv
381.156 429.289 li
381.203 429.227 381.203 429.164 381.125 429.117 cv
380.234 428.477 379.453 428.18 378.422 428.18 cv
376.828 428.18 375.469 428.852 375.469 430.383 cv
375.469 431.914 376.828 432.508 378.234 432.82 cv
379.562 433.117 380.406 433.414 380.406 434.383 cv
380.406 435.352 379.453 435.789 378.391 435.789 cv
377.531 435.773 376.812 435.461 376 434.867 cv
375.953 434.82 375.875 434.82 375.828 434.898 cv
375.438 435.445 li
375.391 435.508 375.391 435.57 375.469 435.633 cv
376.375 436.367 377.219 436.727 378.359 436.727 cv
380 436.727 381.391 436.008 381.391 434.352 cv
cp
f
388.297 433.555 mo
388.375 433.555 388.422 433.508 388.422 433.43 cv
388.422 432.805 li
388.422 432.711 388.375 432.664 388.297 432.664 cv
385.391 432.664 li
385.312 432.664 385.266 432.711 385.266 432.805 cv
385.266 433.43 li
385.266 433.508 385.312 433.555 385.391 433.555 cv
cp
f
393.809 428.445 mo
393.809 428.352 393.762 428.305 393.684 428.305 cv
392.965 428.305 li
392.871 428.305 392.824 428.352 392.824 428.445 cv
392.824 436.477 li
392.824 436.555 392.871 436.602 392.965 436.602 cv
393.684 436.602 li
393.762 436.602 393.809 436.555 393.809 436.477 cv
cp
f
401.312 430.492 mo
401.312 429.18 400.484 428.305 398.828 428.305 cv
396.016 428.305 li
395.922 428.305 395.875 428.352 395.875 428.445 cv
395.875 436.477 li
395.875 436.555 395.922 436.602 396.016 436.602 cv
398.812 436.602 li
400.625 436.602 401.656 435.711 401.656 434.195 cv
401.656 433.242 401.188 432.492 400.328 432.18 cv
400.938 431.898 401.312 431.273 401.312 430.492 cv
cp
396.859 435.711 mo
396.859 432.664 li
398.891 432.664 li
400.109 432.664 400.656 433.289 400.656 434.195 cv
400.656 435.227 399.953 435.711 398.828 435.711 cv
cp
400.312 430.492 mo
400.312 431.367 399.734 431.773 398.891 431.773 cv
396.859 431.773 li
396.859 429.211 li
398.828 429.211 li
399.812 429.211 400.312 429.711 400.312 430.492 cv
cp
f
403.16 436.602 mo
403.238 436.602 403.285 436.57 403.316 436.492 cv
404.035 434.43 li
407.504 434.43 li
408.223 436.492 li
408.238 436.57 408.301 436.602 408.363 436.602 cv
409.145 436.602 li
409.238 436.602 409.285 436.539 409.254 436.445 cv
406.379 428.414 li
406.348 428.352 406.285 428.305 406.223 428.305 cv
405.301 428.305 li
405.238 428.305 405.191 428.352 405.16 428.414 cv
402.285 436.445 li
402.254 436.539 402.285 436.602 402.379 436.602 cv
cp
405.754 429.414 mo
405.801 429.414 li
407.207 433.523 li
404.332 433.523 li
cp
f
416.152 436.602 mo
416.246 436.602 416.293 436.539 416.23 436.445 cv
413.871 433.289 li
415.246 433.055 416.059 432.18 416.059 430.852 cv
416.059 429.258 414.949 428.305 413.137 428.305 cv
410.527 428.305 li
410.434 428.305 410.387 428.352 410.387 428.445 cv
410.387 436.477 li
410.387 436.555 410.434 436.602 410.527 436.602 cv
411.246 436.602 li
411.324 436.602 411.371 436.555 411.371 436.477 cv
411.371 433.367 li
412.777 433.367 li
415.09 436.523 li
415.121 436.586 415.168 436.602 415.246 436.602 cv
cp
413.152 429.211 mo
414.402 429.211 415.043 429.758 415.043 430.852 cv
415.043 431.945 414.402 432.477 413.152 432.477 cv
411.371 432.477 li
411.371 429.211 li
cp
f
423.473 436.602 mo
423.566 436.602 423.613 436.539 423.551 436.445 cv
421.191 433.289 li
422.566 433.055 423.379 432.18 423.379 430.852 cv
423.379 429.258 422.27 428.305 420.457 428.305 cv
417.848 428.305 li
417.754 428.305 417.707 428.352 417.707 428.445 cv
417.707 436.477 li
417.707 436.555 417.754 436.602 417.848 436.602 cv
418.566 436.602 li
418.645 436.602 418.691 436.555 418.691 436.477 cv
418.691 433.367 li
420.098 433.367 li
422.41 436.523 li
422.441 436.586 422.488 436.602 422.566 436.602 cv
cp
420.473 429.211 mo
421.723 429.211 422.363 429.758 422.363 430.852 cv
422.363 431.945 421.723 432.477 420.473 432.477 cv
418.691 432.477 li
418.691 429.211 li
cp
f
424.98 436.602 mo
425.059 436.602 425.105 436.57 425.137 436.492 cv
425.855 434.43 li
429.324 434.43 li
430.043 436.492 li
430.059 436.57 430.121 436.602 430.184 436.602 cv
430.965 436.602 li
431.059 436.602 431.105 436.539 431.074 436.445 cv
428.199 428.414 li
428.168 428.352 428.105 428.305 428.043 428.305 cv
427.121 428.305 li
427.059 428.305 427.012 428.352 426.98 428.414 cv
424.105 436.445 li
424.074 436.539 424.105 436.602 424.199 436.602 cv
cp
427.574 429.414 mo
427.621 429.414 li
429.027 433.523 li
426.152 433.523 li
cp
f
437.328 433.555 mo
437.406 433.555 437.453 433.508 437.453 433.43 cv
437.453 432.805 li
437.453 432.711 437.406 432.664 437.328 432.664 cv
434.422 432.664 li
434.344 432.664 434.297 432.711 434.297 432.805 cv
434.297 433.43 li
434.297 433.508 434.344 433.555 434.422 433.555 cv
cp
f
442.719 436.602 mo
442.797 436.602 442.844 436.555 442.844 436.477 cv
442.844 432.977 li
442.844 431.992 442.812 430.82 442.781 429.836 cv
442.812 429.82 li
443.109 430.445 443.469 431.133 443.859 431.867 cv
445.312 434.555 li
445.344 434.602 445.391 434.648 445.469 434.648 cv
446.078 434.648 li
446.156 434.648 446.203 434.602 446.25 434.555 cv
447.688 431.867 li
448.078 431.133 448.438 430.445 448.75 429.82 cv
448.766 429.836 li
448.734 430.82 448.703 431.992 448.703 432.977 cv
448.703 436.477 li
448.703 436.555 448.75 436.602 448.828 436.602 cv
449.562 436.602 li
449.641 436.602 449.688 436.555 449.688 436.477 cv
449.688 428.445 li
449.688 428.352 449.641 428.305 449.562 428.305 cv
448.672 428.305 li
448.609 428.305 448.547 428.336 448.531 428.398 cv
446.719 431.68 li
446.422 432.211 446 433.07 445.797 433.508 cv
445.75 433.508 li
445.547 433.07 445.125 432.211 444.828 431.68 cv
443.031 428.398 li
443 428.336 442.938 428.305 442.875 428.305 cv
442 428.305 li
441.906 428.305 441.859 428.352 441.859 428.445 cv
441.859 436.477 li
441.859 436.555 441.906 436.602 442 436.602 cv
cp
f
451.707 436.602 mo
451.785 436.602 451.832 436.57 451.863 436.492 cv
452.582 434.43 li
456.051 434.43 li
456.77 436.492 li
456.785 436.57 456.848 436.602 456.91 436.602 cv
457.691 436.602 li
457.785 436.602 457.832 436.539 457.801 436.445 cv
454.926 428.414 li
454.895 428.352 454.832 428.305 454.77 428.305 cv
453.848 428.305 li
453.785 428.305 453.738 428.352 453.707 428.414 cv
450.832 436.445 li
450.801 436.539 450.832 436.602 450.926 436.602 cv
cp
454.301 429.414 mo
454.348 429.414 li
455.754 433.523 li
452.879 433.523 li
cp
f
459.777 436.602 mo
459.855 436.602 459.918 436.555 459.918 436.477 cv
459.918 432.961 li
459.918 432.039 459.887 430.852 459.855 429.93 cv
459.871 429.93 li
460.168 430.477 460.543 431.148 460.887 431.68 cv
463.934 436.523 li
463.965 436.586 464.027 436.602 464.09 436.602 cv
464.902 436.602 li
464.98 436.602 465.027 436.555 465.027 436.477 cv
465.027 428.445 li
465.027 428.352 464.98 428.305 464.902 428.305 cv
464.184 428.305 li
464.105 428.305 464.059 428.352 464.059 428.445 cv
464.059 431.945 li
464.059 432.93 464.074 434.133 464.121 435.102 cv
464.09 435.102 li
463.809 434.555 463.434 433.945 463.121 433.414 cv
460.043 428.398 li
460.012 428.352 459.949 428.305 459.887 428.305 cv
459.074 428.305 li
458.98 428.305 458.934 428.352 458.934 428.445 cv
458.934 436.477 li
458.934 436.555 458.98 436.602 459.074 436.602 cv
cp
f
467.055 436.602 mo
467.133 436.602 467.18 436.57 467.211 436.492 cv
467.93 434.43 li
471.398 434.43 li
472.117 436.492 li
472.133 436.57 472.195 436.602 472.258 436.602 cv
473.039 436.602 li
473.133 436.602 473.18 436.539 473.148 436.445 cv
470.273 428.414 li
470.242 428.352 470.18 428.305 470.117 428.305 cv
469.195 428.305 li
469.133 428.305 469.086 428.352 469.055 428.414 cv
466.18 436.445 li
466.148 436.539 466.18 436.602 466.273 436.602 cv
cp
469.648 429.414 mo
469.695 429.414 li
471.102 433.523 li
468.227 433.523 li
cp
f
479.719 430.492 mo
479.719 429.18 478.891 428.305 477.234 428.305 cv
474.422 428.305 li
474.328 428.305 474.281 428.352 474.281 428.445 cv
474.281 436.477 li
474.281 436.555 474.328 436.602 474.422 436.602 cv
477.219 436.602 li
479.031 436.602 480.062 435.711 480.062 434.195 cv
480.062 433.242 479.594 432.492 478.734 432.18 cv
479.344 431.898 479.719 431.273 479.719 430.492 cv
cp
475.266 435.711 mo
475.266 432.664 li
477.297 432.664 li
478.516 432.664 479.062 433.289 479.062 434.195 cv
479.062 435.227 478.359 435.711 477.234 435.711 cv
cp
478.719 430.492 mo
478.719 431.367 478.141 431.773 477.297 431.773 cv
475.266 431.773 li
475.266 429.211 li
477.234 429.211 li
478.219 429.211 478.719 429.711 478.719 430.492 cv
cp
f
482.641 428.445 mo
482.641 428.352 482.594 428.305 482.516 428.305 cv
481.797 428.305 li
481.703 428.305 481.656 428.352 481.656 428.445 cv
481.656 436.477 li
481.656 436.555 481.703 436.602 481.797 436.602 cv
482.516 436.602 li
482.594 436.602 482.641 436.555 482.641 436.477 cv
cp
483.812 425.883 mo
483.891 425.789 483.844 425.711 483.734 425.711 cv
482.922 425.711 li
482.859 425.711 482.812 425.742 482.781 425.789 cv
481.562 427.336 li
481.5 427.43 481.531 427.508 481.641 427.508 cv
482.234 427.508 li
482.297 427.508 482.359 427.477 482.406 427.414 cv
cp
f
490.098 433.555 mo
490.176 433.555 490.223 433.508 490.223 433.43 cv
490.223 432.805 li
490.223 432.711 490.176 432.664 490.098 432.664 cv
487.191 432.664 li
487.113 432.664 487.066 432.711 487.066 432.805 cv
487.066 433.43 li
487.066 433.508 487.113 433.555 487.191 433.555 cv
cp
f
500.129 434.352 mo
500.129 432.711 498.77 432.227 497.223 431.867 cv
496.004 431.586 495.191 431.273 495.191 430.398 cv
495.191 429.555 495.973 429.102 497.082 429.102 cv
497.879 429.117 498.613 429.367 499.332 429.852 cv
499.395 429.898 499.457 429.898 499.504 429.836 cv
499.895 429.289 li
499.941 429.227 499.941 429.164 499.863 429.117 cv
498.973 428.477 498.191 428.18 497.16 428.18 cv
495.566 428.18 494.207 428.852 494.207 430.383 cv
494.207 431.914 495.566 432.508 496.973 432.82 cv
498.301 433.117 499.145 433.414 499.145 434.383 cv
499.145 435.352 498.191 435.789 497.129 435.789 cv
496.27 435.773 495.551 435.461 494.738 434.867 cv
494.691 434.82 494.613 434.82 494.566 434.898 cv
494.176 435.445 li
494.129 435.508 494.129 435.57 494.207 435.633 cv
495.113 436.367 495.957 436.727 497.098 436.727 cv
498.738 436.727 500.129 436.008 500.129 434.352 cv
cp
f
501.609 436.602 mo
501.688 436.602 501.734 436.57 501.766 436.492 cv
502.484 434.43 li
505.953 434.43 li
506.672 436.492 li
506.688 436.57 506.75 436.602 506.812 436.602 cv
507.594 436.602 li
507.688 436.602 507.734 436.539 507.703 436.445 cv
504.828 428.414 li
504.797 428.352 504.734 428.305 504.672 428.305 cv
503.75 428.305 li
503.688 428.305 503.641 428.352 503.609 428.414 cv
500.734 436.445 li
500.703 436.539 500.734 436.602 500.828 436.602 cv
cp
504.203 429.414 mo
504.25 429.414 li
505.656 433.523 li
502.781 433.523 li
cp
f
509.68 436.602 mo
509.758 436.602 509.82 436.555 509.82 436.477 cv
509.82 432.961 li
509.82 432.039 509.789 430.852 509.758 429.93 cv
509.773 429.93 li
510.07 430.477 510.445 431.148 510.789 431.68 cv
513.836 436.523 li
513.867 436.586 513.93 436.602 513.992 436.602 cv
514.805 436.602 li
514.883 436.602 514.93 436.555 514.93 436.477 cv
514.93 428.445 li
514.93 428.352 514.883 428.305 514.805 428.305 cv
514.086 428.305 li
514.008 428.305 513.961 428.352 513.961 428.445 cv
513.961 431.945 li
513.961 432.93 513.977 434.133 514.023 435.102 cv
513.992 435.102 li
513.711 434.555 513.336 433.945 513.023 433.414 cv
509.945 428.398 li
509.914 428.352 509.852 428.305 509.789 428.305 cv
508.977 428.305 li
508.883 428.305 508.836 428.352 508.836 428.445 cv
508.836 436.477 li
508.836 436.555 508.883 436.602 508.977 436.602 cv
cp
f
516.238 428.305 mo
516.16 428.305 516.113 428.352 516.113 428.445 cv
516.113 429.086 li
516.113 429.164 516.16 429.211 516.238 429.211 cv
518.723 429.211 li
518.723 436.477 li
518.723 436.555 518.785 436.602 518.863 436.602 cv
519.582 436.602 li
519.66 436.602 519.723 436.555 519.723 436.477 cv
519.723 429.211 li
522.191 429.211 li
522.285 429.211 522.332 429.164 522.332 429.086 cv
522.332 428.445 li
522.332 428.352 522.285 428.305 522.191 428.305 cv
cp
f
529.395 433.695 mo
529.395 431.242 li
529.395 429.352 528.176 428.18 526.223 428.18 cv
524.27 428.18 523.051 429.352 523.051 431.242 cv
523.051 433.695 li
523.051 435.555 524.27 436.727 526.223 436.727 cv
528.176 436.727 529.395 435.555 529.395 433.695 cv
cp
524.051 433.695 mo
524.051 431.242 li
524.051 429.883 524.848 429.102 526.223 429.102 cv
527.598 429.102 528.379 429.883 528.379 431.242 cv
528.379 433.695 li
528.379 435.008 527.598 435.789 526.223 435.789 cv
524.848 435.789 524.051 435.008 524.051 433.695 cv
cp
f
536.746 436.602 mo
538.621 436.602 539.762 435.539 539.762 433.664 cv
539.762 431.289 li
539.762 429.383 538.621 428.305 536.746 428.305 cv
533.918 428.305 li
533.824 428.305 533.777 428.352 533.777 428.445 cv
533.777 436.477 li
533.777 436.555 533.824 436.602 533.918 436.602 cv
cp
534.777 429.211 mo
536.73 429.211 li
538.027 429.211 538.746 429.93 538.746 431.289 cv
538.746 433.664 li
538.746 435.008 538.027 435.68 536.73 435.68 cv
534.777 435.68 li
cp
f
547.598 433.695 mo
547.598 431.242 li
547.598 429.352 546.379 428.18 544.426 428.18 cv
542.473 428.18 541.254 429.352 541.254 431.242 cv
541.254 433.695 li
541.254 435.555 542.473 436.727 544.426 436.727 cv
546.379 436.727 547.598 435.555 547.598 433.695 cv
cp
542.254 433.695 mo
542.254 431.242 li
542.254 429.883 543.051 429.102 544.426 429.102 cv
545.801 429.102 546.582 429.883 546.582 431.242 cv
546.582 433.695 li
546.582 435.008 545.801 435.789 544.426 435.789 cv
543.051 435.789 542.254 435.008 542.254 433.695 cv
cp
f
550.227 436.602 mo
550.305 436.602 550.352 436.555 550.352 436.477 cv
550.352 432.977 li
550.352 431.992 550.32 430.82 550.289 429.836 cv
550.32 429.82 li
550.617 430.445 550.977 431.133 551.367 431.867 cv
552.82 434.555 li
552.852 434.602 552.898 434.648 552.977 434.648 cv
553.586 434.648 li
553.664 434.648 553.711 434.602 553.758 434.555 cv
555.195 431.867 li
555.586 431.133 555.945 430.445 556.258 429.82 cv
556.273 429.836 li
556.242 430.82 556.211 431.992 556.211 432.977 cv
556.211 436.477 li
556.211 436.555 556.258 436.602 556.336 436.602 cv
557.07 436.602 li
557.148 436.602 557.195 436.555 557.195 436.477 cv
557.195 428.445 li
557.195 428.352 557.148 428.305 557.07 428.305 cv
556.18 428.305 li
556.117 428.305 556.055 428.336 556.039 428.398 cv
554.227 431.68 li
553.93 432.211 553.508 433.07 553.305 433.508 cv
553.258 433.508 li
553.055 433.07 552.633 432.211 552.336 431.68 cv
550.539 428.398 li
550.508 428.336 550.445 428.305 550.383 428.305 cv
549.508 428.305 li
549.414 428.305 549.367 428.352 549.367 428.445 cv
549.367 436.477 li
549.367 436.555 549.414 436.602 549.508 436.602 cv
cp
f
560.246 428.445 mo
560.246 428.352 560.199 428.305 560.121 428.305 cv
559.402 428.305 li
559.309 428.305 559.262 428.352 559.262 428.445 cv
559.262 436.477 li
559.262 436.555 559.309 436.602 559.402 436.602 cv
560.121 436.602 li
560.199 436.602 560.246 436.555 560.246 436.477 cv
cp
f
563.156 436.602 mo
563.234 436.602 563.297 436.555 563.297 436.477 cv
563.297 432.961 li
563.297 432.039 563.266 430.852 563.234 429.93 cv
563.25 429.93 li
563.547 430.477 563.922 431.148 564.266 431.68 cv
567.312 436.523 li
567.344 436.586 567.406 436.602 567.469 436.602 cv
568.281 436.602 li
568.359 436.602 568.406 436.555 568.406 436.477 cv
568.406 428.445 li
568.406 428.352 568.359 428.305 568.281 428.305 cv
567.562 428.305 li
567.484 428.305 567.438 428.352 567.438 428.445 cv
567.438 431.945 li
567.438 432.93 567.453 434.133 567.5 435.102 cv
567.469 435.102 li
567.188 434.555 566.812 433.945 566.5 433.414 cv
563.422 428.398 li
563.391 428.352 563.328 428.305 563.266 428.305 cv
562.453 428.305 li
562.359 428.305 562.312 428.352 562.312 428.445 cv
562.312 436.477 li
562.312 436.555 562.359 436.602 562.453 436.602 cv
cp
f
576.199 435.555 mo
576.23 435.523 576.246 435.477 576.246 435.414 cv
576.246 432.211 li
576.246 432.133 576.199 432.086 576.121 432.086 cv
573.371 432.086 li
573.293 432.086 573.246 432.133 573.246 432.211 cv
573.246 432.852 li
573.246 432.945 573.293 432.977 573.371 432.977 cv
575.262 432.977 li
575.262 435.148 li
574.809 435.539 574.105 435.789 573.309 435.789 cv
572.074 435.789 571.184 435.117 571.184 433.852 cv
571.184 431.07 li
571.184 429.805 571.996 429.117 573.23 429.117 cv
574.027 429.117 574.793 429.352 575.449 429.773 cv
575.512 429.805 575.574 429.805 575.621 429.742 cv
576.012 429.195 li
576.059 429.133 576.059 429.055 575.98 429.008 cv
575.199 428.477 574.199 428.18 573.23 428.18 cv
571.559 428.18 570.199 429.148 570.199 431.055 cv
570.199 433.852 li
570.199 435.758 571.605 436.727 573.309 436.727 cv
574.512 436.727 575.512 436.258 576.199 435.555 cv
cp
f
584.02 433.695 mo
584.02 431.242 li
584.02 429.352 582.801 428.18 580.848 428.18 cv
578.895 428.18 577.676 429.352 577.676 431.242 cv
577.676 433.695 li
577.676 435.555 578.895 436.727 580.848 436.727 cv
582.801 436.727 584.02 435.555 584.02 433.695 cv
cp
578.676 433.695 mo
578.676 431.242 li
578.676 429.883 579.473 429.102 580.848 429.102 cv
582.223 429.102 583.004 429.883 583.004 431.242 cv
583.004 433.695 li
583.004 435.008 582.223 435.789 580.848 435.789 cv
579.473 435.789 578.676 435.008 578.676 433.695 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
