%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: final.pdf
%%Creator: Adobe Acrobat 23.8.0
%%For: AEMERINOT
%%CreationDate: 22/02/2024, 15:51:40
%%BoundingBox: 0 0 792 446
%%HiResBoundingBox: 0 0 792 445.5586
%%CropBox: 0 0 792 445.5586
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 582 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 9.1-c001 79.675d0f7, 2023/06/11-19:21:16        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2023-04-16T21:58:58+05:00"
   xmp:CreatorTool="Inkscape 1.1.1 (https://inkscape.org)"
   pdf:Producer="cairo 1.17.4 (https://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -445.559 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 445.559 li
792 445.559 li
792 0 li
cp
clp
0 0 mo
791.973 0 li
791.973 445.559 li
0 445.559 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.747768 .22211 0 0 cmyk
f
324.484 106.57 mo
323.141 106.57 322.16 106.148 321.09 105.277 cv
321.008 105.211 321.008 105.145 321.062 105.062 cv
321.523 104.426 li
321.578 104.344 321.656 104.332 321.727 104.383 cv
322.664 105.09 323.504 105.457 324.523 105.469 cv
325.758 105.469 326.875 104.953 326.875 103.812 cv
326.875 102.688 325.879 102.336 324.332 101.996 cv
322.691 101.629 321.09 100.938 321.09 99.133 cv
321.09 97.34 322.691 96.562 324.551 96.562 cv
325.758 96.562 326.684 96.902 327.715 97.648 cv
327.809 97.703 327.809 97.785 327.754 97.852 cv
327.305 98.492 li
327.254 98.57 327.172 98.57 327.086 98.52 cv
326.262 97.949 325.391 97.664 324.457 97.637 cv
323.164 97.637 322.258 98.168 322.258 99.156 cv
322.258 100.188 323.207 100.555 324.633 100.883 cv
326.438 101.289 328.039 101.859 328.039 103.789 cv
328.039 105.73 326.398 106.57 324.484 106.57 cv
0 0 0 0 cmyk
f
333.875 100.258 mo
332.855 100.258 332.125 100.789 332.125 101.953 cv
332.125 102.523 li
335.625 102.523 li
335.625 101.953 li
335.625 100.801 334.867 100.258 333.875 100.258 cv
336.715 103.285 mo
336.715 103.391 336.656 103.449 336.562 103.449 cv
332.125 103.449 li
332.125 104.016 li
332.125 105.035 332.887 105.578 333.887 105.578 cv
334.828 105.578 335.465 105.215 335.965 104.816 cv
336.047 104.766 336.129 104.777 336.188 104.863 cv
336.578 105.375 li
336.645 105.457 336.633 105.523 336.547 105.594 cv
335.871 106.16 335.004 106.57 333.863 106.57 cv
332.398 106.57 330.996 105.727 330.996 104.016 cv
330.996 101.953 li
330.996 100.094 332.383 99.25 333.875 99.25 cv
335.359 99.25 336.715 100.094 336.715 101.953 cv
cp
f
340.105 106.422 mo
340.012 106.422 339.957 106.367 339.957 106.273 cv
339.957 99.93 li
339.957 99.848 339.984 99.781 340.066 99.754 cv
340.746 99.43 341.586 99.25 342.387 99.25 cv
342.836 99.25 343.297 99.293 343.785 99.359 cv
343.879 99.375 343.922 99.441 343.922 99.535 cv
343.922 100.203 li
343.922 100.312 343.867 100.367 343.762 100.34 cv
343.379 100.285 342.945 100.246 342.535 100.246 cv
341.98 100.246 341.438 100.367 341.07 100.516 cv
341.07 106.273 li
341.07 106.367 341.016 106.422 340.906 106.422 cv
cp
f
348.512 98.316 mo
348.387 98.316 348.32 98.234 348.387 98.125 cv
349.488 96.32 li
349.527 96.266 349.609 96.227 349.68 96.227 cv
350.531 96.227 li
350.656 96.227 350.695 96.305 350.613 96.414 cv
349.309 98.219 li
349.27 98.273 349.203 98.316 349.121 98.316 cv
cp
349.246 100.258 mo
348.227 100.258 347.492 100.789 347.492 101.953 cv
347.492 102.523 li
350.996 102.523 li
350.996 101.953 li
350.996 100.801 350.234 100.258 349.246 100.258 cv
352.078 103.285 mo
352.078 103.391 352.027 103.449 351.93 103.449 cv
347.492 103.449 li
347.492 104.016 li
347.492 105.035 348.25 105.578 349.254 105.578 cv
350.191 105.578 350.828 105.211 351.336 104.82 cv
351.414 104.766 351.496 104.777 351.551 104.863 cv
351.941 105.375 li
352.012 105.457 351.996 105.523 351.918 105.594 cv
351.238 106.16 350.371 106.57 349.227 106.57 cv
347.762 106.57 346.363 105.727 346.363 104.016 cv
346.363 101.953 li
346.363 100.094 347.75 99.25 349.246 99.25 cv
350.723 99.25 352.078 100.094 352.078 101.953 cv
cp
f
355.504 106.422 mo
355.391 106.422 355.336 106.367 355.336 106.273 cv
355.336 99.566 li
355.336 99.469 355.391 99.398 355.504 99.398 cv
356.301 99.398 li
356.398 99.398 356.449 99.469 356.449 99.566 cv
356.449 106.273 li
356.449 106.367 356.398 106.422 356.301 106.422 cv
cp
355.91 98.098 mo
355.527 98.098 355.23 97.812 355.23 97.434 cv
355.23 97.039 355.527 96.77 355.91 96.77 cv
356.289 96.77 356.574 97.039 356.574 97.434 cv
356.574 97.812 356.289 98.098 355.91 98.098 cv
f
362.316 106.57 mo
361.379 106.57 360.441 106.297 359.629 105.699 cv
359.547 105.648 359.547 105.562 359.59 105.484 cv
359.953 104.859 li
360.008 104.766 360.078 104.75 360.172 104.82 cv
360.82 105.309 361.57 105.578 362.344 105.578 cv
363.254 105.578 363.945 105.199 363.945 104.492 cv
363.945 103.73 363.102 103.555 362.344 103.41 cv
361.363 103.203 359.695 102.824 359.695 101.246 cv
359.695 99.863 361.012 99.25 362.371 99.25 cv
363.227 99.25 363.984 99.469 364.734 99.891 cv
364.828 99.93 364.84 100.012 364.785 100.094 cv
364.418 100.703 li
364.379 100.789 364.297 100.812 364.215 100.758 cv
363.66 100.461 362.996 100.258 362.316 100.258 cv
361.363 100.258 360.797 100.637 360.797 101.246 cv
360.797 101.996 361.598 102.199 362.562 102.391 cv
363.645 102.605 365.074 102.918 365.074 104.438 cv
365.074 105.824 363.906 106.57 362.316 106.57 cv
f
379.395 99.25 mo
381.051 99.25 382.207 100.215 382.207 102.02 cv
382.207 106.273 li
382.207 106.367 382.148 106.422 382.055 106.422 cv
381.254 106.422 li
381.145 106.422 381.09 106.367 381.09 106.273 cv
381.09 101.996 li
381.09 100.906 380.531 100.258 379.363 100.258 cv
378.793 100.258 378.281 100.434 377.871 100.719 cv
378.035 101.074 378.133 101.52 378.133 102.008 cv
378.133 106.273 li
378.133 106.367 378.078 106.422 377.984 106.422 cv
377.168 106.422 li
377.07 106.422 377.02 106.367 377.02 106.273 cv
377.02 101.996 li
377.02 100.84 376.488 100.258 375.387 100.258 cv
374.832 100.258 374.398 100.363 374.016 100.5 cv
374.016 106.273 li
374.016 106.367 373.965 106.422 373.855 106.422 cv
373.051 106.422 li
372.957 106.422 372.902 106.367 372.902 106.273 cv
372.902 99.973 li
372.902 99.891 372.934 99.824 373.027 99.781 cv
373.742 99.453 374.535 99.25 375.363 99.25 cv
376.191 99.25 376.828 99.496 377.305 99.918 cv
377.953 99.484 378.578 99.25 379.395 99.25 cv
f
385.867 106.422 mo
385.762 106.422 385.707 106.367 385.707 106.273 cv
385.707 99.566 li
385.707 99.469 385.762 99.398 385.867 99.398 cv
386.672 99.398 li
386.766 99.398 386.82 99.469 386.82 99.566 cv
386.82 106.273 li
386.82 106.367 386.766 106.422 386.672 106.422 cv
cp
386.277 98.098 mo
385.895 98.098 385.598 97.812 385.598 97.434 cv
385.598 97.039 385.895 96.77 386.277 96.77 cv
386.652 96.77 386.938 97.039 386.938 97.434 cv
386.938 97.812 386.652 98.098 386.277 98.098 cv
f
392.684 106.57 mo
391.746 106.57 390.809 106.297 389.992 105.699 cv
389.914 105.648 389.914 105.562 389.953 105.484 cv
390.32 104.859 li
390.375 104.766 390.441 104.75 390.535 104.82 cv
391.188 105.309 391.934 105.578 392.711 105.578 cv
393.621 105.578 394.312 105.199 394.312 104.492 cv
394.312 103.73 393.473 103.555 392.711 103.41 cv
391.73 103.203 390.062 102.824 390.062 101.246 cv
390.062 99.863 391.379 99.25 392.738 99.25 cv
393.59 99.25 394.352 99.469 395.098 99.891 cv
395.191 99.93 395.207 100.012 395.152 100.094 cv
394.789 100.703 li
394.746 100.789 394.664 100.812 394.586 100.758 cv
394.023 100.461 393.359 100.258 392.684 100.258 cv
391.73 100.258 391.16 100.637 391.16 101.246 cv
391.16 101.996 391.965 102.199 392.926 102.391 cv
394.012 102.605 395.438 102.918 395.438 104.438 cv
395.438 105.824 394.27 106.57 392.684 106.57 cv
f
405.66 105.539 mo
405.809 105.539 406.066 105.527 406.309 105.508 cv
406.422 105.508 406.477 105.562 406.477 105.66 cv
406.477 106.379 li
406.477 106.461 406.434 106.527 406.34 106.539 cv
406.094 106.559 405.781 106.57 405.605 106.57 cv
404.25 106.57 403.242 105.836 403.242 104.164 cv
403.242 97.84 li
403.242 97.73 403.297 97.68 403.406 97.68 cv
404.113 97.68 li
404.195 97.68 404.25 97.73 404.262 97.828 cv
404.355 99.469 li
406.121 99.469 li
406.215 99.469 406.27 99.523 406.27 99.621 cv
406.27 100.297 li
406.27 100.406 406.215 100.461 406.121 100.461 cv
404.355 100.461 li
404.355 104.109 li
404.355 105.008 404.82 105.539 405.66 105.539 cv
f
411.906 100.258 mo
410.887 100.258 410.152 100.789 410.152 101.953 cv
410.152 102.523 li
413.656 102.523 li
413.656 101.953 li
413.656 100.801 412.895 100.258 411.906 100.258 cv
414.742 103.285 mo
414.742 103.391 414.688 103.449 414.594 103.449 cv
410.152 103.449 li
410.152 104.016 li
410.152 105.035 410.91 105.578 411.918 105.578 cv
412.852 105.578 413.492 105.215 413.996 104.816 cv
414.074 104.766 414.156 104.777 414.211 104.863 cv
414.605 105.375 li
414.676 105.457 414.66 105.523 414.578 105.594 cv
413.902 106.16 413.031 106.57 411.891 106.57 cv
410.422 106.57 409.023 105.727 409.023 104.016 cv
409.023 101.953 li
409.023 100.094 410.41 99.25 411.902 99.25 cv
413.383 99.25 414.742 100.094 414.742 101.953 cv
cp
f
420.293 106.57 mo
419.355 106.57 418.422 106.297 417.605 105.699 cv
417.523 105.648 417.523 105.562 417.566 105.484 cv
417.934 104.859 li
417.988 104.766 418.055 104.75 418.148 104.82 cv
418.801 105.309 419.547 105.578 420.32 105.578 cv
421.234 105.578 421.922 105.199 421.922 104.492 cv
421.922 103.73 421.082 103.555 420.32 103.41 cv
419.344 103.203 417.672 102.824 417.672 101.246 cv
417.672 99.863 418.988 99.25 420.348 99.25 cv
421.203 99.25 421.965 99.469 422.711 99.891 cv
422.805 99.93 422.816 100.012 422.762 100.094 cv
422.398 100.703 li
422.359 100.789 422.273 100.812 422.195 100.758 cv
421.637 100.461 420.973 100.258 420.293 100.258 cv
419.344 100.258 418.773 100.637 418.773 101.246 cv
418.773 101.996 419.574 102.199 420.539 102.391 cv
421.625 102.605 423.051 102.918 423.051 104.438 cv
423.051 105.824 421.883 106.57 420.293 106.57 cv
f
428.52 105.539 mo
428.668 105.539 428.926 105.527 429.168 105.508 cv
429.277 105.508 429.336 105.562 429.336 105.66 cv
429.336 106.379 li
429.336 106.461 429.293 106.527 429.199 106.539 cv
428.953 106.559 428.641 106.57 428.465 106.57 cv
427.109 106.57 426.102 105.836 426.102 104.164 cv
426.102 97.84 li
426.102 97.73 426.156 97.68 426.266 97.68 cv
426.973 97.68 li
427.055 97.68 427.109 97.73 427.121 97.828 cv
427.215 99.469 li
428.98 99.469 li
429.074 99.469 429.129 99.523 429.129 99.621 cv
429.129 100.297 li
429.129 100.406 429.074 100.461 428.98 100.461 cv
427.215 100.461 li
427.215 104.109 li
427.215 105.008 427.676 105.539 428.52 105.539 cv
f
432.359 106.422 mo
432.254 106.422 432.199 106.367 432.199 106.273 cv
432.199 99.566 li
432.199 99.469 432.254 99.398 432.359 99.398 cv
433.16 99.398 li
433.254 99.398 433.312 99.469 433.312 99.566 cv
433.312 106.273 li
433.312 106.367 433.254 106.422 433.16 106.422 cv
cp
432.766 98.098 mo
432.387 98.098 432.09 97.812 432.09 97.434 cv
432.09 97.039 432.387 96.77 432.766 96.77 cv
433.148 96.77 433.434 97.039 433.434 97.434 cv
433.434 97.812 433.148 98.098 432.766 98.098 cv
f
439.625 105.199 mo
440.234 105.199 440.898 105.051 441.281 104.789 cv
441.281 100.488 li
440.887 100.352 440.18 100.258 439.68 100.258 cv
438.512 100.258 437.75 100.734 437.75 102.074 cv
437.75 103.434 li
437.75 104.738 438.551 105.199 439.625 105.199 cv
439.527 109.137 mo
438.441 109.137 437.629 108.797 436.91 108.199 cv
436.84 108.145 436.84 108.078 436.895 107.98 cv
437.289 107.398 li
437.344 107.316 437.422 107.305 437.508 107.371 cv
438.062 107.82 438.715 108.129 439.527 108.129 cv
440.75 108.129 441.32 107.52 441.281 106.137 cv
441.281 105.809 li
440.777 106.051 440.113 106.203 439.543 106.203 cv
437.91 106.203 436.625 105.32 436.625 103.434 cv
436.625 102.074 li
436.625 100.027 437.965 99.25 439.664 99.25 cv
440.613 99.25 441.566 99.473 442.27 99.781 cv
442.352 99.809 442.395 99.863 442.395 99.961 cv
442.395 106.23 li
442.395 108.012 441.551 109.137 439.527 109.137 cv
f
448.676 105.578 mo
449.898 105.578 450.555 104.926 450.555 103.906 cv
450.555 101.953 li
450.555 100.922 449.898 100.258 448.676 100.258 cv
447.469 100.258 446.82 100.922 446.82 101.953 cv
446.82 103.906 li
446.82 104.926 447.469 105.578 448.676 105.578 cv
448.676 106.57 mo
446.844 106.57 445.691 105.496 445.691 103.906 cv
445.691 101.953 li
445.691 100.363 446.844 99.25 448.676 99.25 cv
450.523 99.25 451.668 100.363 451.668 101.953 cv
451.668 103.906 li
451.668 105.496 450.523 106.57 448.676 106.57 cv
f
457.27 106.57 mo
456.336 106.57 455.398 106.297 454.582 105.699 cv
454.5 105.648 454.5 105.562 454.543 105.484 cv
454.906 104.859 li
454.965 104.766 455.031 104.75 455.125 104.82 cv
455.777 105.309 456.527 105.578 457.301 105.578 cv
458.207 105.578 458.902 105.199 458.902 104.492 cv
458.902 103.73 458.059 103.555 457.301 103.41 cv
456.32 103.203 454.648 102.824 454.648 101.246 cv
454.648 99.863 455.965 99.25 457.324 99.25 cv
458.184 99.25 458.941 99.469 459.688 99.891 cv
459.781 99.93 459.797 100.012 459.742 100.094 cv
459.375 100.703 li
459.336 100.789 459.254 100.812 459.168 100.758 cv
458.613 100.461 457.949 100.258 457.27 100.258 cv
456.32 100.258 455.75 100.637 455.75 101.246 cv
455.75 101.996 456.551 102.199 457.516 102.391 cv
458.602 102.605 460.027 102.918 460.027 104.438 cv
460.027 105.824 458.859 106.57 457.27 106.57 cv
f
326.309 59.211 mo
327.969 59.211 328.777 58.469 328.777 56.922 cv
328.777 55.391 327.969 54.625 326.309 54.625 cv
324.125 54.625 li
324.125 59.211 li
cp
326.789 51.398 mo
330.215 51.398 332.379 53.535 332.379 56.922 cv
332.379 60.324 330.215 62.461 326.789 62.461 cv
324.125 62.461 li
324.125 66.609 li
324.125 66.871 323.992 67.004 323.754 67.004 cv
321.004 67.004 li
320.766 67.004 320.633 66.871 320.633 66.609 cv
320.633 51.789 li
320.633 51.527 320.766 51.398 321.004 51.398 cv
cp
f
338.863 64.344 mo
340.02 64.344 340.652 63.75 340.652 62.66 cv
340.652 60.039 li
340.652 58.949 340.02 58.316 338.863 58.316 cv
337.707 58.316 337.074 58.949 337.074 60.039 cv
337.074 62.66 li
337.074 63.75 337.707 64.344 338.863 64.344 cv
338.863 67.285 mo
335.656 67.285 333.668 65.539 333.668 62.66 cv
333.668 60.039 li
333.668 57.113 335.656 55.348 338.863 55.348 cv
342.051 55.348 344.039 57.113 344.039 60.039 cv
344.039 62.66 li
344.039 65.539 342.051 67.285 338.863 67.285 cv
f
346.484 67.023 mo
346.227 67.023 346.094 66.871 346.094 66.633 cv
346.094 56.699 li
346.094 56.484 346.18 56.332 346.379 56.242 cv
347.707 55.695 349.414 55.348 350.961 55.348 cv
354.277 55.348 356.156 57.137 356.156 60.41 cv
356.156 66.633 li
356.156 66.871 356.027 67.023 355.766 67.023 cv
353.188 67.023 li
352.926 67.023 352.793 66.871 352.793 66.633 cv
352.793 60.41 li
352.793 58.82 352.117 58.316 350.961 58.316 cv
350.348 58.316 349.781 58.406 349.434 58.512 cv
349.434 66.633 li
349.434 66.871 349.301 67.023 349.062 67.023 cv
cp
f
363.188 64.297 mo
363.383 64.297 363.645 64.273 363.887 64.25 cv
364.172 64.211 364.301 64.32 364.301 64.582 cv
364.301 66.719 li
364.301 66.938 364.211 67.113 363.996 67.156 cv
363.625 67.223 363.145 67.266 362.621 67.266 cv
360.086 67.266 358.387 65.891 358.387 63.098 cv
358.387 53.297 li
358.387 53.059 358.516 52.926 358.781 52.926 cv
361.047 52.926 li
361.289 52.926 361.418 53.035 361.441 53.273 cv
361.703 55.895 li
363.668 55.895 li
363.906 55.895 364.059 56.023 364.059 56.262 cv
364.059 58.359 li
364.059 58.598 363.906 58.73 363.668 58.73 cv
361.723 58.73 li
361.723 62.684 li
361.723 63.754 362.23 64.297 363.188 64.297 cv
f
366.418 67.004 mo
366.18 67.004 366.027 66.871 366.027 66.609 cv
366.027 56.023 li
366.027 55.785 366.18 55.652 366.418 55.652 cv
368.996 55.652 li
369.238 55.652 369.367 55.785 369.367 56.023 cv
369.367 66.609 li
369.367 66.871 369.238 67.004 368.996 67.004 cv
cp
367.707 54.078 mo
366.641 54.078 365.852 53.273 365.852 52.246 cv
365.852 51.176 366.641 50.414 367.707 50.414 cv
368.801 50.414 369.543 51.176 369.543 52.246 cv
369.543 53.273 368.801 54.078 367.707 54.078 cv
f
376.594 53.996 mo
375.633 53.996 375.156 54.539 375.156 55.562 cv
375.156 55.938 li
377.207 55.938 li
377.445 55.938 377.574 56.07 377.574 56.309 cv
377.574 58.402 li
377.574 58.645 377.445 58.773 377.207 58.773 cv
375.156 58.773 li
375.156 66.609 li
375.156 66.871 375.023 67.004 374.781 67.004 cv
372.203 67.004 li
371.945 67.004 371.812 66.871 371.812 66.609 cv
371.812 55.434 li
371.812 52.598 373.52 51.113 376.023 51.113 cv
376.594 51.113 377.078 51.137 377.469 51.199 cv
377.684 51.242 377.797 51.398 377.797 51.637 cv
377.797 53.664 li
377.797 53.906 377.684 54.059 377.512 54.039 cv
377.25 54.016 376.922 53.996 376.594 53.996 cv
f
379.586 67.004 mo
379.344 67.004 379.191 66.871 379.191 66.609 cv
379.191 56.023 li
379.191 55.785 379.344 55.652 379.586 55.652 cv
382.164 55.652 li
382.402 55.652 382.535 55.785 382.535 56.023 cv
382.535 66.609 li
382.535 66.871 382.402 67.004 382.164 67.004 cv
cp
380.875 54.078 mo
379.805 54.078 379.02 53.273 379.02 52.246 cv
379.02 51.176 379.805 50.414 380.875 50.414 cv
381.965 50.414 382.711 51.176 382.711 52.246 cv
382.711 53.273 381.965 54.078 380.875 54.078 cv
f
389.805 67.285 mo
386.508 67.285 384.629 65.457 384.629 62.527 cv
384.629 60.062 li
384.629 57.184 386.531 55.348 389.781 55.348 cv
391.047 55.348 392.25 55.695 393.359 56.375 cv
393.559 56.508 393.602 56.699 393.473 56.922 cv
392.312 58.664 li
392.184 58.883 392.008 58.906 391.77 58.797 cv
391.203 58.488 390.57 58.297 389.934 58.297 cv
388.734 58.297 388.012 58.949 388.012 60.062 cv
388.012 62.527 li
388.012 63.754 388.781 64.344 389.914 64.344 cv
390.656 64.344 391.355 64.121 392.008 63.707 cv
392.227 63.574 392.422 63.621 392.555 63.82 cv
393.734 65.562 li
393.863 65.762 393.844 65.957 393.668 66.086 cv
392.555 66.871 391.309 67.285 389.805 67.285 cv
f
395.699 67.004 mo
395.461 67.004 395.309 66.871 395.309 66.609 cv
395.309 56.023 li
395.309 55.785 395.461 55.652 395.699 55.652 cv
398.277 55.652 li
398.516 55.652 398.648 55.785 398.648 56.023 cv
398.648 66.609 li
398.648 66.871 398.516 67.004 398.277 67.004 cv
cp
396.988 54.078 mo
395.922 54.078 395.133 53.273 395.133 52.246 cv
395.133 51.176 395.922 50.414 396.988 50.414 cv
398.078 50.414 398.824 51.176 398.824 52.246 cv
398.824 53.273 398.078 54.078 396.988 54.078 cv
f
405.48 64.582 mo
405.984 64.582 406.57 64.496 406.969 64.406 cv
406.969 62.484 li
406.531 62.398 405.941 62.355 405.461 62.355 cv
404.258 62.355 403.734 62.746 403.734 63.445 cv
403.734 64.211 404.434 64.582 405.48 64.582 cv
405.523 55.348 mo
408.535 55.348 410.305 56.922 410.305 60.238 cv
410.305 66.219 li
410.305 66.438 410.195 66.59 409.98 66.656 cv
408.691 67.047 406.969 67.285 405.48 67.285 cv
402.34 67.285 400.352 66.109 400.352 63.535 cv
400.352 61.262 402.145 60.129 405.109 60.129 cv
405.785 60.129 406.422 60.195 406.969 60.258 cv
406.969 60.039 li
406.969 58.883 406.551 58.25 405.133 58.25 cv
404.172 58.25 403.039 58.512 402.406 58.863 cv
402.207 58.973 401.988 58.949 401.879 58.73 cv
400.984 57.031 li
400.879 56.809 400.879 56.656 401.031 56.547 cv
402.055 55.895 403.648 55.348 405.523 55.348 cv
f
423.43 67.266 mo
419.586 67.266 417.359 65.082 417.359 61.262 cv
417.359 51.789 li
417.359 51.527 417.492 51.398 417.754 51.398 cv
420.527 51.398 li
420.766 51.398 420.918 51.527 420.918 51.789 cv
420.918 61.262 li
420.918 63.031 421.816 63.949 423.43 63.949 cv
425.043 63.949 425.98 63.031 425.98 61.262 cv
425.98 51.789 li
425.98 51.527 426.113 51.398 426.355 51.398 cv
429.148 51.398 li
429.391 51.398 429.52 51.527 429.52 51.789 cv
429.52 61.262 li
429.52 65.082 427.27 67.266 423.43 67.266 cv
f
432.359 67.023 mo
432.098 67.023 431.969 66.871 431.969 66.633 cv
431.969 56.699 li
431.969 56.484 432.055 56.332 432.254 56.242 cv
433.582 55.695 435.285 55.348 436.836 55.348 cv
440.152 55.348 442.031 57.137 442.031 60.41 cv
442.031 66.633 li
442.031 66.871 441.902 67.023 441.637 67.023 cv
439.062 67.023 li
438.797 67.023 438.668 66.871 438.668 66.633 cv
438.668 60.41 li
438.668 58.82 437.992 58.316 436.836 58.316 cv
436.223 58.316 435.656 58.406 435.309 58.512 cv
435.309 66.633 li
435.309 66.871 435.176 67.023 434.934 67.023 cv
cp
f
444.742 67.004 mo
444.5 67.004 444.348 66.871 444.348 66.609 cv
444.348 56.023 li
444.348 55.785 444.5 55.652 444.742 55.652 cv
447.316 55.652 li
447.559 55.652 447.691 55.785 447.691 56.023 cv
447.691 66.609 li
447.691 66.871 447.559 67.004 447.316 67.004 cv
cp
446.027 54.078 mo
444.957 54.078 444.172 53.273 444.172 52.246 cv
444.172 51.176 444.957 50.414 446.027 50.414 cv
447.121 50.414 447.863 51.176 447.863 52.246 cv
447.863 53.273 447.121 54.078 446.027 54.078 cv
f
453.168 67.004 mo
452.973 67.004 452.82 66.895 452.754 66.699 cv
449.086 56.09 li
448.977 55.828 449.109 55.652 449.391 55.652 cv
452.141 55.652 li
452.363 55.652 452.516 55.762 452.559 55.961 cv
453.891 60.738 li
454.129 61.48 454.438 62.637 454.676 63.598 cv
454.738 63.598 li
454.984 62.637 455.309 61.48 455.527 60.738 cv
456.883 55.961 li
456.945 55.762 457.098 55.652 457.32 55.652 cv
460.066 55.652 li
460.352 55.652 460.461 55.828 460.371 56.09 cv
456.66 66.699 li
456.574 66.895 456.441 67.004 456.227 67.004 cv
cp
f
466.227 58.121 mo
465.219 58.121 464.543 58.645 464.543 59.844 cv
464.543 60.305 li
467.906 60.305 li
467.906 59.844 li
467.906 58.664 467.207 58.121 466.227 58.121 cv
471.113 62.094 mo
471.113 62.332 470.984 62.461 470.723 62.461 cv
464.543 62.461 li
464.543 62.812 li
464.543 63.926 465.266 64.496 466.422 64.496 cv
467.516 64.496 468.41 64.168 469.191 63.707 cv
469.391 63.555 469.566 63.598 469.695 63.797 cv
470.832 65.301 li
470.965 65.496 470.965 65.695 470.766 65.848 cv
469.652 66.699 468.234 67.285 466.312 67.285 cv
463.477 67.285 461.184 65.781 461.184 62.746 cv
461.184 59.996 li
461.184 56.746 463.477 55.348 466.25 55.348 cv
468.93 55.348 471.113 56.699 471.113 59.996 cv
cp
f
473.453 67.004 mo
473.191 67.004 473.062 66.871 473.062 66.609 cv
473.062 56.699 li
473.062 56.508 473.148 56.352 473.344 56.242 cv
474.543 55.652 475.941 55.348 477.363 55.348 cv
478.016 55.348 478.691 55.434 479.48 55.562 cv
479.719 55.609 479.828 55.738 479.828 55.98 cv
479.828 57.988 li
479.828 58.25 479.676 58.383 479.414 58.336 cv
478.977 58.273 478.496 58.25 478.062 58.25 cv
477.406 58.25 476.816 58.359 476.402 58.535 cv
476.402 66.609 li
476.402 66.871 476.27 67.004 476.031 67.004 cv
cp
f
485.355 67.285 mo
483.824 67.285 482.188 66.832 480.812 65.871 cv
480.594 65.715 480.574 65.543 480.707 65.324 cv
481.727 63.574 li
481.883 63.336 482.035 63.293 482.25 63.445 cv
483.211 64.102 484.285 64.43 485.375 64.43 cv
486.293 64.43 486.926 64.121 486.926 63.555 cv
486.926 62.988 486.227 62.793 485.355 62.637 cv
482.973 62.246 481.031 61.242 481.031 58.949 cv
481.031 56.547 482.91 55.348 485.77 55.348 cv
487.078 55.348 488.301 55.652 489.633 56.352 cv
489.848 56.461 489.895 56.656 489.762 56.875 cv
488.758 58.578 li
488.625 58.797 488.453 58.84 488.234 58.73 cv
487.492 58.336 486.574 58.098 485.699 58.098 cv
484.762 58.098 484.305 58.359 484.305 58.906 cv
484.305 59.52 484.809 59.691 486.207 59.91 cv
488.473 60.305 490.285 61.242 490.285 63.465 cv
490.285 66.023 488.473 67.285 485.355 67.285 cv
f
492.496 67.004 mo
492.254 67.004 492.102 66.871 492.102 66.609 cv
492.102 56.023 li
492.102 55.785 492.254 55.652 492.496 55.652 cv
495.07 55.652 li
495.312 55.652 495.441 55.785 495.441 56.023 cv
495.441 66.609 li
495.441 66.871 495.312 67.004 495.07 67.004 cv
cp
493.781 54.078 mo
492.711 54.078 491.926 53.273 491.926 52.246 cv
491.926 51.176 492.711 50.414 493.781 50.414 cv
494.875 50.414 495.613 51.176 495.613 52.246 cv
495.613 53.273 494.875 54.078 493.781 54.078 cv
f
502.754 64.344 mo
503.301 64.344 503.848 64.25 504.262 64.102 cv
504.262 58.621 li
503.848 58.402 503.32 58.25 502.734 58.25 cv
501.555 58.25 500.922 58.863 500.922 60.129 cv
500.922 62.398 li
500.922 63.773 501.578 64.344 502.754 64.344 cv
504.262 51.789 mo
504.262 51.527 504.395 51.398 504.633 51.398 cv
507.207 51.398 li
507.469 51.398 507.602 51.527 507.602 51.789 cv
507.602 66.043 li
507.602 66.262 507.516 66.414 507.297 66.5 cv
505.961 66.984 504.172 67.285 502.691 67.285 cv
499.633 67.285 497.516 65.457 497.516 62.332 cv
497.516 60.172 li
497.516 57.223 499.438 55.348 502.23 55.348 cv
502.973 55.348 503.715 55.523 504.262 55.719 cv
cp
f
514.418 64.582 mo
514.914 64.582 515.508 64.496 515.898 64.406 cv
515.898 62.484 li
515.461 62.398 514.871 62.355 514.395 62.355 cv
513.195 62.355 512.668 62.746 512.668 63.445 cv
512.668 64.211 513.367 64.582 514.418 64.582 cv
514.457 55.348 mo
517.473 55.348 519.242 56.922 519.242 60.238 cv
519.242 66.219 li
519.242 66.438 519.129 66.59 518.91 66.656 cv
517.625 67.047 515.898 67.285 514.418 67.285 cv
511.273 67.285 509.285 66.109 509.285 63.535 cv
509.285 61.262 511.074 60.129 514.043 60.129 cv
514.723 60.129 515.355 60.195 515.898 60.258 cv
515.898 60.039 li
515.898 58.883 515.484 58.25 514.066 58.25 cv
513.105 58.25 511.969 58.512 511.336 58.863 cv
511.141 58.973 510.922 58.949 510.812 58.73 cv
509.918 57.031 li
509.809 56.809 509.809 56.656 509.961 56.547 cv
510.988 55.895 512.582 55.348 514.457 55.348 cv
f
526.402 64.344 mo
526.949 64.344 527.496 64.25 527.91 64.102 cv
527.91 58.621 li
527.496 58.402 526.969 58.25 526.383 58.25 cv
525.203 58.25 524.57 58.863 524.57 60.129 cv
524.57 62.398 li
524.57 63.773 525.223 64.344 526.402 64.344 cv
527.91 51.789 mo
527.91 51.527 528.043 51.398 528.281 51.398 cv
530.855 51.398 li
531.117 51.398 531.246 51.527 531.246 51.789 cv
531.246 66.043 li
531.246 66.262 531.16 66.414 530.945 66.5 cv
529.609 66.984 527.82 67.285 526.336 67.285 cv
523.281 67.285 521.164 65.457 521.164 62.332 cv
521.164 60.172 li
521.164 57.223 523.086 55.348 525.879 55.348 cv
526.621 55.348 527.363 55.523 527.91 55.719 cv
cp
f
326.527 89.145 mo
322.688 89.145 320.152 87.113 320.152 83.316 cv
320.152 78.754 li
320.152 74.957 322.707 72.949 326.461 72.949 cv
328.207 72.949 329.891 73.469 331.133 74.344 cv
331.352 74.477 331.375 74.652 331.242 74.844 cv
329.867 76.941 li
329.715 77.16 329.539 77.18 329.324 77.051 cv
328.516 76.527 327.488 76.266 326.527 76.266 cv
324.691 76.266 323.711 77.312 323.711 78.887 cv
323.711 83.164 li
323.711 84.844 324.762 85.805 326.551 85.805 cv
327.641 85.805 328.711 85.477 329.582 84.887 cv
329.801 84.734 329.977 84.754 330.109 84.977 cv
331.504 87.074 li
331.637 87.266 331.637 87.441 331.484 87.551 cv
330.215 88.488 328.555 89.145 326.527 89.145 cv
f
337.598 86.414 mo
338.098 86.414 338.688 86.328 339.082 86.242 cv
339.082 84.32 li
338.645 84.23 338.055 84.191 337.574 84.191 cv
336.375 84.191 335.852 84.582 335.852 85.281 cv
335.852 86.043 336.547 86.414 337.598 86.414 cv
337.641 77.18 mo
340.652 77.18 342.422 78.754 342.422 82.07 cv
342.422 88.051 li
342.422 88.273 342.312 88.426 342.094 88.488 cv
340.805 88.883 339.082 89.125 337.598 89.125 cv
334.453 89.125 332.469 87.941 332.469 85.367 cv
332.469 83.098 334.258 81.965 337.227 81.965 cv
337.902 81.965 338.535 82.027 339.082 82.094 cv
339.082 81.875 li
339.082 80.719 338.668 80.082 337.246 80.082 cv
336.289 80.082 335.152 80.344 334.52 80.695 cv
334.32 80.805 334.105 80.781 333.996 80.566 cv
333.098 78.863 li
332.992 78.645 332.992 78.492 333.145 78.383 cv
334.172 77.727 335.766 77.18 337.641 77.18 cv
f
349.434 86.129 mo
349.629 86.129 349.891 86.113 350.133 86.09 cv
350.414 86.043 350.547 86.152 350.547 86.414 cv
350.547 88.555 li
350.547 88.773 350.457 88.949 350.242 88.992 cv
349.867 89.059 349.387 89.102 348.867 89.102 cv
346.332 89.102 344.629 87.727 344.629 84.93 cv
344.629 75.129 li
344.629 74.891 344.762 74.758 345.023 74.758 cv
347.293 74.758 li
347.531 74.758 347.664 74.867 347.684 75.109 cv
347.945 77.727 li
349.91 77.727 li
350.148 77.727 350.305 77.859 350.305 78.102 cv
350.305 80.195 li
350.305 80.434 350.148 80.566 349.91 80.566 cv
347.969 80.566 li
347.969 84.516 li
347.969 85.586 348.473 86.133 349.434 86.133 cv
f
357.031 86.176 mo
358.188 86.176 358.82 85.586 358.82 84.496 cv
358.82 81.875 li
358.82 80.785 358.188 80.152 357.031 80.152 cv
355.875 80.152 355.238 80.785 355.238 81.875 cv
355.238 84.496 li
355.238 85.586 355.875 86.176 357.031 86.176 cv
355.461 76.066 mo
355.152 76.066 355.043 75.852 355.219 75.609 cv
357.012 72.773 li
357.121 72.602 357.273 72.508 357.465 72.508 cv
359.934 72.508 li
360.238 72.508 360.348 72.73 360.133 72.992 cv
357.816 75.852 li
357.707 76.004 357.531 76.066 357.355 76.066 cv
cp
357.031 89.125 mo
353.824 89.125 351.836 87.375 351.836 84.496 cv
351.836 81.875 li
351.836 78.949 353.824 77.18 357.031 77.18 cv
360.219 77.18 362.203 78.949 362.203 81.875 cv
362.203 84.496 li
362.203 87.375 360.219 89.125 357.031 89.125 cv
f
368.254 89.125 mo
365.68 89.125 364.215 87.551 364.215 84.887 cv
364.215 73.625 li
364.215 73.363 364.344 73.23 364.605 73.23 cv
367.184 73.23 li
367.426 73.23 367.555 73.363 367.555 73.625 cv
367.555 84.473 li
367.555 85.566 367.992 86.066 368.844 86.066 cv
369.062 86.066 369.301 86.066 369.523 86.043 cv
369.781 86.023 369.938 86.152 369.938 86.414 cv
369.938 88.598 li
369.938 88.797 369.848 88.973 369.691 88.988 cv
369.324 89.055 368.844 89.121 368.254 89.121 cv
f
371.727 88.84 mo
371.484 88.84 371.332 88.711 371.332 88.445 cv
371.332 77.855 li
371.332 77.617 371.484 77.488 371.727 77.488 cv
374.301 77.488 li
374.543 77.488 374.672 77.617 374.672 77.855 cv
374.672 88.445 li
374.672 88.711 374.543 88.84 374.301 88.84 cv
cp
373.012 75.918 mo
371.945 75.918 371.16 75.105 371.16 74.082 cv
371.16 73.016 371.945 72.25 373.012 72.25 cv
374.105 72.25 374.848 73.016 374.848 74.082 cv
374.848 75.105 374.105 75.918 373.012 75.918 cv
f
381.941 89.125 mo
378.645 89.125 376.77 87.289 376.77 84.363 cv
376.77 81.898 li
376.77 79.016 378.668 77.18 381.922 77.18 cv
383.188 77.18 384.391 77.531 385.504 78.207 cv
385.699 78.34 385.742 78.535 385.613 78.754 cv
384.453 80.5 li
384.324 80.719 384.148 80.742 383.906 80.633 cv
383.34 80.324 382.707 80.129 382.074 80.129 cv
380.875 80.129 380.152 80.785 380.152 81.898 cv
380.152 84.363 li
380.152 85.586 380.918 86.176 382.055 86.176 cv
382.793 86.176 383.492 85.957 384.148 85.543 cv
384.367 85.414 384.562 85.453 384.691 85.652 cv
385.871 87.398 li
386.004 87.594 385.98 87.789 385.805 87.922 cv
384.691 88.711 383.449 89.125 381.941 89.125 cv
f
391.836 86.414 mo
392.336 86.414 392.926 86.328 393.32 86.242 cv
393.32 84.32 li
392.883 84.23 392.293 84.191 391.812 84.191 cv
390.609 84.191 390.09 84.582 390.09 85.281 cv
390.09 86.043 390.785 86.414 391.836 86.414 cv
391.875 77.18 mo
394.891 77.18 396.66 78.754 396.66 82.07 cv
396.66 88.051 li
396.66 88.273 396.551 88.426 396.332 88.488 cv
395.043 88.883 393.32 89.125 391.836 89.125 cv
388.691 89.125 386.707 87.941 386.707 85.367 cv
386.707 83.098 388.496 81.965 391.461 81.965 cv
392.137 81.965 392.773 82.027 393.32 82.094 cv
393.32 81.875 li
393.32 80.719 392.906 80.082 391.484 80.082 cv
390.523 80.082 389.391 80.344 388.758 80.695 cv
388.559 80.805 388.344 80.781 388.234 80.566 cv
387.336 78.863 li
387.23 78.645 387.23 78.492 387.383 78.383 cv
388.406 77.727 390 77.18 391.875 77.18 cv
f
408.32 86.176 mo
408.867 86.176 409.41 86.09 409.824 85.938 cv
409.824 80.457 li
409.41 80.238 408.887 80.086 408.297 80.086 cv
407.117 80.086 406.484 80.699 406.484 81.965 cv
406.484 84.23 li
406.484 85.609 407.141 86.176 408.32 86.176 cv
409.824 73.625 mo
409.824 73.363 409.957 73.23 410.195 73.23 cv
412.77 73.23 li
413.035 73.23 413.168 73.363 413.168 73.625 cv
413.168 87.879 li
413.168 88.098 413.078 88.25 412.859 88.336 cv
411.527 88.816 409.738 89.125 408.254 89.125 cv
405.195 89.125 403.082 87.289 403.082 84.168 cv
403.082 82.004 li
403.082 79.059 405.004 77.18 407.797 77.18 cv
408.539 77.18 409.281 77.355 409.824 77.555 cv
cp
f
420.285 79.953 mo
419.281 79.953 418.605 80.477 418.605 81.68 cv
418.605 82.137 li
421.969 82.137 li
421.969 81.68 li
421.969 80.5 421.27 79.953 420.285 79.953 cv
425.172 83.926 mo
425.172 84.168 425.043 84.301 424.781 84.301 cv
418.605 84.301 li
418.605 84.645 li
418.605 85.758 419.328 86.328 420.48 86.328 cv
421.57 86.328 422.469 86 423.254 85.543 cv
423.449 85.391 423.625 85.434 423.758 85.629 cv
424.891 87.137 li
425.02 87.332 425.02 87.527 424.828 87.68 cv
423.711 88.531 422.293 89.125 420.371 89.125 cv
417.535 89.125 415.242 87.617 415.242 84.582 cv
415.242 81.832 li
415.242 78.578 417.535 77.18 420.309 77.18 cv
422.992 77.18 425.172 78.535 425.172 81.832 cv
cp
f
431.117 89.125 mo
428.543 89.125 427.074 87.551 427.074 84.887 cv
427.074 73.625 li
427.074 73.363 427.207 73.23 427.469 73.23 cv
430.047 73.23 li
430.285 73.23 430.418 73.363 430.418 73.625 cv
430.418 84.473 li
430.418 85.566 430.855 86.066 431.707 86.066 cv
431.922 86.066 432.164 86.066 432.383 86.043 cv
432.645 86.023 432.797 86.152 432.797 86.414 cv
432.797 88.598 li
432.797 88.797 432.707 88.973 432.559 88.988 cv
432.184 89.055 431.707 89.121 431.117 89.121 cv
f
442.207 85.676 mo
448.691 85.676 li
448.934 85.676 449.086 85.805 449.086 86.043 cv
449.086 88.445 li
449.086 88.707 448.934 88.84 448.691 88.84 cv
439.086 88.84 li
438.824 88.84 438.695 88.707 438.695 88.445 cv
438.695 73.625 li
438.695 73.359 438.824 73.23 439.086 73.23 cv
448.344 73.23 li
448.605 73.23 448.734 73.359 448.734 73.625 cv
448.734 76.023 li
448.734 76.266 448.605 76.395 448.344 76.395 cv
442.207 76.395 li
442.207 79.387 li
447.621 79.387 li
447.883 79.387 448.012 79.516 448.012 79.758 cv
448.012 82.117 li
448.012 82.355 447.883 82.484 447.621 82.484 cv
442.207 82.484 li
cp
f
455.832 89.125 mo
452.535 89.125 450.66 87.289 450.66 84.363 cv
450.66 81.898 li
450.66 79.016 452.559 77.18 455.812 77.18 cv
457.074 77.18 458.277 77.531 459.395 78.207 cv
459.586 78.34 459.629 78.535 459.5 78.754 cv
458.34 80.5 li
458.211 80.719 458.035 80.742 457.797 80.633 cv
457.23 80.324 456.598 80.129 455.965 80.129 cv
454.762 80.129 454.043 80.785 454.043 81.898 cv
454.043 84.363 li
454.043 85.586 454.809 86.176 455.941 86.176 cv
456.684 86.176 457.383 85.957 458.035 85.543 cv
458.254 85.414 458.449 85.453 458.582 85.652 cv
459.762 87.398 li
459.891 87.594 459.871 87.789 459.695 87.922 cv
458.582 88.711 457.34 89.125 455.832 89.125 cv
f
470.742 77.488 mo
471.004 77.488 471.137 77.617 471.137 77.855 cv
471.137 87.789 li
471.137 88.008 471.047 88.164 470.852 88.25 cv
469.543 88.793 467.887 89.125 466.355 89.125 cv
463.059 89.125 461.203 87.355 461.203 84.059 cv
461.203 77.855 li
461.203 77.617 461.336 77.488 461.598 77.488 cv
464.176 77.488 li
464.438 77.488 464.566 77.617 464.566 77.855 cv
464.566 84.078 li
464.566 85.676 465.219 86.176 466.355 86.176 cv
466.926 86.176 467.473 86.09 467.797 85.957 cv
467.797 77.855 li
467.797 77.617 467.93 77.488 468.168 77.488 cv
cp
f
477.93 86.414 mo
478.43 86.414 479.02 86.328 479.414 86.242 cv
479.414 84.32 li
478.977 84.23 478.387 84.191 477.906 84.191 cv
476.707 84.191 476.184 84.582 476.184 85.281 cv
476.184 86.043 476.883 86.414 477.93 86.414 cv
477.973 77.18 mo
480.984 77.18 482.754 78.754 482.754 82.07 cv
482.754 88.051 li
482.754 88.273 482.645 88.426 482.426 88.488 cv
481.141 88.883 479.414 89.125 477.93 89.125 cv
474.789 89.125 472.801 87.941 472.801 85.367 cv
472.801 83.098 474.59 81.965 477.559 81.965 cv
478.234 81.965 478.867 82.027 479.414 82.094 cv
479.414 81.875 li
479.414 80.719 479 80.082 477.578 80.082 cv
476.617 80.082 475.488 80.344 474.852 80.695 cv
474.656 80.805 474.438 80.781 474.328 80.566 cv
473.434 78.863 li
473.324 78.645 473.324 78.492 473.477 78.383 cv
474.504 77.727 476.094 77.18 477.973 77.18 cv
f
489.918 86.176 mo
490.461 86.176 491.008 86.09 491.422 85.938 cv
491.422 80.457 li
491.008 80.238 490.484 80.086 489.895 80.086 cv
488.715 80.086 488.082 80.699 488.082 81.965 cv
488.082 84.23 li
488.082 85.609 488.734 86.176 489.918 86.176 cv
491.422 73.625 mo
491.422 73.363 491.555 73.23 491.793 73.23 cv
494.367 73.23 li
494.633 73.23 494.766 73.363 494.766 73.625 cv
494.766 87.879 li
494.766 88.098 494.676 88.25 494.457 88.336 cv
493.125 88.816 491.336 89.125 489.848 89.125 cv
486.793 89.125 484.676 87.289 484.676 84.168 cv
484.676 82.004 li
484.676 79.059 486.598 77.18 489.395 77.18 cv
490.133 77.18 490.875 77.355 491.422 77.555 cv
cp
f
502.035 86.176 mo
503.191 86.176 503.828 85.586 503.828 84.496 cv
503.828 81.875 li
503.828 80.785 503.191 80.152 502.035 80.152 cv
500.879 80.152 500.246 80.785 500.246 81.875 cv
500.246 84.496 li
500.246 85.586 500.879 86.176 502.035 86.176 cv
502.035 89.125 mo
498.824 89.125 496.84 87.375 496.84 84.496 cv
496.84 81.875 li
496.84 78.949 498.824 77.18 502.035 77.18 cv
505.223 77.18 507.207 78.949 507.207 81.875 cv
507.207 84.496 li
507.207 87.375 505.223 89.125 502.035 89.125 cv
f
509.656 88.84 mo
509.395 88.84 509.262 88.711 509.262 88.445 cv
509.262 78.535 li
509.262 78.34 509.352 78.188 509.547 78.078 cv
510.746 77.488 512.145 77.18 513.562 77.18 cv
514.219 77.18 514.895 77.27 515.684 77.402 cv
515.922 77.441 516.031 77.574 516.031 77.816 cv
516.031 79.824 li
516.031 80.086 515.875 80.215 515.617 80.172 cv
515.18 80.105 514.699 80.086 514.266 80.086 cv
513.609 80.086 513.02 80.195 512.602 80.367 cv
512.602 88.445 li
512.602 88.711 512.473 88.84 512.234 88.84 cv
cp
f
273.609 39.535 mo
268.379 40.035 263.523 41.836 259.383 44.621 cv
258.828 44.992 258.285 45.387 257.758 45.797 cv
259.754 47.793 li
260.293 47.391 260.844 47.008 261.41 46.645 cv
263.883 45.047 266.629 43.828 269.559 43.074 cv
269.559 60.398 li
270.961 61.801 li
270.961 42.758 li
271.879 42.57 272.812 42.43 273.762 42.336 cv
273.762 64.598 li
276.562 67.398 li
279.363 64.598 li
279.363 42.336 li
280.312 42.43 281.246 42.57 282.164 42.758 cv
282.164 61.797 li
283.566 60.398 li
283.566 43.074 li
286.492 43.828 289.242 45.047 291.715 46.645 cv
292.281 47.008 292.832 47.391 293.371 47.793 cv
295.367 45.797 li
294.84 45.387 294.293 44.992 293.738 44.621 cv
289.602 41.836 284.746 40.035 279.516 39.535 cv
276.562 31.617 li
cp
f
279.516 100.867 mo
284.746 100.367 289.602 98.566 293.742 95.777 cv
294.293 95.406 294.84 95.016 295.367 94.605 cv
293.371 92.609 li
292.832 93.008 292.281 93.395 291.715 93.758 cv
289.242 95.355 286.492 96.57 283.566 97.324 cv
283.566 80.004 li
282.164 78.605 li
282.164 97.645 li
281.246 97.832 280.312 97.973 279.363 98.066 cv
279.363 75.805 li
276.562 73 li
273.762 75.805 li
273.762 98.066 li
272.812 97.973 271.879 97.832 270.961 97.645 cv
270.961 78.605 li
269.559 80.004 li
269.559 97.324 li
266.629 96.57 263.883 95.355 261.41 93.758 cv
260.844 93.395 260.293 93.008 259.758 92.609 cv
257.758 94.609 li
258.289 95.016 258.828 95.406 259.387 95.777 cv
263.523 98.566 268.379 100.367 273.609 100.867 cv
276.562 108.781 li
cp
f
245.898 73.152 mo
246.395 78.387 248.199 83.238 250.984 87.379 cv
251.355 87.934 251.746 88.477 252.156 89.004 cv
254.156 87.008 li
253.754 86.469 253.367 85.922 253.008 85.359 cv
251.406 82.879 250.191 80.133 249.438 77.203 cv
266.766 77.203 li
268.164 75.805 li
249.121 75.805 li
248.934 74.883 248.789 73.949 248.695 73 cv
270.961 73 li
273.762 70.203 li
270.961 67.398 li
248.695 67.398 li
248.789 66.453 248.934 65.516 249.121 64.598 cv
268.164 64.598 li
266.766 63.199 li
249.438 63.199 li
250.191 60.27 251.406 57.523 253.008 55.047 cv
253.367 54.48 253.75 53.93 254.156 53.398 cv
252.156 51.398 li
251.746 51.926 251.355 52.469 250.984 53.023 cv
248.199 57.164 246.395 62.016 245.898 67.246 cv
237.98 70.203 li
cp
f
307.227 73.152 mo
306.73 78.387 304.926 83.238 302.141 87.379 cv
301.77 87.934 301.379 88.477 300.965 89.004 cv
298.969 87.008 li
299.371 86.469 299.758 85.922 300.121 85.359 cv
301.719 82.879 302.934 80.133 303.688 77.203 cv
286.359 77.203 li
284.961 75.805 li
304.004 75.805 li
304.191 74.883 304.336 73.949 304.43 73 cv
282.164 73 li
279.363 70.203 li
282.164 67.398 li
304.43 67.398 li
304.336 66.453 304.191 65.516 304.004 64.598 cv
284.961 64.598 li
286.359 63.199 li
303.688 63.199 li
302.934 60.27 301.719 57.523 300.121 55.047 cv
299.758 54.48 299.375 53.93 298.969 53.398 cv
300.969 51.398 li
301.379 51.926 301.77 52.469 302.141 53.023 cv
304.926 57.164 306.73 62.016 307.227 67.246 cv
315.145 70.203 li
cp
f
0 420.219 mo
791.973 420.219 li
791.973 445.559 li
0 445.559 li
cp
1 .845701 .197116 .0635996 cmyk
f
778.84 81.332 mo
755.715 83.543 734.285 91.492 716.004 103.809 cv
713.543 105.449 711.141 107.184 708.816 108.992 cv
717.625 117.82 li
720.008 116.027 722.43 114.352 724.926 112.73 cv
735.867 105.676 747.992 100.32 760.938 96.965 cv
760.938 173.508 li
767.133 179.684 li
767.133 95.574 li
771.195 94.734 775.312 94.105 779.508 93.703 cv
779.508 192.055 li
791.879 204.43 li
804.25 192.055 li
804.25 93.703 li
808.445 94.105 812.562 94.734 816.625 95.574 cv
816.625 179.684 li
822.82 173.488 li
822.82 96.965 li
835.766 100.301 847.891 105.676 858.832 112.73 cv
861.312 114.352 863.75 116.027 866.113 117.82 cv
874.941 108.977 li
872.617 107.184 870.215 105.449 867.754 103.809 cv
849.473 91.492 828.043 83.543 804.918 81.332 cv
791.879 46.348 li
cp
f
804.918 352.273 mo
828.043 350.059 849.473 342.109 867.754 329.797 cv
870.215 328.156 872.617 326.422 874.941 324.609 cv
866.113 315.781 li
863.75 317.574 861.328 319.254 858.832 320.875 cv
847.891 327.926 835.746 333.285 822.82 336.621 cv
822.82 260.098 li
816.625 253.918 li
816.625 338.031 li
812.562 338.852 808.445 339.48 804.25 339.898 cv
804.25 241.547 li
791.879 229.176 li
779.508 241.547 li
779.508 339.898 li
775.312 339.48 771.195 338.852 767.133 338.031 cv
767.133 253.918 li
760.938 260.098 li
760.938 336.621 li
747.992 333.285 735.867 327.926 724.926 320.875 cv
722.43 319.254 720.008 317.574 717.645 315.781 cv
708.816 324.609 li
711.16 326.422 713.543 328.156 716.004 329.797 cv
734.285 342.109 755.715 350.059 778.84 352.273 cv
791.879 387.234 li
cp
f
656.41 229.84 mo
658.621 252.965 666.57 274.395 678.887 292.676 cv
680.523 295.137 682.262 297.52 684.07 299.863 cv
692.898 291.039 li
691.105 288.672 689.41 286.254 687.809 283.754 cv
680.754 272.812 675.379 260.668 672.043 247.723 cv
748.602 247.738 li
754.781 241.543 li
670.648 241.543 li
669.812 237.48 669.184 233.363 668.781 229.168 cv
767.133 229.168 li
779.508 216.797 li
767.133 204.426 li
668.781 204.426 li
669.18 200.23 669.812 196.113 670.648 192.051 cv
754.781 192.051 li
748.602 185.855 li
672.043 185.855 li
675.379 172.91 680.754 160.785 687.809 149.844 cv
689.41 147.348 691.105 144.926 692.879 142.543 cv
684.051 133.734 li
682.262 136.059 680.523 138.461 678.867 140.902 cv
666.57 159.184 658.621 180.633 656.41 203.738 cv
621.426 216.797 li
cp
f
149.355 438.664 mo
149.125 438.727 148.895 438.766 148.668 438.789 cv
148.449 438.809 148.223 438.82 147.996 438.82 cv
147.34 438.82 146.812 438.637 146.418 438.273 cv
146.02 437.918 145.809 437.406 145.777 436.742 cv
145.684 436.75 145.594 436.758 145.512 436.758 cv
145.426 436.766 145.344 436.773 145.262 436.773 cv
144.668 436.773 144.125 436.68 143.637 436.492 cv
143.156 436.297 142.746 436.008 142.402 435.633 cv
142.066 435.258 141.809 434.801 141.621 434.258 cv
141.441 433.707 141.355 433.082 141.355 432.383 cv
141.355 431.707 141.441 431.098 141.621 430.555 cv
141.797 430.004 142.062 429.531 142.418 429.133 cv
142.75 428.77 143.16 428.488 143.652 428.289 cv
144.141 428.094 144.676 427.992 145.262 427.992 cv
145.863 427.992 146.406 428.094 146.887 428.289 cv
147.363 428.488 147.777 428.77 148.121 429.133 cv
148.465 429.52 148.723 429.988 148.902 430.539 cv
149.09 431.082 149.184 431.695 149.184 432.383 cv
149.184 433.414 148.969 434.285 148.543 434.992 cv
148.125 435.703 147.562 436.195 146.855 436.477 cv
146.863 436.902 146.965 437.234 147.152 437.477 cv
147.348 437.715 147.691 437.836 148.184 437.836 cv
148.34 437.836 148.52 437.809 148.73 437.758 cv
148.949 437.715 149.105 437.672 149.199 437.633 cv
149.355 437.633 li
cp
148.012 432.383 mo
148.012 431.289 147.766 430.445 147.277 429.852 cv
146.785 429.258 146.113 428.961 145.262 428.961 cv
144.406 428.961 143.734 429.258 143.246 429.852 cv
142.754 430.445 142.512 431.289 142.512 432.383 cv
142.512 433.5 142.762 434.348 143.262 434.93 cv
143.762 435.516 144.426 435.805 145.262 435.805 cv
146.105 435.805 146.77 435.516 147.262 434.93 cv
147.762 434.348 148.012 433.5 148.012 432.383 cv
cp
0 0 0 0 cmyk
f
157.316 433.211 mo
157.316 433.828 157.246 434.363 157.113 434.82 cv
156.977 435.27 156.758 435.645 156.457 435.945 cv
156.164 436.238 155.82 436.453 155.426 436.586 cv
155.039 436.711 154.586 436.773 154.066 436.773 cv
153.543 436.773 153.086 436.703 152.691 436.57 cv
152.293 436.426 151.965 436.219 151.707 435.945 cv
151.395 435.645 151.168 435.273 151.035 434.836 cv
150.898 434.398 150.832 433.859 150.832 433.211 cv
150.832 428.18 li
151.957 428.18 li
151.957 433.273 li
151.957 433.734 151.988 434.098 152.051 434.367 cv
152.113 434.629 152.215 434.863 152.363 435.07 cv
152.527 435.32 152.754 435.508 153.035 435.633 cv
153.324 435.758 153.668 435.82 154.066 435.82 cv
154.473 435.82 154.816 435.758 155.098 435.633 cv
155.379 435.508 155.605 435.32 155.785 435.07 cv
155.93 434.863 156.035 434.617 156.098 434.336 cv
156.16 434.055 156.191 433.711 156.191 433.305 cv
156.191 428.18 li
157.316 428.18 li
cp
f
162.43 436.602 mo
159.102 436.602 li
159.102 435.742 li
160.195 435.742 li
160.195 429.039 li
159.102 429.039 li
159.102 428.18 li
162.43 428.18 li
162.43 429.039 li
161.32 429.039 li
161.32 435.742 li
162.43 435.742 li
cp
f
170.344 429.164 mo
167.328 429.164 li
167.328 436.602 li
166.219 436.602 li
166.219 429.164 li
163.203 429.164 li
163.203 428.18 li
170.344 428.18 li
cp
f
177.492 429.133 mo
177.836 429.52 178.094 429.988 178.273 430.539 cv
178.461 431.082 178.555 431.695 178.555 432.383 cv
178.555 433.082 178.461 433.707 178.273 434.258 cv
178.086 434.812 177.824 435.27 177.492 435.633 cv
177.137 436.008 176.719 436.297 176.242 436.492 cv
175.773 436.68 175.234 436.773 174.633 436.773 cv
174.039 436.773 173.496 436.68 173.008 436.492 cv
172.527 436.297 172.117 436.008 171.773 435.633 cv
171.438 435.258 171.18 434.801 170.992 434.258 cv
170.812 433.707 170.727 433.082 170.727 432.383 cv
170.727 431.707 170.812 431.098 170.992 430.555 cv
171.168 430.004 171.434 429.531 171.789 429.133 cv
172.121 428.77 172.531 428.488 173.023 428.289 cv
173.512 428.094 174.047 427.992 174.633 427.992 cv
175.234 427.992 175.777 428.094 176.258 428.289 cv
176.734 428.488 177.148 428.77 177.492 429.133 cv
cp
177.383 432.383 mo
177.383 431.289 177.137 430.445 176.648 429.852 cv
176.156 429.258 175.484 428.961 174.633 428.961 cv
173.777 428.961 173.105 429.258 172.617 429.852 cv
172.125 430.445 171.883 431.289 171.883 432.383 cv
171.883 433.5 172.133 434.348 172.633 434.93 cv
173.133 435.516 173.797 435.805 174.633 435.805 cv
175.477 435.805 176.141 435.516 176.633 434.93 cv
177.133 434.348 177.383 433.5 177.383 432.383 cv
cp
f
184.137 432.398 mo
187.684 432.398 li
187.684 433.429 li
184.137 433.429 li
cp
f
200.406 436.602 mo
199.203 436.602 li
198.375 434.258 li
194.734 434.258 li
193.906 436.602 li
192.766 436.602 li
195.844 428.18 li
197.328 428.18 li
cp
198.031 433.289 mo
196.562 429.148 li
195.078 433.289 li
cp
f
209.195 436.602 mo
208.07 436.602 li
208.07 429.336 li
205.727 434.273 li
205.055 434.273 li
202.727 429.336 li
202.727 436.602 li
201.68 436.602 li
201.68 428.18 li
203.211 428.18 li
205.461 432.867 li
207.633 428.18 li
209.195 428.18 li
cp
f
218.109 436.602 mo
216.906 436.602 li
216.078 434.258 li
212.438 434.258 li
211.609 436.602 li
210.469 436.602 li
213.547 428.18 li
215.031 428.18 li
cp
215.734 433.289 mo
214.266 429.148 li
212.781 433.289 li
cp
f
225.555 436.602 mo
218.977 436.602 li
218.977 435.555 li
224.133 429.164 li
219.164 429.164 li
219.164 428.18 li
225.43 428.18 li
225.43 429.18 li
220.211 435.602 li
225.555 435.602 li
cp
f
233.516 429.133 mo
233.859 429.52 234.117 429.988 234.297 430.539 cv
234.484 431.082 234.578 431.695 234.578 432.383 cv
234.578 433.082 234.484 433.707 234.297 434.258 cv
234.109 434.812 233.848 435.27 233.516 435.633 cv
233.16 436.008 232.742 436.297 232.266 436.492 cv
231.797 436.68 231.258 436.773 230.656 436.773 cv
230.062 436.773 229.52 436.68 229.031 436.492 cv
228.551 436.297 228.141 436.008 227.797 435.633 cv
227.461 435.258 227.203 434.801 227.016 434.258 cv
226.836 433.707 226.75 433.082 226.75 432.383 cv
226.75 431.707 226.836 431.098 227.016 430.555 cv
227.191 430.004 227.457 429.531 227.812 429.133 cv
228.145 428.77 228.555 428.488 229.047 428.289 cv
229.535 428.094 230.07 427.992 230.656 427.992 cv
231.258 427.992 231.801 428.094 232.281 428.289 cv
232.758 428.488 233.172 428.77 233.516 429.133 cv
cp
233.406 432.383 mo
233.406 431.289 233.16 430.445 232.672 429.852 cv
232.18 429.258 231.508 428.961 230.656 428.961 cv
229.801 428.961 229.129 429.258 228.641 429.852 cv
228.148 430.445 227.906 431.289 227.906 432.383 cv
227.906 433.5 228.156 434.348 228.656 434.93 cv
229.156 435.516 229.82 435.805 230.656 435.805 cv
231.5 435.805 232.164 435.516 232.656 434.93 cv
233.156 434.348 233.406 433.5 233.406 432.383 cv
cp
f
242.785 436.602 mo
241.395 436.602 li
237.395 429.055 li
237.395 436.602 li
236.348 436.602 li
236.348 428.18 li
238.098 428.18 li
241.738 435.055 li
241.738 428.18 li
242.785 428.18 li
cp
f
251.68 436.602 mo
250.477 436.602 li
249.648 434.258 li
246.008 434.258 li
245.18 436.602 li
244.039 436.602 li
247.117 428.18 li
248.602 428.18 li
cp
249.305 433.289 mo
247.836 429.148 li
246.352 433.289 li
cp
f
259.023 434.195 mo
259.023 434.531 258.945 434.859 258.789 435.18 cv
258.641 435.492 258.434 435.766 258.164 435.992 cv
257.859 436.234 257.508 436.422 257.102 436.555 cv
256.703 436.688 256.219 436.758 255.648 436.758 cv
255.043 436.758 254.496 436.699 254.008 436.586 cv
253.527 436.473 253.039 436.305 252.539 436.086 cv
252.539 434.68 li
252.617 434.68 li
253.043 435.035 253.531 435.312 254.086 435.508 cv
254.648 435.695 255.172 435.789 255.664 435.789 cv
256.359 435.789 256.902 435.66 257.289 435.398 cv
257.672 435.141 257.867 434.789 257.867 434.352 cv
257.867 433.977 257.773 433.703 257.586 433.523 cv
257.406 433.348 257.133 433.211 256.758 433.117 cv
256.477 433.047 256.168 432.984 255.836 432.93 cv
255.5 432.879 255.152 432.816 254.789 432.742 cv
254.039 432.586 253.48 432.316 253.117 431.93 cv
252.762 431.547 252.586 431.047 252.586 430.43 cv
252.586 429.723 252.883 429.145 253.477 428.695 cv
254.07 428.25 254.824 428.023 255.742 428.023 cv
256.336 428.023 256.875 428.082 257.367 428.195 cv
257.867 428.301 258.309 428.438 258.695 428.602 cv
258.695 429.93 li
258.617 429.93 li
258.293 429.66 257.871 429.438 257.352 429.258 cv
256.828 429.082 256.293 428.992 255.742 428.992 cv
255.137 428.992 254.652 429.117 254.289 429.367 cv
253.922 429.617 253.742 429.938 253.742 430.32 cv
253.742 430.676 253.828 430.953 254.008 431.148 cv
254.195 431.348 254.516 431.5 254.977 431.602 cv
255.215 431.664 255.559 431.734 256.008 431.805 cv
256.453 431.879 256.828 431.957 257.133 432.039 cv
257.766 432.207 258.242 432.457 258.555 432.789 cv
258.867 433.125 259.023 433.594 259.023 434.195 cv
cp
f
264.641 432.398 mo
268.188 432.398 li
268.188 433.429 li
264.641 433.429 li
cp
f
280.906 436.602 mo
279.703 436.602 li
278.875 434.258 li
275.234 434.258 li
274.406 436.602 li
273.266 436.602 li
276.344 428.18 li
277.828 428.18 li
cp
278.531 433.289 mo
277.062 429.148 li
275.578 433.289 li
cp
f
289.695 436.602 mo
288.57 436.602 li
288.57 429.336 li
286.227 434.273 li
285.555 434.273 li
283.227 429.336 li
283.227 436.602 li
282.18 436.602 li
282.18 428.18 li
283.711 428.18 li
285.961 432.867 li
288.133 428.18 li
289.695 428.18 li
cp
f
298.316 434.008 mo
298.316 434.426 298.238 434.797 298.082 435.117 cv
297.926 435.441 297.711 435.707 297.441 435.914 cv
297.129 436.164 296.777 436.344 296.395 436.445 cv
296.02 436.551 295.539 436.602 294.957 436.602 cv
291.957 436.602 li
291.957 428.18 li
294.457 428.18 li
295.07 428.18 295.527 428.203 295.832 428.242 cv
296.145 428.285 296.441 428.379 296.723 428.523 cv
297.035 428.691 297.258 428.898 297.395 429.148 cv
297.527 429.398 297.598 429.707 297.598 430.07 cv
297.598 430.469 297.492 430.805 297.285 431.086 cv
297.086 431.367 296.82 431.594 296.488 431.758 cv
296.488 431.805 li
297.051 431.922 297.492 432.172 297.816 432.555 cv
298.148 432.941 298.316 433.426 298.316 434.008 cv
cp
296.441 430.211 mo
296.441 430.004 296.402 429.832 296.332 429.695 cv
296.27 429.562 296.16 429.445 296.004 429.352 cv
295.824 429.25 295.613 429.188 295.363 429.164 cv
295.113 429.145 294.801 429.133 294.426 429.133 cv
293.082 429.133 li
293.082 431.57 li
294.535 431.57 li
294.887 431.57 295.164 431.555 295.363 431.523 cv
295.57 431.484 295.77 431.406 295.957 431.289 cv
296.133 431.176 296.258 431.031 296.332 430.852 cv
296.402 430.676 296.441 430.461 296.441 430.211 cv
cp
297.16 434.055 mo
297.16 433.711 297.105 433.441 297.004 433.242 cv
296.898 433.047 296.711 432.879 296.441 432.742 cv
296.262 432.641 296.043 432.578 295.785 432.555 cv
295.523 432.523 295.211 432.508 294.848 432.508 cv
293.082 432.508 li
293.082 435.648 li
294.566 435.648 li
295.055 435.648 295.457 435.625 295.77 435.57 cv
296.082 435.52 296.34 435.426 296.551 435.289 cv
296.758 435.145 296.91 434.977 297.004 434.789 cv
297.105 434.602 297.16 434.359 297.16 434.055 cv
cp
f
306.566 436.602 mo
305.363 436.602 li
304.535 434.258 li
300.895 434.258 li
300.066 436.602 li
298.926 436.602 li
302.004 428.18 li
303.488 428.18 li
cp
304.191 433.289 mo
302.723 429.148 li
301.238 433.289 li
cp
f
313.176 429.164 mo
310.16 429.164 li
310.16 436.602 li
309.051 436.602 li
309.051 429.164 li
306.035 429.164 li
306.035 428.18 li
313.176 428.18 li
cp
f
320.32 429.133 mo
320.664 429.52 320.922 429.988 321.102 430.539 cv
321.289 431.082 321.383 431.695 321.383 432.383 cv
321.383 433.082 321.289 433.707 321.102 434.258 cv
320.914 434.812 320.652 435.27 320.32 435.633 cv
319.965 436.008 319.547 436.297 319.07 436.492 cv
318.602 436.68 318.062 436.773 317.461 436.773 cv
316.867 436.773 316.324 436.68 315.836 436.492 cv
315.355 436.297 314.945 436.008 314.602 435.633 cv
314.266 435.258 314.008 434.801 313.82 434.258 cv
313.641 433.707 313.555 433.082 313.555 432.383 cv
313.555 431.707 313.641 431.098 313.82 430.555 cv
313.996 430.004 314.262 429.531 314.617 429.133 cv
314.949 428.77 315.359 428.488 315.852 428.289 cv
316.34 428.094 316.875 427.992 317.461 427.992 cv
318.062 427.992 318.605 428.094 319.086 428.289 cv
319.562 428.488 319.977 428.77 320.32 429.133 cv
cp
320.211 432.383 mo
320.211 431.289 319.965 430.445 319.477 429.852 cv
318.984 429.258 318.312 428.961 317.461 428.961 cv
316.605 428.961 315.934 429.258 315.445 429.852 cv
314.953 430.445 314.711 431.289 314.711 432.383 cv
314.711 433.5 314.961 434.348 315.461 434.93 cv
315.961 435.516 316.625 435.805 317.461 435.805 cv
318.305 435.805 318.969 435.516 319.461 434.93 cv
319.961 434.348 320.211 433.5 320.211 432.383 cv
cp
f
326.969 432.398 mo
330.516 432.398 li
330.516 433.429 li
326.969 433.429 li
cp
f
342.141 436.602 mo
336.578 436.602 li
336.578 428.18 li
342.141 428.18 li
342.141 429.164 li
337.703 429.164 li
337.703 431.477 li
342.141 431.477 li
342.141 432.477 li
337.703 432.477 li
337.703 435.602 li
342.141 435.602 li
cp
f
350.039 434.195 mo
350.039 434.531 349.961 434.859 349.805 435.18 cv
349.656 435.492 349.449 435.766 349.18 435.992 cv
348.875 436.234 348.523 436.422 348.117 436.555 cv
347.719 436.688 347.234 436.758 346.664 436.758 cv
346.059 436.758 345.512 436.699 345.023 436.586 cv
344.543 436.473 344.055 436.305 343.555 436.086 cv
343.555 434.68 li
343.633 434.68 li
344.059 435.035 344.547 435.312 345.102 435.508 cv
345.664 435.695 346.188 435.789 346.68 435.789 cv
347.375 435.789 347.918 435.66 348.305 435.398 cv
348.688 435.141 348.883 434.789 348.883 434.352 cv
348.883 433.977 348.789 433.703 348.602 433.523 cv
348.422 433.348 348.148 433.211 347.773 433.117 cv
347.492 433.047 347.184 432.984 346.852 432.93 cv
346.516 432.879 346.168 432.816 345.805 432.742 cv
345.055 432.586 344.496 432.316 344.133 431.93 cv
343.777 431.547 343.602 431.047 343.602 430.43 cv
343.602 429.723 343.898 429.145 344.492 428.695 cv
345.086 428.25 345.84 428.023 346.758 428.023 cv
347.352 428.023 347.891 428.082 348.383 428.195 cv
348.883 428.301 349.324 428.438 349.711 428.602 cv
349.711 429.93 li
349.633 429.93 li
349.309 429.66 348.887 429.438 348.367 429.258 cv
347.844 429.082 347.309 428.992 346.758 428.992 cv
346.152 428.992 345.668 429.117 345.305 429.367 cv
344.938 429.617 344.758 429.938 344.758 430.32 cv
344.758 430.676 344.844 430.953 345.023 431.148 cv
345.211 431.348 345.531 431.5 345.992 431.602 cv
346.23 431.664 346.574 431.734 347.023 431.805 cv
347.469 431.879 347.844 431.957 348.148 432.039 cv
348.781 432.207 349.258 432.457 349.57 432.789 cv
349.883 433.125 350.039 433.594 350.039 434.195 cv
cp
f
359.359 436.602 mo
358.234 436.602 li
358.234 429.336 li
355.891 434.273 li
355.219 434.273 li
352.891 429.336 li
352.891 436.602 li
351.844 436.602 li
351.844 428.18 li
353.375 428.18 li
355.625 432.867 li
357.797 428.18 li
359.359 428.18 li
cp
f
367.184 436.602 mo
361.621 436.602 li
361.621 428.18 li
367.184 428.18 li
367.184 429.164 li
362.746 429.164 li
362.746 431.477 li
367.184 431.477 li
367.184 432.477 li
362.746 432.477 li
362.746 435.602 li
367.184 435.602 li
cp
f
375.938 436.602 mo
374.484 436.602 li
371.656 433.258 li
370.078 433.258 li
370.078 436.602 li
368.953 436.602 li
368.953 428.18 li
371.328 428.18 li
371.828 428.18 372.25 428.211 372.594 428.273 cv
372.938 428.336 373.242 428.457 373.516 428.633 cv
373.816 428.82 374.051 429.062 374.219 429.352 cv
374.395 429.645 374.484 430.016 374.484 430.461 cv
374.484 431.078 374.328 431.586 374.016 431.992 cv
373.711 432.398 373.297 432.707 372.766 432.914 cv
cp
373.312 430.539 mo
373.312 430.301 373.27 430.086 373.188 429.898 cv
373.102 429.711 372.961 429.555 372.766 429.43 cv
372.598 429.316 372.406 429.238 372.188 429.195 cv
371.969 429.156 371.707 429.133 371.406 429.133 cv
370.078 429.133 li
370.078 432.32 li
371.219 432.32 li
371.57 432.32 371.879 432.289 372.141 432.227 cv
372.398 432.164 372.625 432.047 372.812 431.867 cv
372.977 431.711 373.102 431.535 373.188 431.336 cv
373.27 431.129 373.312 430.863 373.312 430.539 cv
cp
f
383.676 436.602 mo
382.473 436.602 li
381.645 434.258 li
378.004 434.258 li
377.176 436.602 li
376.035 436.602 li
379.113 428.18 li
380.598 428.18 li
cp
381.301 433.289 mo
379.832 429.148 li
378.348 433.289 li
cp
f
390.293 436.602 mo
384.949 436.602 li
384.949 428.18 li
386.074 428.18 li
386.074 435.602 li
390.293 435.602 li
cp
f
398.531 432.398 mo
398.531 433.16 398.363 433.852 398.031 434.477 cv
397.695 435.102 397.254 435.586 396.703 435.93 cv
396.316 436.172 395.883 436.344 395.406 436.445 cv
394.938 436.551 394.316 436.602 393.547 436.602 cv
391.406 436.602 li
391.406 428.18 li
393.516 428.18 li
394.336 428.18 394.988 428.238 395.469 428.352 cv
395.957 428.469 396.375 428.629 396.719 428.836 cv
397.289 429.203 397.734 429.68 398.047 430.273 cv
398.367 430.867 398.531 431.578 398.531 432.398 cv
cp
397.359 432.383 mo
397.359 431.719 397.242 431.16 397.016 430.711 cv
396.785 430.254 396.441 429.895 395.984 429.633 cv
395.648 429.445 395.297 429.316 394.922 429.242 cv
394.555 429.172 394.113 429.133 393.594 429.133 cv
392.531 429.133 li
392.531 435.633 li
393.594 435.633 li
394.125 435.633 394.594 435.598 395 435.523 cv
395.406 435.441 395.773 435.297 396.109 435.086 cv
396.523 434.816 396.836 434.461 397.047 434.023 cv
397.254 433.586 397.359 433.039 397.359 432.383 cv
cp
f
407 436.602 mo
405.797 436.602 li
404.969 434.258 li
401.328 434.258 li
400.5 436.602 li
399.359 436.602 li
402.438 428.18 li
403.922 428.18 li
cp
404.625 433.289 mo
403.156 429.148 li
401.672 433.289 li
cp
f
414.344 434.195 mo
414.344 434.531 414.266 434.859 414.109 435.18 cv
413.961 435.492 413.754 435.766 413.484 435.992 cv
413.18 436.234 412.828 436.422 412.422 436.555 cv
412.023 436.688 411.539 436.758 410.969 436.758 cv
410.363 436.758 409.816 436.699 409.328 436.586 cv
408.848 436.473 408.359 436.305 407.859 436.086 cv
407.859 434.68 li
407.938 434.68 li
408.363 435.035 408.852 435.312 409.406 435.508 cv
409.969 435.695 410.492 435.789 410.984 435.789 cv
411.68 435.789 412.223 435.66 412.609 435.398 cv
412.992 435.141 413.188 434.789 413.188 434.352 cv
413.188 433.977 413.094 433.703 412.906 433.523 cv
412.727 433.348 412.453 433.211 412.078 433.117 cv
411.797 433.047 411.488 432.984 411.156 432.93 cv
410.82 432.879 410.473 432.816 410.109 432.742 cv
409.359 432.586 408.801 432.316 408.438 431.93 cv
408.082 431.547 407.906 431.047 407.906 430.43 cv
407.906 429.723 408.203 429.145 408.797 428.695 cv
409.391 428.25 410.145 428.023 411.062 428.023 cv
411.656 428.023 412.195 428.082 412.688 428.195 cv
413.188 428.301 413.629 428.438 414.016 428.602 cv
414.016 429.93 li
413.938 429.93 li
413.613 429.66 413.191 429.438 412.672 429.258 cv
412.148 429.082 411.613 428.992 411.062 428.992 cv
410.457 428.992 409.973 429.117 409.609 429.367 cv
409.242 429.617 409.062 429.938 409.062 430.32 cv
409.062 430.676 409.148 430.953 409.328 431.148 cv
409.516 431.348 409.836 431.5 410.297 431.602 cv
410.535 431.664 410.879 431.734 411.328 431.805 cv
411.773 431.879 412.148 431.957 412.453 432.039 cv
413.086 432.207 413.562 432.457 413.875 432.789 cv
414.188 433.125 414.344 433.594 414.344 434.195 cv
cp
f
419.961 432.398 mo
423.508 432.398 li
423.508 433.429 li
419.961 433.429 li
cp
f
432.555 436.602 mo
429.227 436.602 li
429.227 435.742 li
430.32 435.742 li
430.32 429.039 li
429.227 429.039 li
429.227 428.18 li
432.555 428.18 li
432.555 429.039 li
431.445 429.039 li
431.445 435.742 li
432.555 435.742 li
cp
f
440.812 434.008 mo
440.812 434.426 440.734 434.797 440.578 435.117 cv
440.422 435.441 440.207 435.707 439.938 435.914 cv
439.625 436.164 439.273 436.344 438.891 436.445 cv
438.516 436.551 438.035 436.602 437.453 436.602 cv
434.453 436.602 li
434.453 428.18 li
436.953 428.18 li
437.566 428.18 438.023 428.203 438.328 428.242 cv
438.641 428.285 438.938 428.379 439.219 428.523 cv
439.531 428.691 439.754 428.898 439.891 429.148 cv
440.023 429.398 440.094 429.707 440.094 430.07 cv
440.094 430.469 439.988 430.805 439.781 431.086 cv
439.582 431.367 439.316 431.594 438.984 431.758 cv
438.984 431.805 li
439.547 431.922 439.988 432.172 440.312 432.555 cv
440.645 432.941 440.812 433.426 440.812 434.008 cv
cp
438.938 430.211 mo
438.938 430.004 438.898 429.832 438.828 429.695 cv
438.766 429.562 438.656 429.445 438.5 429.352 cv
438.32 429.25 438.109 429.188 437.859 429.164 cv
437.609 429.145 437.297 429.133 436.922 429.133 cv
435.578 429.133 li
435.578 431.57 li
437.031 431.57 li
437.383 431.57 437.66 431.555 437.859 431.523 cv
438.066 431.484 438.266 431.406 438.453 431.289 cv
438.629 431.176 438.754 431.031 438.828 430.852 cv
438.898 430.676 438.938 430.461 438.938 430.211 cv
cp
439.656 434.055 mo
439.656 433.711 439.602 433.441 439.5 433.242 cv
439.395 433.047 439.207 432.879 438.938 432.742 cv
438.758 432.641 438.539 432.578 438.281 432.555 cv
438.02 432.523 437.707 432.508 437.344 432.508 cv
435.578 432.508 li
435.578 435.648 li
437.062 435.648 li
437.551 435.648 437.953 435.625 438.266 435.57 cv
438.578 435.52 438.836 435.426 439.047 435.289 cv
439.254 435.145 439.406 434.977 439.5 434.789 cv
439.602 434.602 439.656 434.359 439.656 434.055 cv
cp
f
449.062 436.602 mo
447.859 436.602 li
447.031 434.258 li
443.391 434.258 li
442.562 436.602 li
441.422 436.602 li
444.5 428.18 li
445.984 428.18 li
cp
446.688 433.289 mo
445.219 429.148 li
443.734 433.289 li
cp
f
457.32 436.602 mo
455.867 436.602 li
453.039 433.258 li
451.461 433.258 li
451.461 436.602 li
450.336 436.602 li
450.336 428.18 li
452.711 428.18 li
453.211 428.18 453.633 428.211 453.977 428.273 cv
454.32 428.336 454.625 428.457 454.898 428.633 cv
455.199 428.82 455.434 429.062 455.602 429.352 cv
455.777 429.645 455.867 430.016 455.867 430.461 cv
455.867 431.078 455.711 431.586 455.398 431.992 cv
455.094 432.398 454.68 432.707 454.148 432.914 cv
cp
454.695 430.539 mo
454.695 430.301 454.652 430.086 454.57 429.898 cv
454.484 429.711 454.344 429.555 454.148 429.43 cv
453.98 429.316 453.789 429.238 453.57 429.195 cv
453.352 429.156 453.09 429.133 452.789 429.133 cv
451.461 429.133 li
451.461 432.32 li
452.602 432.32 li
452.953 432.32 453.262 432.289 453.523 432.227 cv
453.781 432.164 454.008 432.047 454.195 431.867 cv
454.359 431.711 454.484 431.535 454.57 431.336 cv
454.652 431.129 454.695 430.863 454.695 430.539 cv
cp
f
465.387 436.602 mo
463.934 436.602 li
461.105 433.258 li
459.527 433.258 li
459.527 436.602 li
458.402 436.602 li
458.402 428.18 li
460.777 428.18 li
461.277 428.18 461.699 428.211 462.043 428.273 cv
462.387 428.336 462.691 428.457 462.965 428.633 cv
463.266 428.82 463.5 429.062 463.668 429.352 cv
463.844 429.645 463.934 430.016 463.934 430.461 cv
463.934 431.078 463.777 431.586 463.465 431.992 cv
463.16 432.398 462.746 432.707 462.215 432.914 cv
cp
462.762 430.539 mo
462.762 430.301 462.719 430.086 462.637 429.898 cv
462.551 429.711 462.41 429.555 462.215 429.43 cv
462.047 429.316 461.855 429.238 461.637 429.195 cv
461.418 429.156 461.156 429.133 460.855 429.133 cv
459.527 429.133 li
459.527 432.32 li
460.668 432.32 li
461.02 432.32 461.328 432.289 461.59 432.227 cv
461.848 432.164 462.074 432.047 462.262 431.867 cv
462.426 431.711 462.551 431.535 462.637 431.336 cv
462.719 431.129 462.762 430.863 462.762 430.539 cv
cp
f
473.125 436.602 mo
471.922 436.602 li
471.094 434.258 li
467.453 434.258 li
466.625 436.602 li
465.484 436.602 li
468.562 428.18 li
470.047 428.18 li
cp
470.75 433.289 mo
469.281 429.148 li
467.797 433.289 li
cp
f
478.211 432.398 mo
481.758 432.398 li
481.758 433.429 li
478.211 433.429 li
cp
f
495.336 436.602 mo
494.211 436.602 li
494.211 429.336 li
491.867 434.273 li
491.195 434.273 li
488.867 429.336 li
488.867 436.602 li
487.82 436.602 li
487.82 428.18 li
489.352 428.18 li
491.602 432.867 li
493.773 428.18 li
495.336 428.18 li
cp
f
504.254 436.602 mo
503.051 436.602 li
502.223 434.258 li
498.582 434.258 li
497.754 436.602 li
496.613 436.602 li
499.691 428.18 li
501.176 428.18 li
cp
501.879 433.289 mo
500.41 429.148 li
498.926 433.289 li
cp
f
511.965 436.602 mo
510.574 436.602 li
506.574 429.055 li
506.574 436.602 li
505.527 436.602 li
505.527 428.18 li
507.277 428.18 li
510.918 435.055 li
510.918 428.18 li
511.965 428.18 li
cp
f
520.859 436.602 mo
519.656 436.602 li
518.828 434.258 li
515.188 434.258 li
514.359 436.602 li
513.219 436.602 li
516.297 428.18 li
517.781 428.18 li
cp
518.484 433.289 mo
517.016 429.148 li
515.531 433.289 li
cp
f
528.492 434.008 mo
528.492 434.426 528.414 434.797 528.258 435.117 cv
528.102 435.441 527.887 435.707 527.617 435.914 cv
527.305 436.164 526.953 436.344 526.57 436.445 cv
526.195 436.551 525.715 436.602 525.133 436.602 cv
522.133 436.602 li
522.133 428.18 li
524.633 428.18 li
525.246 428.18 525.703 428.203 526.008 428.242 cv
526.32 428.285 526.617 428.379 526.898 428.523 cv
527.211 428.691 527.434 428.898 527.57 429.148 cv
527.703 429.398 527.773 429.707 527.773 430.07 cv
527.773 430.469 527.668 430.805 527.461 431.086 cv
527.262 431.367 526.996 431.594 526.664 431.758 cv
526.664 431.805 li
527.227 431.922 527.668 432.172 527.992 432.555 cv
528.324 432.941 528.492 433.426 528.492 434.008 cv
cp
526.617 430.211 mo
526.617 430.004 526.578 429.832 526.508 429.695 cv
526.445 429.562 526.336 429.445 526.18 429.352 cv
526 429.25 525.789 429.188 525.539 429.164 cv
525.289 429.145 524.977 429.133 524.602 429.133 cv
523.258 429.133 li
523.258 431.57 li
524.711 431.57 li
525.062 431.57 525.34 431.555 525.539 431.523 cv
525.746 431.484 525.945 431.406 526.133 431.289 cv
526.309 431.176 526.434 431.031 526.508 430.852 cv
526.578 430.676 526.617 430.461 526.617 430.211 cv
cp
527.336 434.055 mo
527.336 433.711 527.281 433.441 527.18 433.242 cv
527.074 433.047 526.887 432.879 526.617 432.742 cv
526.438 432.641 526.219 432.578 525.961 432.555 cv
525.699 432.523 525.387 432.508 525.023 432.508 cv
523.258 432.508 li
523.258 435.648 li
524.742 435.648 li
525.23 435.648 525.633 435.625 525.945 435.57 cv
526.258 435.52 526.516 435.426 526.727 435.289 cv
526.934 435.145 527.086 434.977 527.18 434.789 cv
527.281 434.602 527.336 434.359 527.336 434.055 cv
cp
f
533.07 436.602 mo
529.742 436.602 li
529.742 435.742 li
530.836 435.742 li
530.836 429.039 li
529.742 429.039 li
529.742 428.18 li
533.07 428.18 li
533.07 429.039 li
531.961 429.039 li
531.961 435.742 li
533.07 435.742 li
cp
533.07 425.008 mo
531.523 427.117 li
530.68 427.117 li
531.695 425.008 li
cp
f
538.781 432.398 mo
542.328 432.398 li
542.328 433.429 li
538.781 433.429 li
cp
f
554.516 434.195 mo
554.516 434.531 554.438 434.859 554.281 435.18 cv
554.133 435.492 553.926 435.766 553.656 435.992 cv
553.352 436.234 553 436.422 552.594 436.555 cv
552.195 436.688 551.711 436.758 551.141 436.758 cv
550.535 436.758 549.988 436.699 549.5 436.586 cv
549.02 436.473 548.531 436.305 548.031 436.086 cv
548.031 434.68 li
548.109 434.68 li
548.535 435.035 549.023 435.312 549.578 435.508 cv
550.141 435.695 550.664 435.789 551.156 435.789 cv
551.852 435.789 552.395 435.66 552.781 435.398 cv
553.164 435.141 553.359 434.789 553.359 434.352 cv
553.359 433.977 553.266 433.703 553.078 433.523 cv
552.898 433.348 552.625 433.211 552.25 433.117 cv
551.969 433.047 551.66 432.984 551.328 432.93 cv
550.992 432.879 550.645 432.816 550.281 432.742 cv
549.531 432.586 548.973 432.316 548.609 431.93 cv
548.254 431.547 548.078 431.047 548.078 430.43 cv
548.078 429.723 548.375 429.145 548.969 428.695 cv
549.562 428.25 550.316 428.023 551.234 428.023 cv
551.828 428.023 552.367 428.082 552.859 428.195 cv
553.359 428.301 553.801 428.438 554.188 428.602 cv
554.188 429.93 li
554.109 429.93 li
553.785 429.66 553.363 429.438 552.844 429.258 cv
552.32 429.082 551.785 428.992 551.234 428.992 cv
550.629 428.992 550.145 429.117 549.781 429.367 cv
549.414 429.617 549.234 429.938 549.234 430.32 cv
549.234 430.676 549.32 430.953 549.5 431.148 cv
549.688 431.348 550.008 431.5 550.469 431.602 cv
550.707 431.664 551.051 431.734 551.5 431.805 cv
551.945 431.879 552.32 431.957 552.625 432.039 cv
553.258 432.207 553.734 432.457 554.047 432.789 cv
554.359 433.125 554.516 433.594 554.516 434.195 cv
cp
f
562.863 436.602 mo
561.66 436.602 li
560.832 434.258 li
557.191 434.258 li
556.363 436.602 li
555.223 436.602 li
558.301 428.18 li
559.785 428.18 li
cp
560.488 433.289 mo
559.02 429.148 li
557.535 433.289 li
cp
f
570.574 436.602 mo
569.184 436.602 li
565.184 429.055 li
565.184 436.602 li
564.137 436.602 li
564.137 428.18 li
565.887 428.18 li
569.527 435.055 li
569.527 428.18 li
570.574 428.18 li
cp
f
578.832 429.164 mo
575.816 429.164 li
575.816 436.602 li
574.707 436.602 li
574.707 429.164 li
571.691 429.164 li
571.691 428.18 li
578.832 428.18 li
cp
f
585.977 429.133 mo
586.32 429.52 586.578 429.988 586.758 430.539 cv
586.945 431.082 587.039 431.695 587.039 432.383 cv
587.039 433.082 586.945 433.707 586.758 434.258 cv
586.57 434.812 586.309 435.27 585.977 435.633 cv
585.621 436.008 585.203 436.297 584.727 436.492 cv
584.258 436.68 583.719 436.773 583.117 436.773 cv
582.523 436.773 581.98 436.68 581.492 436.492 cv
581.012 436.297 580.602 436.008 580.258 435.633 cv
579.922 435.258 579.664 434.801 579.477 434.258 cv
579.297 433.707 579.211 433.082 579.211 432.383 cv
579.211 431.707 579.297 431.098 579.477 430.555 cv
579.652 430.004 579.918 429.531 580.273 429.133 cv
580.605 428.77 581.016 428.488 581.508 428.289 cv
581.996 428.094 582.531 427.992 583.117 427.992 cv
583.719 427.992 584.262 428.094 584.742 428.289 cv
585.219 428.488 585.633 428.77 585.977 429.133 cv
cp
585.867 432.383 mo
585.867 431.289 585.621 430.445 585.133 429.852 cv
584.641 429.258 583.969 428.961 583.117 428.961 cv
582.262 428.961 581.59 429.258 581.102 429.852 cv
580.609 430.445 580.367 431.289 580.367 432.383 cv
580.367 433.5 580.617 434.348 581.117 434.93 cv
581.617 435.516 582.281 435.805 583.117 435.805 cv
583.961 435.805 584.625 435.516 585.117 434.93 cv
585.617 434.348 585.867 433.5 585.867 432.383 cv
cp
f
600.016 432.398 mo
600.016 433.16 599.848 433.852 599.516 434.477 cv
599.18 435.102 598.738 435.586 598.188 435.93 cv
597.801 436.172 597.367 436.344 596.891 436.445 cv
596.422 436.551 595.801 436.602 595.031 436.602 cv
592.891 436.602 li
592.891 428.18 li
595 428.18 li
595.82 428.18 596.473 428.238 596.953 428.352 cv
597.441 428.469 597.859 428.629 598.203 428.836 cv
598.773 429.203 599.219 429.68 599.531 430.273 cv
599.852 430.867 600.016 431.578 600.016 432.398 cv
cp
598.844 432.383 mo
598.844 431.719 598.727 431.16 598.5 430.711 cv
598.27 430.254 597.926 429.895 597.469 429.633 cv
597.133 429.445 596.781 429.316 596.406 429.242 cv
596.039 429.172 595.598 429.133 595.078 429.133 cv
594.016 429.133 li
594.016 435.633 li
595.078 435.633 li
595.609 435.633 596.078 435.598 596.484 435.523 cv
596.891 435.441 597.258 435.297 597.594 435.086 cv
598.008 434.816 598.32 434.461 598.531 434.023 cv
598.738 433.586 598.844 433.039 598.844 432.383 cv
cp
f
608.125 429.133 mo
608.469 429.52 608.727 429.988 608.906 430.539 cv
609.094 431.082 609.188 431.695 609.188 432.383 cv
609.188 433.082 609.094 433.707 608.906 434.258 cv
608.719 434.812 608.457 435.27 608.125 435.633 cv
607.77 436.008 607.352 436.297 606.875 436.492 cv
606.406 436.68 605.867 436.773 605.266 436.773 cv
604.672 436.773 604.129 436.68 603.641 436.492 cv
603.16 436.297 602.75 436.008 602.406 435.633 cv
602.07 435.258 601.812 434.801 601.625 434.258 cv
601.445 433.707 601.359 433.082 601.359 432.383 cv
601.359 431.707 601.445 431.098 601.625 430.555 cv
601.801 430.004 602.066 429.531 602.422 429.133 cv
602.754 428.77 603.164 428.488 603.656 428.289 cv
604.145 428.094 604.68 427.992 605.266 427.992 cv
605.867 427.992 606.41 428.094 606.891 428.289 cv
607.367 428.488 607.781 428.77 608.125 429.133 cv
cp
608.016 432.383 mo
608.016 431.289 607.77 430.445 607.281 429.852 cv
606.789 429.258 606.117 428.961 605.266 428.961 cv
604.41 428.961 603.738 429.258 603.25 429.852 cv
602.758 430.445 602.516 431.289 602.516 432.383 cv
602.516 433.5 602.766 434.348 603.266 434.93 cv
603.766 435.516 604.43 435.805 605.266 435.805 cv
606.109 435.805 606.773 435.516 607.266 434.93 cv
607.766 434.348 608.016 433.5 608.016 432.383 cv
cp
f
618.473 436.602 mo
617.348 436.602 li
617.348 429.336 li
615.004 434.273 li
614.332 434.273 li
612.004 429.336 li
612.004 436.602 li
610.957 436.602 li
610.957 428.18 li
612.488 428.18 li
614.738 432.867 li
616.91 428.18 li
618.473 428.18 li
cp
f
623.719 436.602 mo
620.391 436.602 li
620.391 435.742 li
621.484 435.742 li
621.484 429.039 li
620.391 429.039 li
620.391 428.18 li
623.719 428.18 li
623.719 429.039 li
622.609 429.039 li
622.609 435.742 li
623.719 435.742 li
cp
f
632.055 436.602 mo
630.664 436.602 li
626.664 429.055 li
626.664 436.602 li
625.617 436.602 li
625.617 428.18 li
627.367 428.18 li
631.008 435.055 li
631.008 428.18 li
632.055 428.18 li
cp
f
641.324 435.977 mo
640.863 436.188 640.363 436.375 639.824 436.539 cv
639.281 436.695 638.754 436.773 638.246 436.773 cv
637.59 436.773 636.984 436.684 636.434 436.508 cv
635.891 436.32 635.426 436.047 635.043 435.68 cv
634.645 435.316 634.344 434.859 634.137 434.305 cv
633.926 433.754 633.824 433.113 633.824 432.383 cv
633.824 431.031 634.215 429.969 634.996 429.195 cv
635.785 428.414 636.871 428.023 638.246 428.023 cv
638.723 428.023 639.215 428.082 639.715 428.195 cv
640.215 428.312 640.75 428.504 641.324 428.773 cv
641.324 430.102 li
641.23 430.102 li
641.105 430.02 640.934 429.906 640.715 429.758 cv
640.496 429.602 640.277 429.477 640.059 429.383 cv
639.797 429.27 639.5 429.176 639.168 429.102 cv
638.844 429.02 638.469 428.977 638.043 428.977 cv
637.105 428.977 636.359 429.281 635.809 429.883 cv
635.254 430.488 634.98 431.312 634.98 432.352 cv
634.98 433.438 635.266 434.285 635.84 434.898 cv
636.41 435.504 637.191 435.805 638.184 435.805 cv
638.547 435.805 638.906 435.77 639.262 435.695 cv
639.625 435.625 639.941 435.531 640.215 435.414 cv
640.215 433.352 li
637.965 433.352 li
637.965 432.367 li
641.324 432.367 li
cp
f
649.586 429.133 mo
649.93 429.52 650.188 429.988 650.367 430.539 cv
650.555 431.082 650.648 431.695 650.648 432.383 cv
650.648 433.082 650.555 433.707 650.367 434.258 cv
650.18 434.812 649.918 435.27 649.586 435.633 cv
649.23 436.008 648.812 436.297 648.336 436.492 cv
647.867 436.68 647.328 436.773 646.727 436.773 cv
646.133 436.773 645.59 436.68 645.102 436.492 cv
644.621 436.297 644.211 436.008 643.867 435.633 cv
643.531 435.258 643.273 434.801 643.086 434.258 cv
642.906 433.707 642.82 433.082 642.82 432.383 cv
642.82 431.707 642.906 431.098 643.086 430.555 cv
643.262 430.004 643.527 429.531 643.883 429.133 cv
644.215 428.77 644.625 428.488 645.117 428.289 cv
645.605 428.094 646.141 427.992 646.727 427.992 cv
647.328 427.992 647.871 428.094 648.352 428.289 cv
648.828 428.488 649.242 428.77 649.586 429.133 cv
cp
649.477 432.383 mo
649.477 431.289 649.23 430.445 648.742 429.852 cv
648.25 429.258 647.578 428.961 646.727 428.961 cv
645.871 428.961 645.199 429.258 644.711 429.852 cv
644.219 430.445 643.977 431.289 643.977 432.383 cv
643.977 433.5 644.227 434.348 644.727 434.93 cv
645.227 435.516 645.891 435.805 646.727 435.805 cv
647.57 435.805 648.234 435.516 648.727 434.93 cv
649.227 434.348 649.477 433.5 649.477 432.383 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
